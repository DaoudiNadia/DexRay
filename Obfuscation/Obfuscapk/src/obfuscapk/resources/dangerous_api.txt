Landroid/accounts/AccountAuthenticatorActivity;->clearWallpaper()V
Landroid/accounts/AccountAuthenticatorActivity;->removeStickyBroadcast(Landroid/content/Intent;)V
Landroid/accounts/AccountAuthenticatorActivity;->removeStickyBroadcastAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V
Landroid/accounts/AccountAuthenticatorActivity;->setWallpaper(Landroid/graphics/Bitmap;)V
Landroid/accounts/AccountAuthenticatorActivity;->setWallpaper(Ljava/io/InputStream;)V
Landroid/accounts/AccountAuthenticatorActivity;->stopService(Landroid/content/Intent;)Z
Landroid/accounts/AccountAuthenticatorActivity;->unbindService(Landroid/content/ServiceConnection;)V
Landroid/app/Activity;->clearWallpaper()V
Landroid/app/Activity;->removeStickyBroadcast(Landroid/content/Intent;)V
Landroid/app/Activity;->removeStickyBroadcastAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V
Landroid/app/Activity;->setWallpaper(Landroid/graphics/Bitmap;)V
Landroid/app/Activity;->setWallpaper(Ljava/io/InputStream;)V
Landroid/app/Activity;->stopLockTask()V
Landroid/app/Activity;->stopService(Landroid/content/Intent;)Z
Landroid/app/Activity;->unbindService(Landroid/content/ServiceConnection;)V
Landroid/app/ActivityGroup;->clearWallpaper()V
Landroid/app/ActivityGroup;->removeStickyBroadcast(Landroid/content/Intent;)V
Landroid/app/ActivityGroup;->removeStickyBroadcastAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V
Landroid/app/ActivityGroup;->setWallpaper(Landroid/graphics/Bitmap;)V
Landroid/app/ActivityGroup;->setWallpaper(Ljava/io/InputStream;)V
Landroid/app/ActivityGroup;->stopService(Landroid/content/Intent;)Z
Landroid/app/ActivityGroup;->unbindService(Landroid/content/ServiceConnection;)V
Landroid/app/ActivityManager;->getRecentTasks(II)Ljava/util/List;
Landroid/app/ActivityManager;->getRunningAppProcesses()Ljava/util/List;
Landroid/app/ActivityManager;->getRunningTasks(I)Ljava/util/List;
Landroid/app/ActivityManager;->killBackgroundProcesses(Ljava/lang/String;)V
Landroid/app/ActivityManager;->moveTaskToFront(II)V
Landroid/app/ActivityManager;->moveTaskToFront(IILandroid/os/Bundle;)V
Landroid/app/ActivityManager;->restartPackage(Ljava/lang/String;)V
Landroid/app/admin/DevicePolicyManager;->getWifiMacAddress(Landroid/content/ComponentName;)Ljava/lang/String;
Landroid/app/AliasActivity;->clearWallpaper()V
Landroid/app/AliasActivity;->removeStickyBroadcast(Landroid/content/Intent;)V
Landroid/app/AliasActivity;->removeStickyBroadcastAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V
Landroid/app/AliasActivity;->setWallpaper(Landroid/graphics/Bitmap;)V
Landroid/app/AliasActivity;->setWallpaper(Ljava/io/InputStream;)V
Landroid/app/AliasActivity;->stopService(Landroid/content/Intent;)Z
Landroid/app/AliasActivity;->unbindService(Landroid/content/ServiceConnection;)V
Landroid/app/Application;->clearWallpaper()V
Landroid/app/Application;->removeStickyBroadcast(Landroid/content/Intent;)V
Landroid/app/Application;->removeStickyBroadcastAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V
Landroid/app/Application;->setWallpaper(Landroid/graphics/Bitmap;)V
Landroid/app/Application;->setWallpaper(Ljava/io/InputStream;)V
Landroid/app/Application;->stopService(Landroid/content/Intent;)Z
Landroid/app/Application;->unbindService(Landroid/content/ServiceConnection;)V
Landroid/app/backup/BackupAgentHelper;->clearWallpaper()V
Landroid/app/backup/BackupAgentHelper;->removeStickyBroadcast(Landroid/content/Intent;)V
Landroid/app/backup/BackupAgentHelper;->removeStickyBroadcastAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V
Landroid/app/backup/BackupAgentHelper;->setWallpaper(Landroid/graphics/Bitmap;)V
Landroid/app/backup/BackupAgentHelper;->setWallpaper(Ljava/io/InputStream;)V
Landroid/app/backup/BackupAgentHelper;->stopService(Landroid/content/Intent;)Z
Landroid/app/backup/BackupAgentHelper;->unbindService(Landroid/content/ServiceConnection;)V
Landroid/app/backup/BackupManager;->dataChanged()V
Landroid/app/backup/BackupManager;->dataChanged(Ljava/lang/String;)V
Landroid/app/ExpandableListActivity;->clearWallpaper()V
Landroid/app/ExpandableListActivity;->removeStickyBroadcast(Landroid/content/Intent;)V
Landroid/app/ExpandableListActivity;->removeStickyBroadcastAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V
Landroid/app/ExpandableListActivity;->setWallpaper(Landroid/graphics/Bitmap;)V
Landroid/app/ExpandableListActivity;->setWallpaper(Ljava/io/InputStream;)V
Landroid/app/ExpandableListActivity;->stopService(Landroid/content/Intent;)Z
Landroid/app/ExpandableListActivity;->unbindService(Landroid/content/ServiceConnection;)V
Landroid/app/JobSchedulerImpl;->schedule(Landroid/app/job/JobInfo;)I
Landroid/app/KeyguardManager$KeyguardLock;->disableKeyguard()V
Landroid/app/KeyguardManager$KeyguardLock;->reenableKeyguard()V
Landroid/app/KeyguardManager;->exitKeyguardSecurely(Landroid/app/KeyguardManager$OnKeyguardExitResult;)V
Landroid/app/ListActivity;->clearWallpaper()V
Landroid/app/ListActivity;->removeStickyBroadcast(Landroid/content/Intent;)V
Landroid/app/ListActivity;->removeStickyBroadcastAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V
Landroid/app/ListActivity;->setWallpaper(Landroid/graphics/Bitmap;)V
Landroid/app/ListActivity;->setWallpaper(Ljava/io/InputStream;)V
Landroid/app/ListActivity;->stopService(Landroid/content/Intent;)Z
Landroid/app/ListActivity;->unbindService(Landroid/content/ServiceConnection;)V
Landroid/app/NativeActivity;->clearWallpaper()V
Landroid/app/NativeActivity;->removeStickyBroadcast(Landroid/content/Intent;)V
Landroid/app/NativeActivity;->removeStickyBroadcastAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V
Landroid/app/NativeActivity;->setWallpaper(Landroid/graphics/Bitmap;)V
Landroid/app/NativeActivity;->setWallpaper(Ljava/io/InputStream;)V
Landroid/app/NativeActivity;->stopService(Landroid/content/Intent;)Z
Landroid/app/NativeActivity;->unbindService(Landroid/content/ServiceConnection;)V
Landroid/app/Service;->stopSelf()V
Landroid/app/Service;->stopSelf(I)V
Landroid/app/Service;->stopSelfResult(I)Z
Landroid/app/TabActivity;->clearWallpaper()V
Landroid/app/TabActivity;->removeStickyBroadcast(Landroid/content/Intent;)V
Landroid/app/TabActivity;->removeStickyBroadcastAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V
Landroid/app/TabActivity;->setWallpaper(Landroid/graphics/Bitmap;)V
Landroid/app/TabActivity;->setWallpaper(Ljava/io/InputStream;)V
Landroid/app/TabActivity;->stopService(Landroid/content/Intent;)Z
Landroid/app/TabActivity;->unbindService(Landroid/content/ServiceConnection;)V
Landroid/app/WallpaperManager;->clear()V
Landroid/app/WallpaperManager;->clear(I)V
Landroid/app/WallpaperManager;->setBitmap(Landroid/graphics/Bitmap;)V
Landroid/app/WallpaperManager;->setBitmap(Landroid/graphics/Bitmap;Landroid/graphics/Rect;Z)I
Landroid/app/WallpaperManager;->setBitmap(Landroid/graphics/Bitmap;Landroid/graphics/Rect;ZI)I
Landroid/app/WallpaperManager;->setResource(I)V
Landroid/app/WallpaperManager;->setResource(II)I
Landroid/app/WallpaperManager;->setStream(Ljava/io/InputStream;)V
Landroid/app/WallpaperManager;->setStream(Ljava/io/InputStream;Landroid/graphics/Rect;Z)I
Landroid/app/WallpaperManager;->setStream(Ljava/io/InputStream;Landroid/graphics/Rect;ZI)I
Landroid/app/WallpaperManager;->suggestDesiredDimensions(II)V
Landroid/bluetooth/BluetoothA2dp;->getConnectedDevices()Ljava/util/List;
Landroid/bluetooth/BluetoothA2dp;->getConnectionState(Landroid/bluetooth/BluetoothDevice;)I
Landroid/bluetooth/BluetoothA2dp;->getDevicesMatchingConnectionStates([I)Ljava/util/List;
Landroid/bluetooth/BluetoothA2dp;->isA2dpPlaying(Landroid/bluetooth/BluetoothDevice;)Z
Landroid/bluetooth/BluetoothAdapter;->cancelDiscovery()Z
Landroid/bluetooth/BluetoothAdapter;->closeProfileProxy(ILandroid/bluetooth/BluetoothProfile;)V
Landroid/bluetooth/BluetoothAdapter;->disable()Z
Landroid/bluetooth/BluetoothAdapter;->enable()Z
Landroid/bluetooth/BluetoothAdapter;->getAddress()Ljava/lang/String;
Landroid/bluetooth/BluetoothAdapter;->getBluetoothLeAdvertiser()Landroid/bluetooth/le/BluetoothLeAdvertiser;
Landroid/bluetooth/BluetoothAdapter;->getBluetoothLeScanner()Landroid/bluetooth/le/BluetoothLeScanner;
Landroid/bluetooth/BluetoothAdapter;->getBondedDevices()Ljava/util/Set;
Landroid/bluetooth/BluetoothAdapter;->getName()Ljava/lang/String;
Landroid/bluetooth/BluetoothAdapter;->getProfileConnectionState(I)I
Landroid/bluetooth/BluetoothAdapter;->getProfileProxy(Landroid/content/Context;Landroid/bluetooth/BluetoothProfile$ServiceListener;I)Z
Landroid/bluetooth/BluetoothAdapter;->getScanMode()I
Landroid/bluetooth/BluetoothAdapter;->getState()I
Landroid/bluetooth/BluetoothAdapter;->isDiscovering()Z
Landroid/bluetooth/BluetoothAdapter;->isEnabled()Z
Landroid/bluetooth/BluetoothAdapter;->isMultipleAdvertisementSupported()Z
Landroid/bluetooth/BluetoothAdapter;->isOffloadedFilteringSupported()Z
Landroid/bluetooth/BluetoothAdapter;->isOffloadedScanBatchingSupported()Z
Landroid/bluetooth/BluetoothAdapter;->listenUsingInsecureRfcommWithServiceRecord(Ljava/lang/String;Ljava/util/UUID;)Landroid/bluetooth/BluetoothServerSocket;
Landroid/bluetooth/BluetoothAdapter;->listenUsingRfcommWithServiceRecord(Ljava/lang/String;Ljava/util/UUID;)Landroid/bluetooth/BluetoothServerSocket;
Landroid/bluetooth/BluetoothAdapter;->setName(Ljava/lang/String;)Z
Landroid/bluetooth/BluetoothAdapter;->startDiscovery()Z
Landroid/bluetooth/BluetoothAdapter;->startLeScan(L[java/util/UUID;Landroid/bluetooth/BluetoothAdapter$LeScanCallback;)Z
Landroid/bluetooth/BluetoothAdapter;->startLeScan(Landroid/bluetooth/BluetoothAdapter$LeScanCallback;)Z
Landroid/bluetooth/BluetoothAdapter;->stopLeScan(Landroid/bluetooth/BluetoothAdapter$LeScanCallback;)V
Landroid/bluetooth/BluetoothDevice;->connectGatt(Landroid/content/Context;ZLandroid/bluetooth/BluetoothGattCallback;)Landroid/bluetooth/BluetoothGatt;
Landroid/bluetooth/BluetoothDevice;->connectGatt(Landroid/content/Context;ZLandroid/bluetooth/BluetoothGattCallback;I)Landroid/bluetooth/BluetoothGatt;
Landroid/bluetooth/BluetoothDevice;->createBond()Z
Landroid/bluetooth/BluetoothDevice;->createInsecureRfcommSocketToServiceRecord(Ljava/util/UUID;)Landroid/bluetooth/BluetoothSocket;
Landroid/bluetooth/BluetoothDevice;->createRfcommSocketToServiceRecord(Ljava/util/UUID;)Landroid/bluetooth/BluetoothSocket;
Landroid/bluetooth/BluetoothDevice;->fetchUuidsWithSdp()Z
Landroid/bluetooth/BluetoothDevice;->getBluetoothClass()Landroid/bluetooth/BluetoothClass;
Landroid/bluetooth/BluetoothDevice;->getBondState()I
Landroid/bluetooth/BluetoothDevice;->getName()Ljava/lang/String;
Landroid/bluetooth/BluetoothDevice;->getType()I
Landroid/bluetooth/BluetoothDevice;->getUuids()[Landroid/os/ParcelUuid;
Landroid/bluetooth/BluetoothDevice;->setPin([B)Z
Landroid/bluetooth/BluetoothGatt;->abortReliableWrite()V
Landroid/bluetooth/BluetoothGatt;->abortReliableWrite(Landroid/bluetooth/BluetoothDevice;)V
Landroid/bluetooth/BluetoothGatt;->beginReliableWrite()Z
Landroid/bluetooth/BluetoothGatt;->close()V
Landroid/bluetooth/BluetoothGatt;->connect()Z
Landroid/bluetooth/BluetoothGatt;->disconnect()V
Landroid/bluetooth/BluetoothGatt;->discoverServices()Z
Landroid/bluetooth/BluetoothGatt;->executeReliableWrite()Z
Landroid/bluetooth/BluetoothGatt;->readCharacteristic(Landroid/bluetooth/BluetoothGattCharacteristic;)Z
Landroid/bluetooth/BluetoothGatt;->readDescriptor(Landroid/bluetooth/BluetoothGattDescriptor;)Z
Landroid/bluetooth/BluetoothGatt;->readRemoteRssi()Z
Landroid/bluetooth/BluetoothGatt;->requestConnectionPriority(I)Z
Landroid/bluetooth/BluetoothGatt;->requestMtu(I)Z
Landroid/bluetooth/BluetoothGatt;->setCharacteristicNotification(Landroid/bluetooth/BluetoothGattCharacteristic;Z)Z
Landroid/bluetooth/BluetoothGatt;->writeCharacteristic(Landroid/bluetooth/BluetoothGattCharacteristic;)Z
Landroid/bluetooth/BluetoothGatt;->writeDescriptor(Landroid/bluetooth/BluetoothGattDescriptor;)Z
Landroid/bluetooth/BluetoothGattServer;->addService(Landroid/bluetooth/BluetoothGattService;)Z
Landroid/bluetooth/BluetoothGattServer;->cancelConnection(Landroid/bluetooth/BluetoothDevice;)V
Landroid/bluetooth/BluetoothGattServer;->clearServices()V
Landroid/bluetooth/BluetoothGattServer;->close()V
Landroid/bluetooth/BluetoothGattServer;->connect(Landroid/bluetooth/BluetoothDevice;Z)Z
Landroid/bluetooth/BluetoothGattServer;->notifyCharacteristicChanged(Landroid/bluetooth/BluetoothDevice;Landroid/bluetooth/BluetoothGattCharacteristic;Z)Z
Landroid/bluetooth/BluetoothGattServer;->removeService(Landroid/bluetooth/BluetoothGattService;)Z
Landroid/bluetooth/BluetoothGattServer;->sendResponse(Landroid/bluetooth/BluetoothDevice;III[B)Z
Landroid/bluetooth/BluetoothHeadset;->getConnectedDevices()Ljava/util/List;
Landroid/bluetooth/BluetoothHeadset;->getConnectionState(Landroid/bluetooth/BluetoothDevice;)I
Landroid/bluetooth/BluetoothHeadset;->getDevicesMatchingConnectionStates([I)Ljava/util/List;
Landroid/bluetooth/BluetoothHeadset;->isAudioConnected(Landroid/bluetooth/BluetoothDevice;)Z
Landroid/bluetooth/BluetoothHeadset;->sendVendorSpecificResultCode(Landroid/bluetooth/BluetoothDevice;Ljava/lang/String;Ljava/lang/String;)Z
Landroid/bluetooth/BluetoothHeadset;->startVoiceRecognition(Landroid/bluetooth/BluetoothDevice;)Z
Landroid/bluetooth/BluetoothHeadset;->stopVoiceRecognition(Landroid/bluetooth/BluetoothDevice;)Z
Landroid/bluetooth/BluetoothHealth;->connectChannelToSource(Landroid/bluetooth/BluetoothDevice;Landroid/bluetooth/BluetoothHealthAppConfiguration;)Z
Landroid/bluetooth/BluetoothHealth;->disconnectChannel(Landroid/bluetooth/BluetoothDevice;Landroid/bluetooth/BluetoothHealthAppConfiguration;I)Z
Landroid/bluetooth/BluetoothHealth;->getConnectedDevices()Ljava/util/List;
Landroid/bluetooth/BluetoothHealth;->getConnectionState(Landroid/bluetooth/BluetoothDevice;)I
Landroid/bluetooth/BluetoothHealth;->getDevicesMatchingConnectionStates([I)Ljava/util/List;
Landroid/bluetooth/BluetoothHealth;->getMainChannelFd(Landroid/bluetooth/BluetoothDevice;Landroid/bluetooth/BluetoothHealthAppConfiguration;)Landroid/os/ParcelFileDescriptor;
Landroid/bluetooth/BluetoothHealth;->registerSinkAppConfiguration(Ljava/lang/String;ILandroid/bluetooth/BluetoothHealthCallback;)Z
Landroid/bluetooth/BluetoothHealth;->unregisterAppConfiguration(Landroid/bluetooth/BluetoothHealthAppConfiguration;)Z
Landroid/bluetooth/BluetoothManager;->getConnectedDevices(I)Ljava/util/List;
Landroid/bluetooth/BluetoothManager;->getConnectionState(Landroid/bluetooth/BluetoothDevice;I)I
Landroid/bluetooth/BluetoothManager;->getDevicesMatchingConnectionStates(I[I)Ljava/util/List;
Landroid/bluetooth/BluetoothManager;->openGattServer(Landroid/content/Context;Landroid/bluetooth/BluetoothGattServerCallback;)Landroid/bluetooth/BluetoothGattServer;
Landroid/bluetooth/BluetoothSocket;->connect()V
Landroid/bluetooth/le/BluetoothLeAdvertiser;->startAdvertising(Landroid/bluetooth/le/AdvertiseSettings;Landroid/bluetooth/le/AdvertiseData;Landroid/bluetooth/le/AdvertiseCallback;)V
Landroid/bluetooth/le/BluetoothLeAdvertiser;->startAdvertising(Landroid/bluetooth/le/AdvertiseSettings;Landroid/bluetooth/le/AdvertiseData;Landroid/bluetooth/le/AdvertiseData;Landroid/bluetooth/le/AdvertiseCallback;)V
Landroid/bluetooth/le/BluetoothLeAdvertiser;->stopAdvertising(Landroid/bluetooth/le/AdvertiseCallback;)V
Landroid/bluetooth/le/BluetoothLeScanner;->flushPendingScanResults(Landroid/bluetooth/le/ScanCallback;)V
Landroid/bluetooth/le/BluetoothLeScanner;->startScan(Landroid/bluetooth/le/ScanCallback;)V
Landroid/bluetooth/le/BluetoothLeScanner;->startScan(Ljava/util/List;Landroid/bluetooth/le/ScanSettings;Landroid/bluetooth/le/ScanCallback;)V
Landroid/bluetooth/le/BluetoothLeScanner;->stopScan(Landroid/bluetooth/le/ScanCallback;)V
Landroid/content/ContextWrapper;->clearWallpaper()V
Landroid/content/ContextWrapper;->removeStickyBroadcast(Landroid/content/Intent;)V
Landroid/content/ContextWrapper;->removeStickyBroadcastAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V
Landroid/content/ContextWrapper;->setWallpaper(Landroid/graphics/Bitmap;)V
Landroid/content/ContextWrapper;->setWallpaper(Ljava/io/InputStream;)V
Landroid/content/ContextWrapper;->stopService(Landroid/content/Intent;)Z
Landroid/content/ContextWrapper;->unbindService(Landroid/content/ServiceConnection;)V
Landroid/content/MutableContextWrapper;->clearWallpaper()V
Landroid/content/MutableContextWrapper;->removeStickyBroadcast(Landroid/content/Intent;)V
Landroid/content/MutableContextWrapper;->removeStickyBroadcastAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V
Landroid/content/MutableContextWrapper;->setWallpaper(Landroid/graphics/Bitmap;)V
Landroid/content/MutableContextWrapper;->setWallpaper(Ljava/io/InputStream;)V
Landroid/content/MutableContextWrapper;->stopService(Landroid/content/Intent;)Z
Landroid/content/MutableContextWrapper;->unbindService(Landroid/content/ServiceConnection;)V
Landroid/hardware/ConsumerIrManager;->getCarrierFrequencies()[Landroid/hardware/ConsumerIrManager$CarrierFrequencyRange;
Landroid/hardware/ConsumerIrManager;->transmit(I[I)V
Landroid/hardware/fingerprI/FingerprIManager;->authenticate(Landroid/hardware/fingerprI/FingerprIManager$CryptoObject;Landroid/os/CancellationSignal;ILandroid/hardware/fingerprI/FingerprIManager$AuthenticationCallback;Landroid/os/Handler;)V
Landroid/hardware/fingerprI/FingerprIManager;->hasEnrolledFingerprIs()Z
Landroid/hardware/fingerprI/FingerprIManager;->isHardwareDetected()Z
Landroid/hardware/location/ActivityRecognitionHardware;->disableActivityEvent(Ljava/lang/String;I)Z
Landroid/hardware/location/ActivityRecognitionHardware;->enableActivityEvent(Ljava/lang/String;IJ)Z
Landroid/hardware/location/ActivityRecognitionHardware;->flush()Z
Landroid/hardware/location/ActivityRecognitionHardware;->getSupportedActivities()[Ljava/lang/String;
Landroid/hardware/location/ActivityRecognitionHardware;->isActivitySupported(Ljava/lang/String;)Z
Landroid/hardware/location/ActivityRecognitionHardware;->registerSink(Landroid/hardware/location/IActivityRecognitionHardwareSink;)Z
Landroid/hardware/location/ActivityRecognitionHardware;->unregisterSink(Landroid/hardware/location/IActivityRecognitionHardwareSink;)Z
Landroid/hardware/location/ContextHubService;->findNanoAppOnHub(ILandroid/hardware/location/NanoAppFilter;)[I
Landroid/hardware/location/ContextHubService;->getContextHubHandles()[I
Landroid/hardware/location/ContextHubService;->getContextHubInfo(I)Landroid/hardware/location/ContextHubInfo;
Landroid/hardware/location/ContextHubService;->getNanoAppInstanceInfo(I)Landroid/hardware/location/NanoAppInstanceInfo;
Landroid/hardware/location/ContextHubService;->loadNanoApp(ILandroid/hardware/location/NanoApp;)I
Landroid/hardware/location/ContextHubService;->registerCallback(Landroid/hardware/location/IContextHubCallback;)I
Landroid/hardware/location/ContextHubService;->sendMessage(IILandroid/hardware/location/ContextHubMessage;)I
Landroid/hardware/location/ContextHubService;->unloadNanoApp(I)I
Landroid/inputmethodservice/InputMethodService;->clearWallpaper()V
Landroid/inputmethodservice/InputMethodService;->removeStickyBroadcast(Landroid/content/Intent;)V
Landroid/inputmethodservice/InputMethodService;->removeStickyBroadcastAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V
Landroid/inputmethodservice/InputMethodService;->setWallpaper(Landroid/graphics/Bitmap;)V
Landroid/inputmethodservice/InputMethodService;->setWallpaper(Ljava/io/InputStream;)V
Landroid/inputmethodservice/InputMethodService;->stopService(Landroid/content/Intent;)Z
Landroid/inputmethodservice/InputMethodService;->unbindService(Landroid/content/ServiceConnection;)V
Landroid/location/LocationManager;->addGpsStatusListener(Landroid/location/GpsStatus$Listener;)Z
Landroid/location/LocationManager;->addNmeaListener(Landroid/location/GpsStatus$NmeaListener;)Z
Landroid/location/LocationManager;->addNmeaListener(Landroid/location/OnNmeaMessageListener;)Z
Landroid/location/LocationManager;->addNmeaListener(Landroid/location/OnNmeaMessageListener;Landroid/os/Handler;)Z
Landroid/location/LocationManager;->addProximityAlert(DDFJLandroid/app/PendingIntent;)V
Landroid/location/LocationManager;->getBestProvider(Landroid/location/Criteria;Z)Ljava/lang/String;
Landroid/location/LocationManager;->getLastKnownLocation(Ljava/lang/String;)Landroid/location/Location;
Landroid/location/LocationManager;->getProvider(Ljava/lang/String;)Landroid/location/LocationProvider;
Landroid/location/LocationManager;->getProviders(Landroid/location/Criteria;Z)Ljava/util/List;
Landroid/location/LocationManager;->getProviders(Z)Ljava/util/List;
Landroid/location/LocationManager;->registerGnssStatusCallback(Landroid/location/GnssStatus$Callback;)Z
Landroid/location/LocationManager;->registerGnssStatusCallback(Landroid/location/GnssStatus$Callback;Landroid/os/Handler;)Z
Landroid/location/LocationManager;->removeUpdates(Landroid/app/PendingIntent;)V
Landroid/location/LocationManager;->removeUpdates(Landroid/location/LocationListener;)V
Landroid/location/LocationManager;->requestLocationUpdates(JFLandroid/location/Criteria;Landroid/app/PendingIntent;)V
Landroid/location/LocationManager;->requestLocationUpdates(JFLandroid/location/Criteria;Landroid/location/LocationListener;Landroid/os/Looper;)V
Landroid/location/LocationManager;->requestLocationUpdates(Ljava/lang/String;JFLandroid/app/PendingIntent;)V
Landroid/location/LocationManager;->requestLocationUpdates(Ljava/lang/String;JFLandroid/location/LocationListener;)V
Landroid/location/LocationManager;->requestLocationUpdates(Ljava/lang/String;JFLandroid/location/LocationListener;Landroid/os/Looper;)V
Landroid/location/LocationManager;->requestSingleUpdate(Landroid/location/Criteria;Landroid/app/PendingIntent;)V
Landroid/location/LocationManager;->requestSingleUpdate(Landroid/location/Criteria;Landroid/location/LocationListener;Landroid/os/Looper;)V
Landroid/location/LocationManager;->requestSingleUpdate(Ljava/lang/String;Landroid/app/PendingIntent;)V
Landroid/location/LocationManager;->requestSingleUpdate(Ljava/lang/String;Landroid/location/LocationListener;Landroid/os/Looper;)V
Landroid/location/LocationManager;->sendExtraCommand(Ljava/lang/String;Ljava/lang/String;Landroid/os/Bundle;)Z
Landroid/media/AsyncPlayer;->play(Landroid/content/Context;Landroid/net/Uri;ZI)V
Landroid/media/AsyncPlayer;->play(Landroid/content/Context;Landroid/net/Uri;ZLandroid/media/AudioAttributes;)V
Landroid/media/AsyncPlayer;->stop()V
Landroid/media/AudioManager;->adjustStreamVolume(III)V
Landroid/media/AudioManager;->setBluetoothScoOn(Z)V
Landroid/media/AudioManager;->setMicrophoneMute(Z)V
Landroid/media/AudioManager;->setMode(I)V
Landroid/media/AudioManager;->setSpeakerphoneOn(Z)V
Landroid/media/AudioManager;->setStreamMute(IZ)V
Landroid/media/AudioManager;->setStreamVolume(III)V
Landroid/media/AudioManager;->startBluetoothSco()V
Landroid/media/AudioManager;->stopBluetoothSco()V
Landroid/media/browse/MediaBrowser;->disconnect()V
Landroid/media/MediaPlayer;->pause()V
Landroid/media/MediaPlayer;->release()V
Landroid/media/MediaPlayer;->reset()V
Landroid/media/MediaPlayer;->setWakeMode(Landroid/content/Context;I)V
Landroid/media/MediaPlayer;->start()V
Landroid/media/MediaPlayer;->stop()V
Landroid/media/MediaRouter$RouteGroup;->requestSetVolume(I)V
Landroid/media/MediaRouter$RouteGroup;->requestUpdateVolume(I)V
Landroid/media/MediaRouter$RouteInfo;->requestSetVolume(I)V
Landroid/media/MediaRouter$RouteInfo;->requestUpdateVolume(I)V
Landroid/media/MediaScannerConnection;->disconnect()V
Landroid/media/Ringtone;->play()V
Landroid/media/Ringtone;->setAudioAttributes(Landroid/media/AudioAttributes;)V
Landroid/media/Ringtone;->setStreamType(I)V
Landroid/media/Ringtone;->stop()V
Landroid/media/RingtoneManager;->getRingtone(I)Landroid/media/Ringtone;
Landroid/media/RingtoneManager;->getRingtone(Landroid/content/Context;Landroid/net/Uri;)Landroid/media/Ringtone;
Landroid/media/RingtoneManager;->stopPreviousRingtone()V
Landroid/net/ConnectivityManager;->getActiveNetwork()Landroid/net/Network;
Landroid/net/ConnectivityManager;->getActiveNetworkInfo()Landroid/net/NetworkInfo;
Landroid/net/ConnectivityManager;->getAllNetworkInfo()[Landroid/net/NetworkInfo;
Landroid/net/ConnectivityManager;->getAllNetworks()[Landroid/net/Network;
Landroid/net/ConnectivityManager;->getLinkProperties(Landroid/net/Network;)Landroid/net/LinkProperties;
Landroid/net/ConnectivityManager;->getNetworkCapabilities(Landroid/net/Network;)Landroid/net/NetworkCapabilities;
Landroid/net/ConnectivityManager;->getNetworkInfo(I)Landroid/net/NetworkInfo;
Landroid/net/ConnectivityManager;->getNetworkInfo(Landroid/net/Network;)Landroid/net/NetworkInfo;
Landroid/net/ConnectivityManager;->getRestrictBackgroundStatus()I
Landroid/net/ConnectivityManager;->isActiveNetworkMetered()Z
Landroid/net/ConnectivityManager;->registerDefaultNetworkCallback(Landroid/net/ConnectivityManager$NetworkCallback;)V
Landroid/net/ConnectivityManager;->registerNetworkCallback(Landroid/net/NetworkRequest;Landroid/app/PendingIntent;)V
Landroid/net/ConnectivityManager;->registerNetworkCallback(Landroid/net/NetworkRequest;Landroid/net/ConnectivityManager$NetworkCallback;)V
Landroid/net/ConnectivityManager;->reportBadNetwork(Landroid/net/Network;)V
Landroid/net/ConnectivityManager;->reportNetworkConnectivity(Landroid/net/Network;Z)V
Landroid/net/ConnectivityManager;->requestBandwidthUpdate(Landroid/net/Network;)Z
Landroid/net/ConnectivityManager;->requestNetwork(Landroid/net/NetworkRequest;Landroid/app/PendingIntent;)V
Landroid/net/ConnectivityManager;->requestNetwork(Landroid/net/NetworkRequest;Landroid/net/ConnectivityManager$NetworkCallback;)V
Landroid/net/ConnectivityManager;->requestRouteToHost(II)Z
Landroid/net/ConnectivityManager;->startUsingNetworkFeature(ILjava/lang/String;)I
Landroid/net/sip/SipAudioCall;->close()V
Landroid/net/sip/SipAudioCall;->endCall()V
Landroid/net/sip/SipAudioCall;->setSpeakerMode(Z)V
Landroid/net/sip/SipAudioCall;->startAudio()V
Landroid/net/sip/SipManager;->close(Ljava/lang/String;)V
Landroid/net/sip/SipManager;->createSipSession(Landroid/net/sip/SipProfile;Landroid/net/sip/SipSession$Listener;)Landroid/net/sip/SipSession;
Landroid/net/sip/SipManager;->getSessionFor(Landroid/content/Intent;)Landroid/net/sip/SipSession;
Landroid/net/sip/SipManager;->isOpened(Ljava/lang/String;)Z
Landroid/net/sip/SipManager;->isRegistered(Ljava/lang/String;)Z
Landroid/net/sip/SipManager;->makeAudioCall(Landroid/net/sip/SipProfile;Landroid/net/sip/SipProfile;Landroid/net/sip/SipAudioCall$Listener;I)Landroid/net/sip/SipAudioCall;
Landroid/net/sip/SipManager;->makeAudioCall(Ljava/lang/String;Ljava/lang/String;Landroid/net/sip/SipAudioCall$Listener;I)Landroid/net/sip/SipAudioCall;
Landroid/net/sip/SipManager;->open(Landroid/net/sip/SipProfile;)V
Landroid/net/sip/SipManager;->open(Landroid/net/sip/SipProfile;Landroid/app/PendingIntent;Landroid/net/sip/SipRegistrationListener;)V
Landroid/net/sip/SipManager;->register(Landroid/net/sip/SipProfile;ILandroid/net/sip/SipRegistrationListener;)V
Landroid/net/sip/SipManager;->setRegistrationListener(Ljava/lang/String;Landroid/net/sip/SipRegistrationListener;)V
Landroid/net/sip/SipManager;->takeAudioCall(Landroid/content/Intent;Landroid/net/sip/SipAudioCall$Listener;)Landroid/net/sip/SipAudioCall;
Landroid/net/sip/SipManager;->unregister(Landroid/net/sip/SipProfile;Landroid/net/sip/SipRegistrationListener;)V
Landroid/net/VpnService;->clearWallpaper()V
Landroid/net/VpnService;->onRevoke()V
Landroid/net/VpnService;->removeStickyBroadcast(Landroid/content/Intent;)V
Landroid/net/VpnService;->removeStickyBroadcastAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V
Landroid/net/VpnService;->setWallpaper(Landroid/graphics/Bitmap;)V
Landroid/net/VpnService;->setWallpaper(Ljava/io/InputStream;)V
Landroid/net/VpnService;->stopService(Landroid/content/Intent;)Z
Landroid/net/VpnService;->unbindService(Landroid/content/ServiceConnection;)V
Landroid/net/wifi/p2p/WifiP2pManager;->initialize(Landroid/content/Context;Landroid/os/Looper;Landroid/net/wifi/p2p/WifiP2pManager$ChannelListener;)Landroid/net/wifi/p2p/WifiP2pManager$Channel;
Landroid/net/wifi/WifiManager$MulticastLock;->acquire()V
Landroid/net/wifi/WifiManager$MulticastLock;->release()V
Landroid/net/wifi/WifiManager$WifiLock;->acquire()V
Landroid/net/wifi/WifiManager$WifiLock;->release()V
Landroid/net/wifi/WifiManager;->addNetwork(Landroid/net/wifi/WifiConfiguration;)I
Landroid/net/wifi/WifiManager;->cancelWps(Landroid/net/wifi/WifiManager$WpsCallback;)V
Landroid/net/wifi/WifiManager;->disableNetwork(I)Z
Landroid/net/wifi/WifiManager;->disconnect()Z
Landroid/net/wifi/WifiManager;->enableNetwork(IZ)Z
Landroid/net/wifi/WifiManager;->getConfiguredNetworks()Ljava/util/List;
Landroid/net/wifi/WifiManager;->getConnectionInfo()Landroid/net/wifi/WifiInfo;
Landroid/net/wifi/WifiManager;->getDhcpInfo()Landroid/net/DhcpInfo;
Landroid/net/wifi/WifiManager;->getScanResults()Ljava/util/List;
Landroid/net/wifi/WifiManager;->getWifiState()I
Landroid/net/wifi/WifiManager;->is5GHzBandSupported()Z
Landroid/net/wifi/WifiManager;->isDeviceToApRttSupported()Z
Landroid/net/wifi/WifiManager;->isEnhancedPowerReportingSupported()Z
Landroid/net/wifi/WifiManager;->isP2pSupported()Z
Landroid/net/wifi/WifiManager;->isPreferredNetworkOffloadSupported()Z
Landroid/net/wifi/WifiManager;->isScanAlwaysAvailable()Z
Landroid/net/wifi/WifiManager;->isTdlsSupported()Z
Landroid/net/wifi/WifiManager;->isWifiEnabled()Z
Landroid/net/wifi/WifiManager;->pingSupplicant()Z
Landroid/net/wifi/WifiManager;->reassociate()Z
Landroid/net/wifi/WifiManager;->reconnect()Z
Landroid/net/wifi/WifiManager;->removeNetwork(I)Z
Landroid/net/wifi/WifiManager;->saveConfiguration()Z
Landroid/net/wifi/WifiManager;->setWifiEnabled(Z)Z
Landroid/net/wifi/WifiManager;->startScan()Z
Landroid/net/wifi/WifiManager;->startWps(Landroid/net/wifi/WpsInfo;Landroid/net/wifi/WifiManager$WpsCallback;)V
Landroid/net/wifi/WifiManager;->updateNetwork(Landroid/net/wifi/WifiConfiguration;)I
Landroid/os/PowerManager$WakeLock;->acquire()V
Landroid/os/PowerManager$WakeLock;->acquire(J)V
Landroid/os/PowerManager$WakeLock;->release()V
Landroid/os/PowerManager$WakeLock;->release(I)V
Landroid/os/PowerManager$WakeLock;->setWorkSource(Landroid/os/WorkSource;)V
Landroid/os/SystemVibrator;->cancel()V
Landroid/os/SystemVibrator;->vibrate(ILjava/lang/String;[JILandroid/media/AudioAttributes;)V
Landroid/os/SystemVibrator;->vibrate(ILjava/lang/String;JLandroid/media/AudioAttributes;)V
Landroid/security/KeyChain;->getCertificateChain(Landroid/content/Context;Ljava/lang/String;)[Ljava/security/cert/X509Certificate;
Landroid/security/KeyChain;->getPrivateKey(Landroid/content/Context;Ljava/lang/String;)Ljava/security/PrivateKey;
Landroid/service/dreams/DreamService;->clearWallpaper()V
Landroid/service/dreams/DreamService;->dispatchGenericMotionEvent(Landroid/view/MotionEvent;)Z
Landroid/service/dreams/DreamService;->dispatchKeyEvent(Landroid/view/KeyEvent;)Z
Landroid/service/dreams/DreamService;->dispatchKeyShortcutEvent(Landroid/view/KeyEvent;)Z
Landroid/service/dreams/DreamService;->dispatchTouchEvent(Landroid/view/MotionEvent;)Z
Landroid/service/dreams/DreamService;->dispatchTrackballEvent(Landroid/view/MotionEvent;)Z
Landroid/service/dreams/DreamService;->finish()V
Landroid/service/dreams/DreamService;->onWakeUp()V
Landroid/service/dreams/DreamService;->removeStickyBroadcast(Landroid/content/Intent;)V
Landroid/service/dreams/DreamService;->removeStickyBroadcastAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V
Landroid/service/dreams/DreamService;->setWallpaper(Landroid/graphics/Bitmap;)V
Landroid/service/dreams/DreamService;->setWallpaper(Ljava/io/InputStream;)V
Landroid/service/dreams/DreamService;->stopService(Landroid/content/Intent;)Z
Landroid/service/dreams/DreamService;->unbindService(Landroid/content/ServiceConnection;)V
Landroid/service/dreams/DreamService;->wakeUp()V
Landroid/service/quicksettings/TileService;->clearWallpaper()V
Landroid/service/quicksettings/TileService;->removeStickyBroadcast(Landroid/content/Intent;)V
Landroid/service/quicksettings/TileService;->removeStickyBroadcastAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V
Landroid/service/quicksettings/TileService;->setWallpaper(Landroid/graphics/Bitmap;)V
Landroid/service/quicksettings/TileService;->setWallpaper(Ljava/io/InputStream;)V
Landroid/service/quicksettings/TileService;->stopService(Landroid/content/Intent;)Z
Landroid/service/quicksettings/TileService;->unbindService(Landroid/content/ServiceConnection;)V
Landroid/service/voice/VoiceInteractionService;->clearWallpaper()V
Landroid/service/voice/VoiceInteractionService;->removeStickyBroadcast(Landroid/content/Intent;)V
Landroid/service/voice/VoiceInteractionService;->removeStickyBroadcastAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V
Landroid/service/voice/VoiceInteractionService;->setWallpaper(Landroid/graphics/Bitmap;)V
Landroid/service/voice/VoiceInteractionService;->setWallpaper(Ljava/io/InputStream;)V
Landroid/service/voice/VoiceInteractionService;->stopService(Landroid/content/Intent;)Z
Landroid/service/voice/VoiceInteractionService;->unbindService(Landroid/content/ServiceConnection;)V
Landroid/speech/SpeechRecognizer;->destroy()V
Landroid/speech/tts/TextToSpeech;->getAvailableLanguages()Ljava/util/Set;
Landroid/speech/tts/TextToSpeech;->getDefaultLanguage()Ljava/util/Locale;
Landroid/speech/tts/TextToSpeech;->getDefaultVoice()Landroid/speech/tts/Voice;
Landroid/speech/tts/TextToSpeech;->getFeatures(Ljava/util/Locale;)Ljava/util/Set;
Landroid/speech/tts/TextToSpeech;->getLanguage()Ljava/util/Locale;
Landroid/speech/tts/TextToSpeech;->getVoice()Landroid/speech/tts/Voice;
Landroid/speech/tts/TextToSpeech;->getVoices()Ljava/util/Set;
Landroid/speech/tts/TextToSpeech;->isLanguageAvailable(Ljava/util/Locale;)I
Landroid/speech/tts/TextToSpeech;->isSpeaking()Z
Landroid/speech/tts/TextToSpeech;->playEarcon(Ljava/lang/String;ILandroid/os/Bundle;Ljava/lang/String;)I
Landroid/speech/tts/TextToSpeech;->playEarcon(Ljava/lang/String;ILjava/util/HashMap;)I
Landroid/speech/tts/TextToSpeech;->playSilence(JILjava/util/HashMap;)I
Landroid/speech/tts/TextToSpeech;->playSilentUtterance(JILjava/lang/String;)I
Landroid/speech/tts/TextToSpeech;->setLanguage(Ljava/util/Locale;)I
Landroid/speech/tts/TextToSpeech;->setVoice(Landroid/speech/tts/Voice;)I
Landroid/speech/tts/TextToSpeech;->shutdown()V
Landroid/speech/tts/TextToSpeech;->speak(Ljava/lang/CharSequence;ILandroid/os/Bundle;Ljava/lang/String;)I
Landroid/speech/tts/TextToSpeech;->speak(Ljava/lang/String;ILjava/util/HashMap;)I
Landroid/speech/tts/TextToSpeech;->stop()I
Landroid/speech/tts/TextToSpeech;->synthesizeToFile(Ljava/lang/CharSequence;Landroid/os/Bundle;Ljava/io/File;Ljava/lang/String;)I
Landroid/speech/tts/TextToSpeech;->synthesizeToFile(Ljava/lang/String;Ljava/util/HashMap;Ljava/lang/String;)I
Landroid/telephony/gsm/SmsManager;->divideMessage(Ljava/lang/String;)Ljava/util/ArrayList;
Landroid/telephony/gsm/SmsManager;->sendDataMessage(Ljava/lang/String;Ljava/lang/String;S[BLandroid/app/PendingIntent;Landroid/app/PendingIntent;)V
Landroid/telephony/gsm/SmsManager;->sendMultipartTextMessage(Ljava/lang/String;Ljava/lang/String;Ljava/util/ArrayList;Ljava/util/ArrayList;Ljava/util/ArrayList;)V
Landroid/telephony/gsm/SmsManager;->sendTextMessage(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/app/PendingIntent;Landroid/app/PendingIntent;)V
Landroid/telephony/PhoneNumberUtils;->isVoiceMailNumber(Ljava/lang/String;)Z
Landroid/telephony/SmsManager;->divideMessage(Ljava/lang/String;)Ljava/util/ArrayList;
Landroid/telephony/SmsManager;->downloadMultimediaMessage(Landroid/content/Context;Ljava/lang/String;Landroid/net/Uri;Landroid/os/Bundle;Landroid/app/PendingIntent;)V
Landroid/telephony/SmsManager;->injectSmsPdu([BLjava/lang/String;Landroid/app/PendingIntent;)V
Landroid/telephony/SmsManager;->sendDataMessage(Ljava/lang/String;Ljava/lang/String;S[BLandroid/app/PendingIntent;Landroid/app/PendingIntent;)V
Landroid/telephony/SmsManager;->sendMultimediaMessage(Landroid/content/Context;Landroid/net/Uri;Ljava/lang/String;Landroid/os/Bundle;Landroid/app/PendingIntent;)V
Landroid/telephony/SmsManager;->sendMultipartTextMessage(Ljava/lang/String;Ljava/lang/String;Ljava/util/ArrayList;Ljava/util/ArrayList;Ljava/util/ArrayList;)V
Landroid/telephony/SmsManager;->sendTextMessage(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/app/PendingIntent;Landroid/app/PendingIntent;)V
Landroid/telephony/TelephonyManager;->getAllCellInfo()Ljava/util/List;
Landroid/telephony/TelephonyManager;->getCellLocation()Landroid/telephony/CellLocation;
Landroid/telephony/TelephonyManager;->getDeviceId(I)Ljava/lang/String;
Landroid/telephony/TelephonyManager;->getGroupIdLevel1()Ljava/lang/String;
Landroid/telephony/TelephonyManager;->getIccAuthentication(IILjava/lang/String;)Ljava/lang/String;
Landroid/telephony/TelephonyManager;->getLine1Number()Ljava/lang/String;
Landroid/telephony/TelephonyManager;->getNeighboringCellInfo()Ljava/util/List;
Landroid/telephony/TelephonyManager;->getPhoneCount()I
Landroid/telephony/TelephonyManager;->getSimSerialNumber()Ljava/lang/String;
Landroid/telephony/TelephonyManager;->getSimState()I
Landroid/telephony/TelephonyManager;->getSubscriberId()Ljava/lang/String;
Landroid/telephony/TelephonyManager;->getVoiceMailAlphaTag()Ljava/lang/String;
Landroid/telephony/TelephonyManager;->getVoiceMailNumber()Ljava/lang/String;
Landroid/telephony/TelephonyManager;->listen(Landroid/telephony/PhoneStateListener;I)V
Landroid/test/IsolatedContext;->clearWallpaper()V
Landroid/test/IsolatedContext;->removeStickyBroadcast(Landroid/content/Intent;)V
Landroid/test/IsolatedContext;->removeStickyBroadcastAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V
Landroid/test/IsolatedContext;->setWallpaper(Landroid/graphics/Bitmap;)V
Landroid/test/IsolatedContext;->setWallpaper(Ljava/io/InputStream;)V
Landroid/test/IsolatedContext;->stopService(Landroid/content/Intent;)Z
Landroid/test/IsolatedContext;->unbindService(Landroid/content/ServiceConnection;)V
Landroid/test/mock/MockApplication;->clearWallpaper()V
Landroid/test/mock/MockApplication;->removeStickyBroadcast(Landroid/content/Intent;)V
Landroid/test/mock/MockApplication;->removeStickyBroadcastAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V
Landroid/test/mock/MockApplication;->setWallpaper(Landroid/graphics/Bitmap;)V
Landroid/test/mock/MockApplication;->setWallpaper(Ljava/io/InputStream;)V
Landroid/test/mock/MockApplication;->stopService(Landroid/content/Intent;)Z
Landroid/test/mock/MockApplication;->unbindService(Landroid/content/ServiceConnection;)V
Landroid/test/RenamingDelegatingContext;->clearWallpaper()V
Landroid/test/RenamingDelegatingContext;->removeStickyBroadcast(Landroid/content/Intent;)V
Landroid/test/RenamingDelegatingContext;->removeStickyBroadcastAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V
Landroid/test/RenamingDelegatingContext;->setWallpaper(Landroid/graphics/Bitmap;)V
Landroid/test/RenamingDelegatingContext;->setWallpaper(Ljava/io/InputStream;)V
Landroid/test/RenamingDelegatingContext;->stopService(Landroid/content/Intent;)Z
Landroid/test/RenamingDelegatingContext;->unbindService(Landroid/content/ServiceConnection;)V
Landroid/view/ContextThemeWrapper;->clearWallpaper()V
Landroid/view/ContextThemeWrapper;->removeStickyBroadcast(Landroid/content/Intent;)V
Landroid/view/ContextThemeWrapper;->removeStickyBroadcastAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V
Landroid/view/ContextThemeWrapper;->setWallpaper(Landroid/graphics/Bitmap;)V
Landroid/view/ContextThemeWrapper;->setWallpaper(Ljava/io/InputStream;)V
Landroid/view/ContextThemeWrapper;->stopService(Landroid/content/Intent;)Z
Landroid/view/ContextThemeWrapper;->unbindService(Landroid/content/ServiceConnection;)V
Landroid/view/inputmethod/InputMethodManager;->showInputMethodAndSubtypeEnabler(Ljava/lang/String;)V
Landroid/widget/VideoView;->getAudioSessionId()I
Landroid/widget/VideoView;->onKeyDown(ILandroid/view/KeyEvent;)Z
Landroid/widget/VideoView;->pause()V
Landroid/widget/VideoView;->resume()V
Landroid/widget/VideoView;->setVideoPath(Ljava/lang/String;)V
Landroid/widget/VideoView;->setVideoURI(Landroid/net/Uri;)V
Landroid/widget/VideoView;->setVideoURI(Landroid/net/Uri;Ljava/util/Map;)V
Landroid/widget/VideoView;->start()V
Landroid/widget/VideoView;->stopPlayback()V
Landroid/widget/VideoView;->suspend()V
Lcom/android/bluetooth/a2dp/A2dpService$BluetoothA2dpBinder;->connect(Landroid/bluetooth/BluetoothDevice;)Z
Lcom/android/bluetooth/a2dp/A2dpService$BluetoothA2dpBinder;->disconnect(Landroid/bluetooth/BluetoothDevice;)Z
Lcom/android/bluetooth/a2dp/A2dpService$BluetoothA2dpBinder;->getConnectedDevices()Ljava/util/List;
Lcom/android/bluetooth/a2dp/A2dpService$BluetoothA2dpBinder;->getConnectionState(Landroid/bluetooth/BluetoothDevice;)I
Lcom/android/bluetooth/a2dp/A2dpService$BluetoothA2dpBinder;->getDevicesMatchingConnectionStates([I)Ljava/util/List;
Lcom/android/bluetooth/a2dp/A2dpService$BluetoothA2dpBinder;->getPriority(Landroid/bluetooth/BluetoothDevice;)I
Lcom/android/bluetooth/a2dp/A2dpService$BluetoothA2dpBinder;->isA2dpPlaying(Landroid/bluetooth/BluetoothDevice;)Z
Lcom/android/bluetooth/a2dp/A2dpService$BluetoothA2dpBinder;->setPriority(Landroid/bluetooth/BluetoothDevice;I)Z
Lcom/android/bluetooth/a2dpsink/A2dpSinkService$BluetoothA2dpSinkBinder;->connect(Landroid/bluetooth/BluetoothDevice;)Z
Lcom/android/bluetooth/a2dpsink/A2dpSinkService$BluetoothA2dpSinkBinder;->disconnect(Landroid/bluetooth/BluetoothDevice;)Z
Lcom/android/bluetooth/a2dpsink/A2dpSinkService$BluetoothA2dpSinkBinder;->getAudioConfig(Landroid/bluetooth/BluetoothDevice;)Landroid/bluetooth/BluetoothAudioConfig;
Lcom/android/bluetooth/a2dpsink/A2dpSinkService$BluetoothA2dpSinkBinder;->getConnectedDevices()Ljava/util/List;
Lcom/android/bluetooth/a2dpsink/A2dpSinkService$BluetoothA2dpSinkBinder;->getConnectionState(Landroid/bluetooth/BluetoothDevice;)I
Lcom/android/bluetooth/a2dpsink/A2dpSinkService$BluetoothA2dpSinkBinder;->getDevicesMatchingConnectionStates([I)Ljava/util/List;
Lcom/android/bluetooth/a2dpsink/A2dpSinkService$BluetoothA2dpSinkBinder;->getPriority(Landroid/bluetooth/BluetoothDevice;)I
Lcom/android/bluetooth/a2dpsink/A2dpSinkService$BluetoothA2dpSinkBinder;->isA2dpPlaying(Landroid/bluetooth/BluetoothDevice;)Z
Lcom/android/bluetooth/a2dpsink/A2dpSinkService$BluetoothA2dpSinkBinder;->setPriority(Landroid/bluetooth/BluetoothDevice;I)Z
Lcom/android/bluetooth/avrcp/AvrcpControllerService$BluetoothAvrcpControllerBinder;->getConnectedDevices()Ljava/util/List;
Lcom/android/bluetooth/avrcp/AvrcpControllerService$BluetoothAvrcpControllerBinder;->getConnectionState(Landroid/bluetooth/BluetoothDevice;)I
Lcom/android/bluetooth/avrcp/AvrcpControllerService$BluetoothAvrcpControllerBinder;->getDevicesMatchingConnectionStates([I)Ljava/util/List;
Lcom/android/bluetooth/avrcp/AvrcpControllerService$BluetoothAvrcpControllerBinder;->getMetadata(Landroid/bluetooth/BluetoothDevice;)Landroid/media/MediaMetadata;
Lcom/android/bluetooth/avrcp/AvrcpControllerService$BluetoothAvrcpControllerBinder;->getPlaybackState(Landroid/bluetooth/BluetoothDevice;)Landroid/media/session/PlaybackState;
Lcom/android/bluetooth/avrcp/AvrcpControllerService$BluetoothAvrcpControllerBinder;->getPlayerSettings(Landroid/bluetooth/BluetoothDevice;)Landroid/bluetooth/BluetoothAvrcpPlayerSettings;
Lcom/android/bluetooth/avrcp/AvrcpControllerService$BluetoothAvrcpControllerBinder;->sendGroupNavigationCmd(Landroid/bluetooth/BluetoothDevice;II)V
Lcom/android/bluetooth/avrcp/AvrcpControllerService$BluetoothAvrcpControllerBinder;->sendPassThroughCmd(Landroid/bluetooth/BluetoothDevice;II)V
Lcom/android/bluetooth/avrcp/AvrcpControllerService$BluetoothAvrcpControllerBinder;->setPlayerApplicationSetting(Landroid/bluetooth/BluetoothAvrcpPlayerSettings;)Z
Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->cancelBondProcess(Landroid/bluetooth/BluetoothDevice;)Z
Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->cancelDiscovery()Z
Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->configHciSnoopLog(Z)Z
Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->connectSocket(Landroid/bluetooth/BluetoothDevice;ILandroid/os/ParcelUuid;II)Landroid/os/ParcelFileDescriptor;
Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->createBond(Landroid/bluetooth/BluetoothDevice;I)Z
Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->createBondOutOfBand(Landroid/bluetooth/BluetoothDevice;ILandroid/bluetooth/OobData;)Z
Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->createSocketChannel(ILjava/lang/String;Landroid/os/ParcelUuid;II)Landroid/os/ParcelFileDescriptor;
Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->disable()Z
Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->enable()Z
Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->enableNoAutoConnect()Z
Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->factoryReset()Z
Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->fetchRemoteUuids(Landroid/bluetooth/BluetoothDevice;)Z
Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->getAdapterConnectionState()I
Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->getAddress()Ljava/lang/String;
Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->getBondedDevices()[Landroid/bluetooth/BluetoothDevice;
Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->getBondState(Landroid/bluetooth/BluetoothDevice;)I
Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->getConnectionState(Landroid/bluetooth/BluetoothDevice;)I
Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->getDiscoverableTimeout()I
Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->getMessageAccessPermission(Landroid/bluetooth/BluetoothDevice;)I
Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->getName()Ljava/lang/String;
Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->getPhonebookAccessPermission(Landroid/bluetooth/BluetoothDevice;)I
Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->getProfileConnectionState(I)I
Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->getRemoteAlias(Landroid/bluetooth/BluetoothDevice;)Ljava/lang/String;
Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->getRemoteClass(Landroid/bluetooth/BluetoothDevice;)I
Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->getRemoteName(Landroid/bluetooth/BluetoothDevice;)Ljava/lang/String;
Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->getRemoteType(Landroid/bluetooth/BluetoothDevice;)I
Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->getRemoteUuids(Landroid/bluetooth/BluetoothDevice;)[Landroid/os/ParcelUuid;
Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->getScanMode()I
Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->getSimAccessPermission(Landroid/bluetooth/BluetoothDevice;)I
Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->getState()I
Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->getUuids()[Landroid/os/ParcelUuid;
Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->isActivityAndEnergyReportingSupported()Z
Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->isDiscovering()Z
Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->isEnabled()Z
Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->isMultiAdvertisementSupported()Z
Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->isOffloadedFilteringSupported()Z
Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->isOffloadedScanBatchingSupported()Z
Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->removeBond(Landroid/bluetooth/BluetoothDevice;)Z
Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->reportActivityInfo()Landroid/bluetooth/BluetoothActivityEnergyInfo;
Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->requestActivityInfo(Landroid/os/ResultReceiver;)V
Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->sdpSearch(Landroid/bluetooth/BluetoothDevice;Landroid/os/ParcelUuid;)Z
Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->sendConnectionStateChange(Landroid/bluetooth/BluetoothDevice;III)V
Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->setDiscoverableTimeout(I)Z
Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->setMessageAccessPermission(Landroid/bluetooth/BluetoothDevice;I)Z
Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->setName(Ljava/lang/String;)Z
Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->setPairingConfirmation(Landroid/bluetooth/BluetoothDevice;Z)Z
Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->setPasskey(Landroid/bluetooth/BluetoothDevice;ZI[B)Z
Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->setPhonebookAccessPermission(Landroid/bluetooth/BluetoothDevice;I)Z
Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->setPin(Landroid/bluetooth/BluetoothDevice;ZI[B)Z
Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->setRemoteAlias(Landroid/bluetooth/BluetoothDevice;Ljava/lang/String;)Z
Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->setScanMode(II)Z
Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->setSimAccessPermission(Landroid/bluetooth/BluetoothDevice;I)Z
Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->startDiscovery()Z
Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->addCharacteristic(ILandroid/os/ParcelUuid;II)V
Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->addDescriptor(ILandroid/os/ParcelUuid;I)V
Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->addIncludedService(IIILandroid/os/ParcelUuid;)V
Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->beginReliableWrite(ILjava/lang/String;)V
Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->beginServiceDeclaration(IIIILandroid/os/ParcelUuid;Z)V
Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->clearServices(I)V
Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->clientConnect(ILjava/lang/String;ZI)V
Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->clientDisconnect(ILjava/lang/String;)V
Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->configureMTU(ILjava/lang/String;I)V
Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->connectionParameterUpdate(ILjava/lang/String;I)V
Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->disconnectAll()V
Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->discoverServices(ILjava/lang/String;)V
Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->endReliableWrite(ILjava/lang/String;Z)V
Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->endServiceDeclaration(I)V
Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->getDevicesMatchingConnectionStates([I)Ljava/util/List;
Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->numHwTrackFiltersAvailable()I
Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->readCharacteristic(ILjava/lang/String;II)V
Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->readDescriptor(ILjava/lang/String;II)V
Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->readRemoteRssi(ILjava/lang/String;)V
Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->refreshDevice(ILjava/lang/String;)V
Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->registerClient(Landroid/os/ParcelUuid;Landroid/bluetooth/IBluetoothGattCallback;)V
Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->registerForNotification(ILjava/lang/String;IZ)V
Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->registerServer(Landroid/os/ParcelUuid;Landroid/bluetooth/IBluetoothGattServerCallback;)V
Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->removeService(IIILandroid/os/ParcelUuid;)V
Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->sendNotification(ILjava/lang/String;IILandroid/os/ParcelUuid;ILandroid/os/ParcelUuid;Z[B)V
Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->sendResponse(ILjava/lang/String;III[B)V
Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->serverConnect(ILjava/lang/String;ZI)V
Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->serverDisconnect(ILjava/lang/String;)V
Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->startMultiAdvertising(ILandroid/bluetooth/le/AdvertiseData;Landroid/bluetooth/le/AdvertiseData;Landroid/bluetooth/le/AdvertiseSettings;)V
Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->startScan(IZLandroid/bluetooth/le/ScanSettings;Ljava/util/List;Landroid/os/WorkSource;Ljava/util/List;Ljava/lang/String;)V
Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->stopMultiAdvertising(I)V
Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->stopScan(IZ)V
Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->unregAll()V
Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->unregisterClient(I)V
Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->unregisterServer(I)V
Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->writeCharacteristic(ILjava/lang/String;III[B)V
Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->writeDescriptor(ILjava/lang/String;III[B)V
Lcom/android/bluetooth/hdp/HealthService$BluetoothHealthBinder;->connectChannelToSink(Landroid/bluetooth/BluetoothDevice;Landroid/bluetooth/BluetoothHealthAppConfiguration;I)Z
Lcom/android/bluetooth/hdp/HealthService$BluetoothHealthBinder;->connectChannelToSource(Landroid/bluetooth/BluetoothDevice;Landroid/bluetooth/BluetoothHealthAppConfiguration;)Z
Lcom/android/bluetooth/hdp/HealthService$BluetoothHealthBinder;->disconnectChannel(Landroid/bluetooth/BluetoothDevice;Landroid/bluetooth/BluetoothHealthAppConfiguration;I)Z
Lcom/android/bluetooth/hdp/HealthService$BluetoothHealthBinder;->getConnectedHealthDevices()Ljava/util/List;
Lcom/android/bluetooth/hdp/HealthService$BluetoothHealthBinder;->getHealthDeviceConnectionState(Landroid/bluetooth/BluetoothDevice;)I
Lcom/android/bluetooth/hdp/HealthService$BluetoothHealthBinder;->getHealthDevicesMatchingConnectionStates([I)Ljava/util/List;
Lcom/android/bluetooth/hdp/HealthService$BluetoothHealthBinder;->getMainChannelFd(Landroid/bluetooth/BluetoothDevice;Landroid/bluetooth/BluetoothHealthAppConfiguration;)Landroid/os/ParcelFileDescriptor;
Lcom/android/bluetooth/hdp/HealthService$BluetoothHealthBinder;->registerAppConfiguration(Landroid/bluetooth/BluetoothHealthAppConfiguration;Landroid/bluetooth/IBluetoothHealthCallback;)Z
Lcom/android/bluetooth/hdp/HealthService$BluetoothHealthBinder;->unregisterAppConfiguration(Landroid/bluetooth/BluetoothHealthAppConfiguration;)Z
Lcom/android/bluetooth/hfp/HeadsetService$BluetoothHeadsetBinder;->bindResponse(IZ)V
Lcom/android/bluetooth/hfp/HeadsetService$BluetoothHeadsetBinder;->clccResponse(IIIIZLjava/lang/String;I)V
Lcom/android/bluetooth/hfp/HeadsetService$BluetoothHeadsetBinder;->connect(Landroid/bluetooth/BluetoothDevice;)Z
Lcom/android/bluetooth/hfp/HeadsetService$BluetoothHeadsetBinder;->connectAudio()Z
Lcom/android/bluetooth/hfp/HeadsetService$BluetoothHeadsetBinder;->disableWBS()Z
Lcom/android/bluetooth/hfp/HeadsetService$BluetoothHeadsetBinder;->disconnect(Landroid/bluetooth/BluetoothDevice;)Z
Lcom/android/bluetooth/hfp/HeadsetService$BluetoothHeadsetBinder;->disconnectAudio()Z
Lcom/android/bluetooth/hfp/HeadsetService$BluetoothHeadsetBinder;->enableWBS()Z
Lcom/android/bluetooth/hfp/HeadsetService$BluetoothHeadsetBinder;->getConnectedDevices()Ljava/util/List;
Lcom/android/bluetooth/hfp/HeadsetService$BluetoothHeadsetBinder;->getConnectionState(Landroid/bluetooth/BluetoothDevice;)I
Lcom/android/bluetooth/hfp/HeadsetService$BluetoothHeadsetBinder;->getDevicesMatchingConnectionStates([I)Ljava/util/List;
Lcom/android/bluetooth/hfp/HeadsetService$BluetoothHeadsetBinder;->getPriority(Landroid/bluetooth/BluetoothDevice;)I
Lcom/android/bluetooth/hfp/HeadsetService$BluetoothHeadsetBinder;->isAudioConnected(Landroid/bluetooth/BluetoothDevice;)Z
Lcom/android/bluetooth/hfp/HeadsetService$BluetoothHeadsetBinder;->isAudioOn()Z
Lcom/android/bluetooth/hfp/HeadsetService$BluetoothHeadsetBinder;->phoneStateChanged(IIILjava/lang/String;I)V
Lcom/android/bluetooth/hfp/HeadsetService$BluetoothHeadsetBinder;->sendVendorSpecificResultCode(Landroid/bluetooth/BluetoothDevice;Ljava/lang/String;Ljava/lang/String;)Z
Lcom/android/bluetooth/hfp/HeadsetService$BluetoothHeadsetBinder;->setPriority(Landroid/bluetooth/BluetoothDevice;I)Z
Lcom/android/bluetooth/hfp/HeadsetService$BluetoothHeadsetBinder;->startVoiceRecognition(Landroid/bluetooth/BluetoothDevice;)Z
Lcom/android/bluetooth/hfp/HeadsetService$BluetoothHeadsetBinder;->stopVoiceRecognition(Landroid/bluetooth/BluetoothDevice;)Z
Lcom/android/bluetooth/hfpclient/HeadsetClientService$BluetoothHeadsetClientBinder;->acceptCall(Landroid/bluetooth/BluetoothDevice;I)Z
Lcom/android/bluetooth/hfpclient/HeadsetClientService$BluetoothHeadsetClientBinder;->connect(Landroid/bluetooth/BluetoothDevice;)Z
Lcom/android/bluetooth/hfpclient/HeadsetClientService$BluetoothHeadsetClientBinder;->connectAudio()Z
Lcom/android/bluetooth/hfpclient/HeadsetClientService$BluetoothHeadsetClientBinder;->dial(Landroid/bluetooth/BluetoothDevice;Ljava/lang/String;)Z
Lcom/android/bluetooth/hfpclient/HeadsetClientService$BluetoothHeadsetClientBinder;->dialMemory(Landroid/bluetooth/BluetoothDevice;I)Z
Lcom/android/bluetooth/hfpclient/HeadsetClientService$BluetoothHeadsetClientBinder;->disconnect(Landroid/bluetooth/BluetoothDevice;)Z
Lcom/android/bluetooth/hfpclient/HeadsetClientService$BluetoothHeadsetClientBinder;->disconnectAudio()Z
Lcom/android/bluetooth/hfpclient/HeadsetClientService$BluetoothHeadsetClientBinder;->enterPrivateMode(Landroid/bluetooth/BluetoothDevice;I)Z
Lcom/android/bluetooth/hfpclient/HeadsetClientService$BluetoothHeadsetClientBinder;->explicitCallTransfer(Landroid/bluetooth/BluetoothDevice;)Z
Lcom/android/bluetooth/hfpclient/HeadsetClientService$BluetoothHeadsetClientBinder;->getConnectedDevices()Ljava/util/List;
Lcom/android/bluetooth/hfpclient/HeadsetClientService$BluetoothHeadsetClientBinder;->getConnectionState(Landroid/bluetooth/BluetoothDevice;)I
Lcom/android/bluetooth/hfpclient/HeadsetClientService$BluetoothHeadsetClientBinder;->getCurrentAgEvents(Landroid/bluetooth/BluetoothDevice;)Landroid/os/Bundle;
Lcom/android/bluetooth/hfpclient/HeadsetClientService$BluetoothHeadsetClientBinder;->getCurrentAgFeatures(Landroid/bluetooth/BluetoothDevice;)Landroid/os/Bundle;
Lcom/android/bluetooth/hfpclient/HeadsetClientService$BluetoothHeadsetClientBinder;->getCurrentCalls(Landroid/bluetooth/BluetoothDevice;)Ljava/util/List;
Lcom/android/bluetooth/hfpclient/HeadsetClientService$BluetoothHeadsetClientBinder;->getDevicesMatchingConnectionStates([I)Ljava/util/List;
Lcom/android/bluetooth/hfpclient/HeadsetClientService$BluetoothHeadsetClientBinder;->getLastVoiceTagNumber(Landroid/bluetooth/BluetoothDevice;)Z
Lcom/android/bluetooth/hfpclient/HeadsetClientService$BluetoothHeadsetClientBinder;->getPriority(Landroid/bluetooth/BluetoothDevice;)I
Lcom/android/bluetooth/hfpclient/HeadsetClientService$BluetoothHeadsetClientBinder;->holdCall(Landroid/bluetooth/BluetoothDevice;)Z
Lcom/android/bluetooth/hfpclient/HeadsetClientService$BluetoothHeadsetClientBinder;->redial(Landroid/bluetooth/BluetoothDevice;)Z
Lcom/android/bluetooth/hfpclient/HeadsetClientService$BluetoothHeadsetClientBinder;->rejectCall(Landroid/bluetooth/BluetoothDevice;)Z
Lcom/android/bluetooth/hfpclient/HeadsetClientService$BluetoothHeadsetClientBinder;->sendDTMF(Landroid/bluetooth/BluetoothDevice;B)Z
Lcom/android/bluetooth/hfpclient/HeadsetClientService$BluetoothHeadsetClientBinder;->setPriority(Landroid/bluetooth/BluetoothDevice;I)Z
Lcom/android/bluetooth/hfpclient/HeadsetClientService$BluetoothHeadsetClientBinder;->startVoiceRecognition(Landroid/bluetooth/BluetoothDevice;)Z
Lcom/android/bluetooth/hfpclient/HeadsetClientService$BluetoothHeadsetClientBinder;->stopVoiceRecognition(Landroid/bluetooth/BluetoothDevice;)Z
Lcom/android/bluetooth/hfpclient/HeadsetClientService$BluetoothHeadsetClientBinder;->terminateCall(Landroid/bluetooth/BluetoothDevice;I)Z
Lcom/android/bluetooth/hid/HidService$BluetoothInputDeviceBinder;->connect(Landroid/bluetooth/BluetoothDevice;)Z
Lcom/android/bluetooth/hid/HidService$BluetoothInputDeviceBinder;->disconnect(Landroid/bluetooth/BluetoothDevice;)Z
Lcom/android/bluetooth/hid/HidService$BluetoothInputDeviceBinder;->getConnectedDevices()Ljava/util/List;
Lcom/android/bluetooth/hid/HidService$BluetoothInputDeviceBinder;->getDevicesMatchingConnectionStates([I)Ljava/util/List;
Lcom/android/bluetooth/hid/HidService$BluetoothInputDeviceBinder;->getPriority(Landroid/bluetooth/BluetoothDevice;)I
Lcom/android/bluetooth/hid/HidService$BluetoothInputDeviceBinder;->getProtocolMode(Landroid/bluetooth/BluetoothDevice;)Z
Lcom/android/bluetooth/hid/HidService$BluetoothInputDeviceBinder;->getReport(Landroid/bluetooth/BluetoothDevice;BBI)Z
Lcom/android/bluetooth/hid/HidService$BluetoothInputDeviceBinder;->sendData(Landroid/bluetooth/BluetoothDevice;Ljava/lang/String;)Z
Lcom/android/bluetooth/hid/HidService$BluetoothInputDeviceBinder;->setPriority(Landroid/bluetooth/BluetoothDevice;I)Z
Lcom/android/bluetooth/hid/HidService$BluetoothInputDeviceBinder;->setProtocolMode(Landroid/bluetooth/BluetoothDevice;I)Z
Lcom/android/bluetooth/hid/HidService$BluetoothInputDeviceBinder;->setReport(Landroid/bluetooth/BluetoothDevice;BLjava/lang/String;)Z
Lcom/android/bluetooth/hid/HidService$BluetoothInputDeviceBinder;->virtualUnplug(Landroid/bluetooth/BluetoothDevice;)Z
Lcom/android/bluetooth/map/BluetoothMapService$BluetoothMapBinder;->connect(Landroid/bluetooth/BluetoothDevice;)Z
Lcom/android/bluetooth/map/BluetoothMapService$BluetoothMapBinder;->disconnect(Landroid/bluetooth/BluetoothDevice;)Z
Lcom/android/bluetooth/map/BluetoothMapService$BluetoothMapBinder;->getClient()Landroid/bluetooth/BluetoothDevice;
Lcom/android/bluetooth/map/BluetoothMapService$BluetoothMapBinder;->getConnectedDevices()Ljava/util/List;
Lcom/android/bluetooth/map/BluetoothMapService$BluetoothMapBinder;->getConnectionState(Landroid/bluetooth/BluetoothDevice;)I
Lcom/android/bluetooth/map/BluetoothMapService$BluetoothMapBinder;->getDevicesMatchingConnectionStates([I)Ljava/util/List;
Lcom/android/bluetooth/map/BluetoothMapService$BluetoothMapBinder;->getPriority(Landroid/bluetooth/BluetoothDevice;)I
Lcom/android/bluetooth/map/BluetoothMapService$BluetoothMapBinder;->getState()I
Lcom/android/bluetooth/map/BluetoothMapService$BluetoothMapBinder;->isConnected(Landroid/bluetooth/BluetoothDevice;)Z
Lcom/android/bluetooth/map/BluetoothMapService$BluetoothMapBinder;->setPriority(Landroid/bluetooth/BluetoothDevice;I)Z
Lcom/android/bluetooth/pan/PanService$BluetoothPanBinder;->connect(Landroid/bluetooth/BluetoothDevice;)Z
Lcom/android/bluetooth/pan/PanService$BluetoothPanBinder;->disconnect(Landroid/bluetooth/BluetoothDevice;)Z
Lcom/android/bluetooth/pan/PanService$BluetoothPanBinder;->getConnectedDevices()Ljava/util/List;
Lcom/android/bluetooth/pan/PanService$BluetoothPanBinder;->getDevicesMatchingConnectionStates([I)Ljava/util/List;
Lcom/android/bluetooth/pan/PanService$BluetoothPanBinder;->setBluetoothTethering(Z)V
Lcom/android/bluetooth/pbapclient/PbapClientService$BluetoothPbapClientBinder;->connect(Landroid/bluetooth/BluetoothDevice;)Z
Lcom/android/bluetooth/pbapclient/PbapClientService$BluetoothPbapClientBinder;->disconnect(Landroid/bluetooth/BluetoothDevice;)Z
Lcom/android/bluetooth/pbapclient/PbapClientService$BluetoothPbapClientBinder;->getConnectedDevices()Ljava/util/List;
Lcom/android/bluetooth/pbapclient/PbapClientService$BluetoothPbapClientBinder;->getConnectionState(Landroid/bluetooth/BluetoothDevice;)I
Lcom/android/bluetooth/pbapclient/PbapClientService$BluetoothPbapClientBinder;->getDevicesMatchingConnectionStates([I)Ljava/util/List;
Lcom/android/bluetooth/pbapclient/PbapClientService$BluetoothPbapClientBinder;->getPriority(Landroid/bluetooth/BluetoothDevice;)I
Lcom/android/bluetooth/pbapclient/PbapClientService$BluetoothPbapClientBinder;->setPriority(Landroid/bluetooth/BluetoothDevice;I)Z
Lcom/android/bluetooth/sap/SapService$SapBinder;->connect(Landroid/bluetooth/BluetoothDevice;)Z
Lcom/android/bluetooth/sap/SapService$SapBinder;->disconnect(Landroid/bluetooth/BluetoothDevice;)Z
Lcom/android/bluetooth/sap/SapService$SapBinder;->getClient()Landroid/bluetooth/BluetoothDevice;
Lcom/android/bluetooth/sap/SapService$SapBinder;->getConnectedDevices()Ljava/util/List;
Lcom/android/bluetooth/sap/SapService$SapBinder;->getConnectionState(Landroid/bluetooth/BluetoothDevice;)I
Lcom/android/bluetooth/sap/SapService$SapBinder;->getDevicesMatchingConnectionStates([I)Ljava/util/List;
Lcom/android/bluetooth/sap/SapService$SapBinder;->getPriority(Landroid/bluetooth/BluetoothDevice;)I
Lcom/android/bluetooth/sap/SapService$SapBinder;->getState()I
Lcom/android/bluetooth/sap/SapService$SapBinder;->isConnected(Landroid/bluetooth/BluetoothDevice;)Z
Lcom/android/bluetooth/sap/SapService$SapBinder;->setPriority(Landroid/bluetooth/BluetoothDevice;I)Z
Lcom/android/car/CarRadioService;->setPreset(Landroid/car/hardware/radio/CarRadioPreset;)Z
Lcom/android/car/ICarImpl;->getCarService(Ljava/lang/String;)Landroid/os/IBinder;
Lcom/android/car/pm/CarPackageManagerService;->setAppBlockingPolicy(Ljava/lang/String;Landroid/car/content/pm/CarAppBlockingPolicy;I)V
Lcom/android/Iernal/telephony/PhoneSubInfoController;->getCompleteVoiceMailNumber()Ljava/lang/String;
Lcom/android/Iernal/telephony/PhoneSubInfoController;->getCompleteVoiceMailNumberForSubscriber(I)Ljava/lang/String;
Lcom/android/Iernal/telephony/PhoneSubInfoController;->getDeviceId(Ljava/lang/String;)Ljava/lang/String;
Lcom/android/Iernal/telephony/PhoneSubInfoController;->getDeviceIdForPhone(ILjava/lang/String;)Ljava/lang/String;
Lcom/android/Iernal/telephony/PhoneSubInfoController;->getDeviceSvn(Ljava/lang/String;)Ljava/lang/String;
Lcom/android/Iernal/telephony/PhoneSubInfoController;->getDeviceSvnUsingSubId(ILjava/lang/String;)Ljava/lang/String;
Lcom/android/Iernal/telephony/PhoneSubInfoController;->getGroupIdLevel1(Ljava/lang/String;)Ljava/lang/String;
Lcom/android/Iernal/telephony/PhoneSubInfoController;->getGroupIdLevel1ForSubscriber(ILjava/lang/String;)Ljava/lang/String;
Lcom/android/Iernal/telephony/PhoneSubInfoController;->getIccSerialNumber(Ljava/lang/String;)Ljava/lang/String;
Lcom/android/Iernal/telephony/PhoneSubInfoController;->getIccSerialNumberForSubscriber(ILjava/lang/String;)Ljava/lang/String;
Lcom/android/Iernal/telephony/PhoneSubInfoController;->getIccSimChallengeResponse(IIILjava/lang/String;)Ljava/lang/String;
Lcom/android/Iernal/telephony/PhoneSubInfoController;->getImeiForSubscriber(ILjava/lang/String;)Ljava/lang/String;
Lcom/android/Iernal/telephony/PhoneSubInfoController;->getIsimChallengeResponse(Ljava/lang/String;)Ljava/lang/String;
Lcom/android/Iernal/telephony/PhoneSubInfoController;->getIsimDomain()Ljava/lang/String;
Lcom/android/Iernal/telephony/PhoneSubInfoController;->getIsimImpi()Ljava/lang/String;
Lcom/android/Iernal/telephony/PhoneSubInfoController;->getIsimImpu()[Ljava/lang/String;
Lcom/android/Iernal/telephony/PhoneSubInfoController;->getIsimIst()Ljava/lang/String;
Lcom/android/Iernal/telephony/PhoneSubInfoController;->getIsimPcscf()[Ljava/lang/String;
Lcom/android/Iernal/telephony/PhoneSubInfoController;->getLine1AlphaTag(Ljava/lang/String;)Ljava/lang/String;
Lcom/android/Iernal/telephony/PhoneSubInfoController;->getLine1AlphaTagForSubscriber(ILjava/lang/String;)Ljava/lang/String;
Lcom/android/Iernal/telephony/PhoneSubInfoController;->getLine1Number(Ljava/lang/String;)Ljava/lang/String;
Lcom/android/Iernal/telephony/PhoneSubInfoController;->getLine1NumberForSubscriber(ILjava/lang/String;)Ljava/lang/String;
Lcom/android/Iernal/telephony/PhoneSubInfoController;->getMsisdn(Ljava/lang/String;)Ljava/lang/String;
Lcom/android/Iernal/telephony/PhoneSubInfoController;->getMsisdnForSubscriber(ILjava/lang/String;)Ljava/lang/String;
Lcom/android/Iernal/telephony/PhoneSubInfoController;->getNaiForSubscriber(ILjava/lang/String;)Ljava/lang/String;
Lcom/android/Iernal/telephony/PhoneSubInfoController;->getSubscriberId(Ljava/lang/String;)Ljava/lang/String;
Lcom/android/Iernal/telephony/PhoneSubInfoController;->getSubscriberIdForSubscriber(ILjava/lang/String;)Ljava/lang/String;
Lcom/android/Iernal/telephony/PhoneSubInfoController;->getVoiceMailAlphaTag(Ljava/lang/String;)Ljava/lang/String;
Lcom/android/Iernal/telephony/PhoneSubInfoController;->getVoiceMailAlphaTagForSubscriber(ILjava/lang/String;)Ljava/lang/String;
Lcom/android/Iernal/telephony/PhoneSubInfoController;->getVoiceMailNumber(Ljava/lang/String;)Ljava/lang/String;
Lcom/android/Iernal/telephony/PhoneSubInfoController;->getVoiceMailNumberForSubscriber(ILjava/lang/String;)Ljava/lang/String;
Lcom/android/Iernal/telephony/SubscriptionController;->addSubInfoRecord(Ljava/lang/String;I)I
Lcom/android/Iernal/telephony/SubscriptionController;->clearDefaultsForInactiveSubIds()V
Lcom/android/Iernal/telephony/SubscriptionController;->clearSubInfo()I
Lcom/android/Iernal/telephony/SubscriptionController;->getActiveSubInfoCount(Ljava/lang/String;)I
Lcom/android/Iernal/telephony/SubscriptionController;->getActiveSubscriptionInfo(ILjava/lang/String;)Landroid/telephony/SubscriptionInfo;
Lcom/android/Iernal/telephony/SubscriptionController;->getActiveSubscriptionInfoForIccId(Ljava/lang/String;Ljava/lang/String;)Landroid/telephony/SubscriptionInfo;
Lcom/android/Iernal/telephony/SubscriptionController;->getActiveSubscriptionInfoForSimSlotIndex(ILjava/lang/String;)Landroid/telephony/SubscriptionInfo;
Lcom/android/Iernal/telephony/SubscriptionController;->getActiveSubscriptionInfoList(Ljava/lang/String;)Ljava/util/List;
Lcom/android/Iernal/telephony/SubscriptionController;->getAllSubInfoCount(Ljava/lang/String;)I
Lcom/android/Iernal/telephony/SubscriptionController;->getAllSubInfoList(Ljava/lang/String;)Ljava/util/List;
Lcom/android/Iernal/telephony/SubscriptionController;->getSubscriptionProperty(ILjava/lang/String;Ljava/lang/String;)Ljava/lang/String;
Lcom/android/Iernal/telephony/SubscriptionController;->setDataRoaming(II)I
Lcom/android/Iernal/telephony/SubscriptionController;->setDefaultDataSubId(I)V
Lcom/android/Iernal/telephony/SubscriptionController;->setDefaultSmsSubId(I)V
Lcom/android/Iernal/telephony/SubscriptionController;->setDefaultVoiceSubId(I)V
Lcom/android/Iernal/telephony/SubscriptionController;->setDisplayName(Ljava/lang/String;I)I
Lcom/android/Iernal/telephony/SubscriptionController;->setDisplayNameUsingSrc(Ljava/lang/String;IJ)I
Lcom/android/Iernal/telephony/SubscriptionController;->setDisplayNumber(Ljava/lang/String;I)I
Lcom/android/Iernal/telephony/SubscriptionController;->setIconTI(II)I
Lcom/android/Iernal/telephony/SubscriptionController;->setSubscriptionProperty(ILjava/lang/String;Ljava/lang/String;)V
Lcom/android/Iernal/telephony/UiccPhoneBookController;->getAdnRecordsInEf(I)Ljava/util/List;
Lcom/android/Iernal/telephony/UiccPhoneBookController;->getAdnRecordsInEfForSubscriber(II)Ljava/util/List;
Lcom/android/Iernal/telephony/UiccPhoneBookController;->updateAdnRecordsInEfByIndex(ILjava/lang/String;Ljava/lang/String;ILjava/lang/String;)Z
Lcom/android/Iernal/telephony/UiccPhoneBookController;->updateAdnRecordsInEfByIndexForSubscriber(IILjava/lang/String;Ljava/lang/String;ILjava/lang/String;)Z
Lcom/android/Iernal/telephony/UiccPhoneBookController;->updateAdnRecordsInEfBySearch(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z
Lcom/android/Iernal/telephony/UiccPhoneBookController;->updateAdnRecordsInEfBySearchForSubscriber(IILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z
Lcom/android/Iernal/telephony/UiccSmsController;->copyMessageToIccEfForSubscriber(ILjava/lang/String;I[B[B)Z
Lcom/android/Iernal/telephony/UiccSmsController;->disableCellBroadcastForSubscriber(III)Z
Lcom/android/Iernal/telephony/UiccSmsController;->disableCellBroadcastRangeForSubscriber(IIII)Z
Lcom/android/Iernal/telephony/UiccSmsController;->enableCellBroadcastForSubscriber(III)Z
Lcom/android/Iernal/telephony/UiccSmsController;->enableCellBroadcastRangeForSubscriber(IIII)Z
Lcom/android/Iernal/telephony/UiccSmsController;->getAllMessagesFromIccEfForSubscriber(ILjava/lang/String;)Ljava/util/List;
Lcom/android/Iernal/telephony/UiccSmsController;->sendDataForSubscriber(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;I[BLandroid/app/PendingIntent;Landroid/app/PendingIntent;)V
Lcom/android/Iernal/telephony/UiccSmsController;->sendDataForSubscriberWithSelfPermissions(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;I[BLandroid/app/PendingIntent;Landroid/app/PendingIntent;)V
Lcom/android/Iernal/telephony/UiccSmsController;->sendMultipartTextForSubscriber(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/util/List;Ljava/util/List;Z)V
Lcom/android/Iernal/telephony/UiccSmsController;->sendStoredMultipartText(ILjava/lang/String;Landroid/net/Uri;Ljava/lang/String;Ljava/util/List;Ljava/util/List;)V
Lcom/android/Iernal/telephony/UiccSmsController;->sendStoredText(ILjava/lang/String;Landroid/net/Uri;Ljava/lang/String;Landroid/app/PendingIntent;Landroid/app/PendingIntent;)V
Lcom/android/Iernal/telephony/UiccSmsController;->sendTextForSubscriber(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/app/PendingIntent;Landroid/app/PendingIntent;Z)V
Lcom/android/Iernal/telephony/UiccSmsController;->sendTextForSubscriberWithSelfPermissions(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/app/PendingIntent;Landroid/app/PendingIntent;Z)V
Lcom/android/Iernal/telephony/UiccSmsController;->updateMessageOnIccEfForSubscriber(ILjava/lang/String;II[B)Z
Lcom/android/phone/CarrierConfigLoader;->getConfigForSubId(I)Landroid/os/PersistableBundle;
Lcom/android/phone/CarrierConfigLoader;->notifyConfigChangedForSubId(I)V
Lcom/android/phone/CarrierConfigLoader;->updateConfigForPhoneId(ILjava/lang/String;)V
Lcom/android/phone/PhoneInterfaceManager;->answerRingingCall()V
Lcom/android/phone/PhoneInterfaceManager;->answerRingingCallForSubscriber(I)V
Lcom/android/phone/PhoneInterfaceManager;->call(Ljava/lang/String;Ljava/lang/String;)V
Lcom/android/phone/PhoneInterfaceManager;->carrierActionSetMeteredApnsEnabled(IZ)V
Lcom/android/phone/PhoneInterfaceManager;->carrierActionSetRadioEnabled(IZ)V
Lcom/android/phone/PhoneInterfaceManager;->disableDataConnectivity()Z
Lcom/android/phone/PhoneInterfaceManager;->disableLocationUpdates()V
Lcom/android/phone/PhoneInterfaceManager;->disableLocationUpdatesForSubscriber(I)V
Lcom/android/phone/PhoneInterfaceManager;->enableDataConnectivity()Z
Lcom/android/phone/PhoneInterfaceManager;->enableLocationUpdates()V
Lcom/android/phone/PhoneInterfaceManager;->enableLocationUpdatesForSubscriber(I)V
Lcom/android/phone/PhoneInterfaceManager;->enableVideoCalling(Z)V
Lcom/android/phone/PhoneInterfaceManager;->endCall()Z
Lcom/android/phone/PhoneInterfaceManager;->endCallForSubscriber(I)Z
Lcom/android/phone/PhoneInterfaceManager;->factoryReset(I)V
Lcom/android/phone/PhoneInterfaceManager;->getAidForAppType(II)Ljava/lang/String;
Lcom/android/phone/PhoneInterfaceManager;->getAllCellInfo(Ljava/lang/String;)Ljava/util/List;
Lcom/android/phone/PhoneInterfaceManager;->getAllowedCarriers(I)Ljava/util/List;
Lcom/android/phone/PhoneInterfaceManager;->getCalculatedPreferredNetworkType(Ljava/lang/String;)I
Lcom/android/phone/PhoneInterfaceManager;->getCdmaEriIconIndex(Ljava/lang/String;)I
Lcom/android/phone/PhoneInterfaceManager;->getCdmaEriIconIndexForSubscriber(ILjava/lang/String;)I
Lcom/android/phone/PhoneInterfaceManager;->getCdmaEriIconMode(Ljava/lang/String;)I
Lcom/android/phone/PhoneInterfaceManager;->getCdmaEriIconModeForSubscriber(ILjava/lang/String;)I
Lcom/android/phone/PhoneInterfaceManager;->getCdmaEriText(Ljava/lang/String;)Ljava/lang/String;
Lcom/android/phone/PhoneInterfaceManager;->getCdmaEriTextForSubscriber(ILjava/lang/String;)Ljava/lang/String;
Lcom/android/phone/PhoneInterfaceManager;->getCdmaMdn(I)Ljava/lang/String;
Lcom/android/phone/PhoneInterfaceManager;->getCdmaMin(I)Ljava/lang/String;
Lcom/android/phone/PhoneInterfaceManager;->getCdmaPrlVersion(I)Ljava/lang/String;
Lcom/android/phone/PhoneInterfaceManager;->getCellLocation(Ljava/lang/String;)Landroid/os/Bundle;
Lcom/android/phone/PhoneInterfaceManager;->getCellNetworkScanResults(I)Lcom/android/Iernal/telephony/CellNetworkScanResult;
Lcom/android/phone/PhoneInterfaceManager;->getDataEnabled(I)Z
Lcom/android/phone/PhoneInterfaceManager;->getDataNetworkType(Ljava/lang/String;)I
Lcom/android/phone/PhoneInterfaceManager;->getDataNetworkTypeForSubscriber(ILjava/lang/String;)I
Lcom/android/phone/PhoneInterfaceManager;->getDeviceId(Ljava/lang/String;)Ljava/lang/String;
Lcom/android/phone/PhoneInterfaceManager;->getDeviceSoftwareVersionForSlot(ILjava/lang/String;)Ljava/lang/String;
Lcom/android/phone/PhoneInterfaceManager;->getEsn(I)Ljava/lang/String;
Lcom/android/phone/PhoneInterfaceManager;->getImeiForSlot(ILjava/lang/String;)Ljava/lang/String;
Lcom/android/phone/PhoneInterfaceManager;->getLine1AlphaTagForDisplay(ILjava/lang/String;)Ljava/lang/String;
Lcom/android/phone/PhoneInterfaceManager;->getLine1NumberForDisplay(ILjava/lang/String;)Ljava/lang/String;
Lcom/android/phone/PhoneInterfaceManager;->getLteOnCdmaMode(Ljava/lang/String;)I
Lcom/android/phone/PhoneInterfaceManager;->getLteOnCdmaModeForSubscriber(ILjava/lang/String;)I
Lcom/android/phone/PhoneInterfaceManager;->getMergedSubscriberIds(Ljava/lang/String;)[Ljava/lang/String;
Lcom/android/phone/PhoneInterfaceManager;->getNeighboringCellInfo(Ljava/lang/String;)Ljava/util/List;
Lcom/android/phone/PhoneInterfaceManager;->getNetworkTypeForSubscriber(ILjava/lang/String;)I
Lcom/android/phone/PhoneInterfaceManager;->getPcscfAddress(Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;
Lcom/android/phone/PhoneInterfaceManager;->getPreferredNetworkType(I)I
Lcom/android/phone/PhoneInterfaceManager;->getRadioAccessFamily(ILjava/lang/String;)I
Lcom/android/phone/PhoneInterfaceManager;->getServiceStateForSubscriber(ILjava/lang/String;)Landroid/telephony/ServiceState;
Lcom/android/phone/PhoneInterfaceManager;->getSystemVisualVoicemailSmsFilterSettings(Ljava/lang/String;I)Landroid/telephony/VisualVoicemailSmsFilterSettings;
Lcom/android/phone/PhoneInterfaceManager;->getTelephonyHistograms()Ljava/util/List;
Lcom/android/phone/PhoneInterfaceManager;->getTetherApnRequired()I
Lcom/android/phone/PhoneInterfaceManager;->getVoiceNetworkTypeForSubscriber(ILjava/lang/String;)I
Lcom/android/phone/PhoneInterfaceManager;->getVtDataUsage()J
Lcom/android/phone/PhoneInterfaceManager;->handlePinMmi(Ljava/lang/String;)Z
Lcom/android/phone/PhoneInterfaceManager;->handlePinMmiForSubscriber(ILjava/lang/String;)Z
Lcom/android/phone/PhoneInterfaceManager;->iccCloseLogicalChannel(II)Z
Lcom/android/phone/PhoneInterfaceManager;->iccExchangeSimIO(IIIIIILjava/lang/String;)[B
Lcom/android/phone/PhoneInterfaceManager;->iccOpenLogicalChannel(ILjava/lang/String;)Landroid/telephony/IccOpenLogicalChannelResponse;
Lcom/android/phone/PhoneInterfaceManager;->iccTransmitApduBasicChannel(IIIIIILjava/lang/String;)Ljava/lang/String;
Lcom/android/phone/PhoneInterfaceManager;->iccTransmitApduLogicalChannel(IIIIIIILjava/lang/String;)Ljava/lang/String;
Lcom/android/phone/PhoneInterfaceManager;->invokeOemRilRequestRaw([B[B)I
Lcom/android/phone/PhoneInterfaceManager;->isIdle(Ljava/lang/String;)Z
Lcom/android/phone/PhoneInterfaceManager;->isIdleForSubscriber(ILjava/lang/String;)Z
Lcom/android/phone/PhoneInterfaceManager;->isOffhook(Ljava/lang/String;)Z
Lcom/android/phone/PhoneInterfaceManager;->isOffhookForSubscriber(ILjava/lang/String;)Z
Lcom/android/phone/PhoneInterfaceManager;->isRadioOn(Ljava/lang/String;)Z
Lcom/android/phone/PhoneInterfaceManager;->isRadioOnForSubscriber(ILjava/lang/String;)Z
Lcom/android/phone/PhoneInterfaceManager;->isRinging(Ljava/lang/String;)Z
Lcom/android/phone/PhoneInterfaceManager;->isRingingForSubscriber(ILjava/lang/String;)Z
Lcom/android/phone/PhoneInterfaceManager;->isVideoCallingEnabled(Ljava/lang/String;)Z
Lcom/android/phone/PhoneInterfaceManager;->isVisualVoicemailEnabled(Ljava/lang/String;Landroid/telecom/PhoneAccountHandle;)Z
Lcom/android/phone/PhoneInterfaceManager;->nvReadItem(I)Ljava/lang/String;
Lcom/android/phone/PhoneInterfaceManager;->nvResetConfig(I)Z
Lcom/android/phone/PhoneInterfaceManager;->nvWriteCdmaPrl([B)Z
Lcom/android/phone/PhoneInterfaceManager;->nvWriteItem(ILjava/lang/String;)Z
Lcom/android/phone/PhoneInterfaceManager;->requestModemActivityInfo(Landroid/os/ResultReceiver;)V
Lcom/android/phone/PhoneInterfaceManager;->sendEnvelopeWithStatus(ILjava/lang/String;)Ljava/lang/String;
Lcom/android/phone/PhoneInterfaceManager;->setAllowedCarriers(ILjava/util/List;)I
Lcom/android/phone/PhoneInterfaceManager;->setDataEnabled(IZ)V
Lcom/android/phone/PhoneInterfaceManager;->setImsRegistrationState(Z)V
Lcom/android/phone/PhoneInterfaceManager;->setNetworkSelectionModeAutomatic(I)V
Lcom/android/phone/PhoneInterfaceManager;->setNetworkSelectionModeManual(ILcom/android/Iernal/telephony/OperatorInfo;Z)Z
Lcom/android/phone/PhoneInterfaceManager;->setPolicyDataEnabled(ZI)V
Lcom/android/phone/PhoneInterfaceManager;->setPreferredNetworkType(II)Z
Lcom/android/phone/PhoneInterfaceManager;->setRadio(Z)Z
Lcom/android/phone/PhoneInterfaceManager;->setRadioForSubscriber(IZ)Z
Lcom/android/phone/PhoneInterfaceManager;->setRadioPower(Z)Z
Lcom/android/phone/PhoneInterfaceManager;->setVisualVoicemailEnabled(Ljava/lang/String;Landroid/telecom/PhoneAccountHandle;Z)V
Lcom/android/phone/PhoneInterfaceManager;->shutdownMobileRadios()V
Lcom/android/phone/PhoneInterfaceManager;->supplyPin(Ljava/lang/String;)Z
Lcom/android/phone/PhoneInterfaceManager;->supplyPinForSubscriber(ILjava/lang/String;)Z
Lcom/android/phone/PhoneInterfaceManager;->supplyPinReportResult(Ljava/lang/String;)[I
Lcom/android/phone/PhoneInterfaceManager;->supplyPinReportResultForSubscriber(ILjava/lang/String;)[I
Lcom/android/phone/PhoneInterfaceManager;->supplyPuk(Ljava/lang/String;Ljava/lang/String;)Z
Lcom/android/phone/PhoneInterfaceManager;->supplyPukForSubscriber(ILjava/lang/String;Ljava/lang/String;)Z
Lcom/android/phone/PhoneInterfaceManager;->supplyPukReportResult(Ljava/lang/String;Ljava/lang/String;)[I
Lcom/android/phone/PhoneInterfaceManager;->supplyPukReportResultForSubscriber(ILjava/lang/String;Ljava/lang/String;)[I
Lcom/android/phone/PhoneInterfaceManager;->toggleRadioOnOff()V
Lcom/android/phone/PhoneInterfaceManager;->toggleRadioOnOffForSubscriber(I)V
Lcom/android/providers/contacts/ContactsProvider2;->getType(Landroid/net/Uri;)Ljava/lang/String;
Lcom/android/server/accessibility/AccessibilityManagerService$Service;->findAccessibilityNodeInfoByAccessibilityId(IJILandroid/view/accessibility/IAccessibilityInteractionConnectionCallback;IJ)Z
Lcom/android/server/accessibility/AccessibilityManagerService$Service;->findAccessibilityNodeInfosByText(IJLjava/lang/String;ILandroid/view/accessibility/IAccessibilityInteractionConnectionCallback;J)Z
Lcom/android/server/accessibility/AccessibilityManagerService$Service;->findAccessibilityNodeInfosByViewId(IJLjava/lang/String;ILandroid/view/accessibility/IAccessibilityInteractionConnectionCallback;J)Z
Lcom/android/server/accessibility/AccessibilityManagerService$Service;->findFocus(IJIILandroid/view/accessibility/IAccessibilityInteractionConnectionCallback;J)Z
Lcom/android/server/accessibility/AccessibilityManagerService$Service;->focusSearch(IJIILandroid/view/accessibility/IAccessibilityInteractionConnectionCallback;J)Z
Lcom/android/server/accessibility/AccessibilityManagerService$Service;->getMagnificationCenterX()F
Lcom/android/server/accessibility/AccessibilityManagerService$Service;->getMagnificationCenterY()F
Lcom/android/server/accessibility/AccessibilityManagerService$Service;->getMagnificationRegion()Landroid/graphics/Region;
Lcom/android/server/accessibility/AccessibilityManagerService$Service;->getMagnificationScale()F
Lcom/android/server/accessibility/AccessibilityManagerService$Service;->getWindow(I)Landroid/view/accessibility/AccessibilityWindowInfo;
Lcom/android/server/accessibility/AccessibilityManagerService$Service;->getWindows()Ljava/util/List;
Lcom/android/server/accessibility/AccessibilityManagerService$Service;->performAccessibilityAction(IJILandroid/os/Bundle;ILandroid/view/accessibility/IAccessibilityInteractionConnectionCallback;J)Z
Lcom/android/server/accessibility/AccessibilityManagerService$Service;->performGlobalAction(I)Z
Lcom/android/server/accessibility/AccessibilityManagerService$Service;->resetMagnification(Z)Z
Lcom/android/server/accessibility/AccessibilityManagerService$Service;->setMagnificationScaleAndCenter(FFFZ)Z
Lcom/android/server/accessibility/AccessibilityManagerService$Service;->setSoftKeyboardShowMode(I)Z
Lcom/android/server/accessibility/AccessibilityManagerService;->addAccessibilityInteractionConnection(Landroid/view/IWindow;Landroid/view/accessibility/IAccessibilityInteractionConnection;I)I
Lcom/android/server/accessibility/AccessibilityManagerService;->addClient(Landroid/view/accessibility/IAccessibilityManagerClient;I)I
Lcom/android/server/accessibility/AccessibilityManagerService;->disableAccessibilityService(Landroid/content/ComponentName;I)V
Lcom/android/server/accessibility/AccessibilityManagerService;->enableAccessibilityService(Landroid/content/ComponentName;I)V
Lcom/android/server/accessibility/AccessibilityManagerService;->getEnabledAccessibilityServiceList(II)Ljava/util/List;
Lcom/android/server/accessibility/AccessibilityManagerService;->getInstalledAccessibilityServiceList(I)Ljava/util/List;
Lcom/android/server/accessibility/AccessibilityManagerService;->getWindowToken(II)Landroid/os/IBinder;
Lcom/android/server/accessibility/AccessibilityManagerService;->Ierrupt(I)V
Lcom/android/server/accessibility/AccessibilityManagerService;->removeAccessibilityInteractionConnection(Landroid/view/IWindow;)V
Lcom/android/server/accessibility/AccessibilityManagerService;->sendAccessibilityEvent(Landroid/view/accessibility/AccessibilityEvent;I)Z
Lcom/android/server/accessibility/AccessibilityManagerService;->temporaryEnableAccessibilityStateUntilKeyguardRemoved(Landroid/content/ComponentName;Z)V
Lcom/android/server/accounts/AccountManagerService;->addAccountAsUser(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;L[java/lang/String;ZLandroid/os/Bundle;I)V
Lcom/android/server/accounts/AccountManagerService;->addSharedAccountsFromParentUser(II)V
Lcom/android/server/accounts/AccountManagerService;->confirmCredentialsAsUser(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Landroid/os/Bundle;ZI)V
Lcom/android/server/accounts/AccountManagerService;->copyAccountToUser(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;II)V
Lcom/android/server/accounts/AccountManagerService;->finishSessionAsUser(Landroid/accounts/IAccountManagerResponse;Landroid/os/Bundle;ZLandroid/os/Bundle;I)V
Lcom/android/server/accounts/AccountManagerService;->getAccounts(Ljava/lang/String;Ljava/lang/String;)[Landroid/accounts/Account;
Lcom/android/server/accounts/AccountManagerService;->getAccountsAsUser(Ljava/lang/String;ILjava/lang/String;)[Landroid/accounts/Account;
Lcom/android/server/accounts/AccountManagerService;->getAccountsByTypeForPackage(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)[Landroid/accounts/Account;
Lcom/android/server/accounts/AccountManagerService;->getAccountsForPackage(Ljava/lang/String;ILjava/lang/String;)[Landroid/accounts/Account;
Lcom/android/server/accounts/AccountManagerService;->getAuthenticatorTypes(I)[Landroid/accounts/AuthenticatorDescription;
Lcom/android/server/accounts/AccountManagerService;->removeAccount(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Z)V
Lcom/android/server/accounts/AccountManagerService;->removeAccountAsUser(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;ZI)V
Lcom/android/server/am/ActivityManagerService;->appNotRespondingViaProvider(Landroid/os/IBinder;)V
Lcom/android/server/am/ActivityManagerService;->bindBackupAgent(Ljava/lang/String;II)Z
Lcom/android/server/am/ActivityManagerService;->bindService(Landroid/app/IApplicationThread;Landroid/os/IBinder;Landroid/content/Intent;Ljava/lang/String;Landroid/app/IServiceConnection;ILjava/lang/String;I)I
Lcom/android/server/am/ActivityManagerService;->bootAnimationComplete()V
Lcom/android/server/am/ActivityManagerService;->clearGrantedUriPermissions(Ljava/lang/String;I)V
Lcom/android/server/am/ActivityManagerService;->clearPendingBackup()V
Lcom/android/server/am/ActivityManagerService;->crashApplication(IILjava/lang/String;Ljava/lang/String;)V
Lcom/android/server/am/ActivityManagerService;->createStackOnDisplay(I)Landroid/app/IActivityContainer;
Lcom/android/server/am/ActivityManagerService;->createVirtualActivityContainer(Landroid/os/IBinder;Landroid/app/IActivityContainerCallback;)Landroid/app/IActivityContainer;
Lcom/android/server/am/ActivityManagerService;->deleteActivityContainer(Landroid/app/IActivityContainer;)V
Lcom/android/server/am/ActivityManagerService;->dumpHeap(Ljava/lang/String;IZLjava/lang/String;Landroid/os/ParcelFileDescriptor;)Z
Lcom/android/server/am/ActivityManagerService;->finishHeavyWeightApp()V
Lcom/android/server/am/ActivityManagerService;->forceStopPackage(Ljava/lang/String;I)V
Lcom/android/server/am/ActivityManagerService;->getAllStackInfos()Ljava/util/List;
Lcom/android/server/am/ActivityManagerService;->getAssistContextExtras(I)Landroid/os/Bundle;
Lcom/android/server/am/ActivityManagerService;->getContentProviderExternal(Ljava/lang/String;ILandroid/os/IBinder;)Landroid/app/IActivityManager$ContentProviderHolder;
Lcom/android/server/am/ActivityManagerService;->getCurrentUser()Landroid/content/pm/UserInfo;
Lcom/android/server/am/ActivityManagerService;->getGrantedUriPermissions(Ljava/lang/String;I)Landroid/content/pm/ParceledListSlice;
Lcom/android/server/am/ActivityManagerService;->getIntentForIntentSender(Landroid/content/IIntentSender;)Landroid/content/Intent;
Lcom/android/server/am/ActivityManagerService;->getPackageProcessState(Ljava/lang/String;Ljava/lang/String;)I
Lcom/android/server/am/ActivityManagerService;->getRecentTasks(III)Landroid/content/pm/ParceledListSlice;
Lcom/android/server/am/ActivityManagerService;->getRunningAppProcesses()Ljava/util/List;
Lcom/android/server/am/ActivityManagerService;->getRunningExternalApplications()Ljava/util/List;
Lcom/android/server/am/ActivityManagerService;->getRunningUserIds()[I
Lcom/android/server/am/ActivityManagerService;->getStackInfo(I)Landroid/app/ActivityManager$StackInfo;
Lcom/android/server/am/ActivityManagerService;->getTaskBounds(I)Landroid/graphics/Rect;
Lcom/android/server/am/ActivityManagerService;->getTaskDescriptionIcon(Ljava/lang/String;I)Landroid/graphics/Bitmap;
Lcom/android/server/am/ActivityManagerService;->getTasks(II)Ljava/util/List;
Lcom/android/server/am/ActivityManagerService;->getTaskThumbnail(I)Landroid/app/ActivityManager$TaskThumbnail;
Lcom/android/server/am/ActivityManagerService;->hang(Landroid/os/IBinder;Z)V
Lcom/android/server/am/ActivityManagerService;->inputDispatchingTimedOut(IZLjava/lang/String;)J
Lcom/android/server/am/ActivityManagerService;->isInHomeStack(I)Z
Lcom/android/server/am/ActivityManagerService;->isUserRunning(II)Z
Lcom/android/server/am/ActivityManagerService;->killAllBackgroundProcesses()V
Lcom/android/server/am/ActivityManagerService;->killBackgroundProcesses(Ljava/lang/String;I)V
Lcom/android/server/am/ActivityManagerService;->killPackageDependents(Ljava/lang/String;I)V
Lcom/android/server/am/ActivityManagerService;->killUid(IILjava/lang/String;)V
Lcom/android/server/am/ActivityManagerService;->launchAssistIntent(Landroid/content/Intent;ILjava/lang/String;ILandroid/os/Bundle;)Z
Lcom/android/server/am/ActivityManagerService;->moveTaskBackwards(I)V
Lcom/android/server/am/ActivityManagerService;->moveTasksToFullscreenStack(IZ)V
Lcom/android/server/am/ActivityManagerService;->moveTaskToDockedStack(IIZZLandroid/graphics/Rect;Z)Z
Lcom/android/server/am/ActivityManagerService;->moveTaskToFront(IILandroid/os/Bundle;)V
Lcom/android/server/am/ActivityManagerService;->moveTaskToStack(IIZ)V
Lcom/android/server/am/ActivityManagerService;->moveTopActivityToPinnedStack(ILandroid/graphics/Rect;)Z
Lcom/android/server/am/ActivityManagerService;->navigateUpTo(Landroid/os/IBinder;Landroid/content/Intent;ILandroid/content/Intent;)Z
Lcom/android/server/am/ActivityManagerService;->performIdleMaIenance()V
Lcom/android/server/am/ActivityManagerService;->positionTaskInStack(III)V
Lcom/android/server/am/ActivityManagerService;->profileControl(Ljava/lang/String;IZLandroid/app/ProfilerInfo;I)Z
Lcom/android/server/am/ActivityManagerService;->registerProcessObserver(Landroid/app/IProcessObserver;)V
Lcom/android/server/am/ActivityManagerService;->registerTaskStackListener(Landroid/app/ITaskStackListener;)V
Lcom/android/server/am/ActivityManagerService;->registerUidObserver(Landroid/app/IUidObserver;I)V
Lcom/android/server/am/ActivityManagerService;->registerUserSwitchObserver(Landroid/app/IUserSwitchObserver;Ljava/lang/String;)V
Lcom/android/server/am/ActivityManagerService;->removeContentProviderExternal(Ljava/lang/String;Landroid/os/IBinder;)V
Lcom/android/server/am/ActivityManagerService;->removeStack(I)V
Lcom/android/server/am/ActivityManagerService;->removeTask(I)Z
Lcom/android/server/am/ActivityManagerService;->requestAssistContextExtras(ILcom/android/Iernal/os/IResultReceiver;Landroid/os/Bundle;Landroid/os/IBinder;ZZ)Z
Lcom/android/server/am/ActivityManagerService;->requestBugReport(I)V
Lcom/android/server/am/ActivityManagerService;->resizeDockedStack(Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;)V
Lcom/android/server/am/ActivityManagerService;->resizePinnedStack(Landroid/graphics/Rect;Landroid/graphics/Rect;)V
Lcom/android/server/am/ActivityManagerService;->resizeStack(ILandroid/graphics/Rect;ZZZI)V
Lcom/android/server/am/ActivityManagerService;->resizeTask(ILandroid/graphics/Rect;I)V
Lcom/android/server/am/ActivityManagerService;->restart()V
Lcom/android/server/am/ActivityManagerService;->resumeAppSwitches()V
Lcom/android/server/am/ActivityManagerService;->sendIdleJobTrigger()V
Lcom/android/server/am/ActivityManagerService;->setActivityController(Landroid/app/IActivityController;Z)V
Lcom/android/server/am/ActivityManagerService;->setAlwaysFinish(Z)V
Lcom/android/server/am/ActivityManagerService;->setDebugApp(Ljava/lang/String;ZZ)V
Lcom/android/server/am/ActivityManagerService;->setDumpHeapDebugLimit(Ljava/lang/String;IJLjava/lang/String;)V
Lcom/android/server/am/ActivityManagerService;->setFocusedStack(I)V
Lcom/android/server/am/ActivityManagerService;->setFocusedTask(I)V
Lcom/android/server/am/ActivityManagerService;->setFrontActivityScreenCompatMode(I)V
Lcom/android/server/am/ActivityManagerService;->setHasTopUi(Z)V
Lcom/android/server/am/ActivityManagerService;->setLenientBackgroundCheck(Z)V
Lcom/android/server/am/ActivityManagerService;->setLockScreenShown(ZZ)V
Lcom/android/server/am/ActivityManagerService;->setPackageAskScreenCompat(Ljava/lang/String;Z)V
Lcom/android/server/am/ActivityManagerService;->setPackageScreenCompatMode(Ljava/lang/String;I)V
Lcom/android/server/am/ActivityManagerService;->setProcessForeground(Landroid/os/IBinder;IZ)V
Lcom/android/server/am/ActivityManagerService;->setProcessLimit(I)V
Lcom/android/server/am/ActivityManagerService;->setTaskDescription(Landroid/os/IBinder;Landroid/app/ActivityManager$TaskDescription;)V
Lcom/android/server/am/ActivityManagerService;->shutdown(I)Z
Lcom/android/server/am/ActivityManagerService;->signalPersistentProcesses(I)V
Lcom/android/server/am/ActivityManagerService;->startActivities(Landroid/app/IApplicationThread;Ljava/lang/String;L[android/content/Intent;L[java/lang/String;Landroid/os/IBinder;Landroid/os/Bundle;I)I
Lcom/android/server/am/ActivityManagerService;->startActivity(Landroid/app/IApplicationThread;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/os/IBinder;Ljava/lang/String;IILandroid/app/ProfilerInfo;Landroid/os/Bundle;)I
Lcom/android/server/am/ActivityManagerService;->startActivityAndWait(Landroid/app/IApplicationThread;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/os/IBinder;Ljava/lang/String;IILandroid/app/ProfilerInfo;Landroid/os/Bundle;I)Landroid/app/IActivityManager$WaitResult;
Lcom/android/server/am/ActivityManagerService;->startActivityAsCaller(Landroid/app/IApplicationThread;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/os/IBinder;Ljava/lang/String;IILandroid/app/ProfilerInfo;Landroid/os/Bundle;ZI)I
Lcom/android/server/am/ActivityManagerService;->startActivityAsUser(Landroid/app/IApplicationThread;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/os/IBinder;Ljava/lang/String;IILandroid/app/ProfilerInfo;Landroid/os/Bundle;I)I
Lcom/android/server/am/ActivityManagerService;->startActivityFromRecents(ILandroid/os/Bundle;)I
Lcom/android/server/am/ActivityManagerService;->startActivityWithConfig(Landroid/app/IApplicationThread;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/os/IBinder;Ljava/lang/String;IILandroid/content/res/Configuration;Landroid/os/Bundle;I)I
Lcom/android/server/am/ActivityManagerService;->startBinderTracking()Z
Lcom/android/server/am/ActivityManagerService;->startConfirmDeviceCredentialIntent(Landroid/content/Intent;)V
Lcom/android/server/am/ActivityManagerService;->startSystemLockTaskMode(I)V
Lcom/android/server/am/ActivityManagerService;->startUserInBackground(I)Z
Lcom/android/server/am/ActivityManagerService;->startVoiceActivity(Ljava/lang/String;IILandroid/content/Intent;Ljava/lang/String;Landroid/service/voice/IVoiceInteractionSession;Lcom/android/Iernal/app/IVoiceInteractor;ILandroid/app/ProfilerInfo;Landroid/os/Bundle;I)I
Lcom/android/server/am/ActivityManagerService;->stopAppSwitches()V
Lcom/android/server/am/ActivityManagerService;->stopBinderTrackingAndDump(Landroid/os/ParcelFileDescriptor;)Z
Lcom/android/server/am/ActivityManagerService;->stopLockTaskMode()V
Lcom/android/server/am/ActivityManagerService;->stopService(Landroid/app/IApplicationThread;Landroid/content/Intent;Ljava/lang/String;I)I
Lcom/android/server/am/ActivityManagerService;->stopServiceToken(Landroid/content/ComponentName;Landroid/os/IBinder;I)Z
Lcom/android/server/am/ActivityManagerService;->stopSystemLockTaskMode()V
Lcom/android/server/am/ActivityManagerService;->stopUser(IZLandroid/app/IStopUserCallback;)I
Lcom/android/server/am/ActivityManagerService;->suppressResizeConfigChanges(Z)V
Lcom/android/server/am/ActivityManagerService;->swapDockedAndFullscreenStack()V
Lcom/android/server/am/ActivityManagerService;->unbindService(Landroid/app/IServiceConnection;)Z
Lcom/android/server/am/ActivityManagerService;->unbroadcastIntent(Landroid/app/IApplicationThread;Landroid/content/Intent;I)V
Lcom/android/server/am/ActivityManagerService;->unhandledBack()V
Lcom/android/server/am/ActivityManagerService;->unlockUser(I[B[BLandroid/os/IProgressListener;)Z
Lcom/android/server/am/ActivityManagerService;->updateConfiguration(Landroid/content/res/Configuration;)V
Lcom/android/server/am/ActivityManagerService;->updatePersistentConfiguration(Landroid/content/res/Configuration;)V
Lcom/android/server/am/BatteryStatsService;->getAwakeTimeBattery()J
Lcom/android/server/am/BatteryStatsService;->getAwakeTimePlugged()J
Lcom/android/server/am/BatteryStatsService;->getStatistics()[B
Lcom/android/server/am/BatteryStatsService;->getStatisticsStream()Landroid/os/ParcelFileDescriptor;
Lcom/android/server/am/BatteryStatsService;->noteBleScanStarted(Landroid/os/WorkSource;)V
Lcom/android/server/am/BatteryStatsService;->noteBleScanStopped(Landroid/os/WorkSource;)V
Lcom/android/server/am/BatteryStatsService;->noteBluetoothControllerActivity(Landroid/bluetooth/BluetoothActivityEnergyInfo;)V
Lcom/android/server/am/BatteryStatsService;->noteChangeWakelockFromSource(Landroid/os/WorkSource;ILjava/lang/String;Ljava/lang/String;ILandroid/os/WorkSource;ILjava/lang/String;Ljava/lang/String;IZ)V
Lcom/android/server/am/BatteryStatsService;->noteConnectivityChanged(ILjava/lang/String;)V
Lcom/android/server/am/BatteryStatsService;->noteDeviceIdleMode(ILjava/lang/String;I)V
Lcom/android/server/am/BatteryStatsService;->noteEvent(ILjava/lang/String;I)V
Lcom/android/server/am/BatteryStatsService;->noteFlashlightOff(I)V
Lcom/android/server/am/BatteryStatsService;->noteFlashlightOn(I)V
Lcom/android/server/am/BatteryStatsService;->noteFullWifiLockAcquired(I)V
Lcom/android/server/am/BatteryStatsService;->noteFullWifiLockAcquiredFromSource(Landroid/os/WorkSource;)V
Lcom/android/server/am/BatteryStatsService;->noteFullWifiLockReleased(I)V
Lcom/android/server/am/BatteryStatsService;->noteFullWifiLockReleasedFromSource(Landroid/os/WorkSource;)V
Lcom/android/server/am/BatteryStatsService;->noteInteractive(Z)V
Lcom/android/server/am/BatteryStatsService;->noteJobFinish(Ljava/lang/String;I)V
Lcom/android/server/am/BatteryStatsService;->noteJobStart(Ljava/lang/String;I)V
Lcom/android/server/am/BatteryStatsService;->noteLongPartialWakelockFinish(Ljava/lang/String;Ljava/lang/String;I)V
Lcom/android/server/am/BatteryStatsService;->noteLongPartialWakelockStart(Ljava/lang/String;Ljava/lang/String;I)V
Lcom/android/server/am/BatteryStatsService;->noteMobileRadioPowerState(IJI)V
Lcom/android/server/am/BatteryStatsService;->noteModemControllerActivity(Landroid/telephony/ModemActivityInfo;)V
Lcom/android/server/am/BatteryStatsService;->noteNetworkInterfaceType(Ljava/lang/String;I)V
Lcom/android/server/am/BatteryStatsService;->noteNetworkStatsEnabled()V
Lcom/android/server/am/BatteryStatsService;->notePhoneDataConnectionState(IZ)V
Lcom/android/server/am/BatteryStatsService;->notePhoneOff()V
Lcom/android/server/am/BatteryStatsService;->notePhoneOn()V
Lcom/android/server/am/BatteryStatsService;->notePhoneSignalStrength(Landroid/telephony/SignalStrength;)V
Lcom/android/server/am/BatteryStatsService;->notePhoneState(I)V
Lcom/android/server/am/BatteryStatsService;->noteResetAudio()V
Lcom/android/server/am/BatteryStatsService;->noteResetBleScan()V
Lcom/android/server/am/BatteryStatsService;->noteResetCamera()V
Lcom/android/server/am/BatteryStatsService;->noteResetFlashlight()V
Lcom/android/server/am/BatteryStatsService;->noteResetVideo()V
Lcom/android/server/am/BatteryStatsService;->noteScreenBrightness(I)V
Lcom/android/server/am/BatteryStatsService;->noteScreenState(I)V
Lcom/android/server/am/BatteryStatsService;->noteStartAudio(I)V
Lcom/android/server/am/BatteryStatsService;->noteStartCamera(I)V
Lcom/android/server/am/BatteryStatsService;->noteStartGps(I)V
Lcom/android/server/am/BatteryStatsService;->noteStartSensor(II)V
Lcom/android/server/am/BatteryStatsService;->noteStartVideo(I)V
Lcom/android/server/am/BatteryStatsService;->noteStartWakelock(IILjava/lang/String;Ljava/lang/String;IZ)V
Lcom/android/server/am/BatteryStatsService;->noteStartWakelockFromSource(Landroid/os/WorkSource;ILjava/lang/String;Ljava/lang/String;IZ)V
Lcom/android/server/am/BatteryStatsService;->noteStopAudio(I)V
Lcom/android/server/am/BatteryStatsService;->noteStopCamera(I)V
Lcom/android/server/am/BatteryStatsService;->noteStopGps(I)V
Lcom/android/server/am/BatteryStatsService;->noteStopSensor(II)V
Lcom/android/server/am/BatteryStatsService;->noteStopVideo(I)V
Lcom/android/server/am/BatteryStatsService;->noteStopWakelock(IILjava/lang/String;Ljava/lang/String;I)V
Lcom/android/server/am/BatteryStatsService;->noteStopWakelockFromSource(Landroid/os/WorkSource;ILjava/lang/String;Ljava/lang/String;I)V
Lcom/android/server/am/BatteryStatsService;->noteSyncFinish(Ljava/lang/String;I)V
Lcom/android/server/am/BatteryStatsService;->noteSyncStart(Ljava/lang/String;I)V
Lcom/android/server/am/BatteryStatsService;->noteUserActivity(II)V
Lcom/android/server/am/BatteryStatsService;->noteVibratorOff(I)V
Lcom/android/server/am/BatteryStatsService;->noteVibratorOn(IJ)V
Lcom/android/server/am/BatteryStatsService;->noteWakeUp(Ljava/lang/String;I)V
Lcom/android/server/am/BatteryStatsService;->noteWifiBatchedScanStartedFromSource(Landroid/os/WorkSource;I)V
Lcom/android/server/am/BatteryStatsService;->noteWifiBatchedScanStoppedFromSource(Landroid/os/WorkSource;)V
Lcom/android/server/am/BatteryStatsService;->noteWifiControllerActivity(Landroid/net/wifi/WifiActivityEnergyInfo;)V
Lcom/android/server/am/BatteryStatsService;->noteWifiMulticastDisabled(I)V
Lcom/android/server/am/BatteryStatsService;->noteWifiMulticastDisabledFromSource(Landroid/os/WorkSource;)V
Lcom/android/server/am/BatteryStatsService;->noteWifiMulticastEnabled(I)V
Lcom/android/server/am/BatteryStatsService;->noteWifiMulticastEnabledFromSource(Landroid/os/WorkSource;)V
Lcom/android/server/am/BatteryStatsService;->noteWifiOff()V
Lcom/android/server/am/BatteryStatsService;->noteWifiOn()V
Lcom/android/server/am/BatteryStatsService;->noteWifiRadioPowerState(IJI)V
Lcom/android/server/am/BatteryStatsService;->noteWifiRssiChanged(I)V
Lcom/android/server/am/BatteryStatsService;->noteWifiRunning(Landroid/os/WorkSource;)V
Lcom/android/server/am/BatteryStatsService;->noteWifiRunningChanged(Landroid/os/WorkSource;Landroid/os/WorkSource;)V
Lcom/android/server/am/BatteryStatsService;->noteWifiScanStarted(I)V
Lcom/android/server/am/BatteryStatsService;->noteWifiScanStartedFromSource(Landroid/os/WorkSource;)V
Lcom/android/server/am/BatteryStatsService;->noteWifiScanStopped(I)V
Lcom/android/server/am/BatteryStatsService;->noteWifiScanStoppedFromSource(Landroid/os/WorkSource;)V
Lcom/android/server/am/BatteryStatsService;->noteWifiState(ILjava/lang/String;)V
Lcom/android/server/am/BatteryStatsService;->noteWifiStopped(Landroid/os/WorkSource;)V
Lcom/android/server/am/BatteryStatsService;->noteWifiSupplicantStateChanged(IZ)V
Lcom/android/server/am/BatteryStatsService;->setBatteryState(IIIIIII)V
Lcom/android/server/am/BatteryStatsService;->takeUidSnapshot(I)Landroid/os/health/HealthStatsParceler;
Lcom/android/server/am/BatteryStatsService;->takeUidSnapshots([I)[Landroid/os/health/HealthStatsParceler;
Lcom/android/server/am/PendingIntentRecord;->send(ILandroid/content/Intent;Ljava/lang/String;Landroid/content/IIntentReceiver;Ljava/lang/String;Landroid/os/Bundle;)V
Lcom/android/server/am/ProcessStatsService;->getCurrentStats(Ljava/util/List;)[B
Lcom/android/server/am/ProcessStatsService;->getStatsOverTime(J)Landroid/os/ParcelFileDescriptor;
Lcom/android/server/AppOpsService;->checkAudioOperation(IIILjava/lang/String;)I
Lcom/android/server/AppOpsService;->checkOperation(IILjava/lang/String;)I
Lcom/android/server/AppOpsService;->finishOperation(Landroid/os/IBinder;IILjava/lang/String;)V
Lcom/android/server/AppOpsService;->getOpsForPackage(ILjava/lang/String;[I)Ljava/util/List;
Lcom/android/server/AppOpsService;->getPackagesForOps([I)Ljava/util/List;
Lcom/android/server/AppOpsService;->noteOperation(IILjava/lang/String;)I
Lcom/android/server/AppOpsService;->resetAllModes(ILjava/lang/String;)V
Lcom/android/server/AppOpsService;->setAudioRestriction(IIIIL[java/lang/String;)V
Lcom/android/server/AppOpsService;->setMode(IILjava/lang/String;I)V
Lcom/android/server/AppOpsService;->setUidMode(III)V
Lcom/android/server/AppOpsService;->setUserRestriction(IZLandroid/os/IBinder;IL[java/lang/String;)V
Lcom/android/server/AppOpsService;->startOperation(Landroid/os/IBinder;IILjava/lang/String;)I
Lcom/android/server/appwidget/AppWidgetServiceImpl;->bindAppWidgetId(Ljava/lang/String;IILandroid/content/ComponentName;Landroid/os/Bundle;)Z
Lcom/android/server/appwidget/AppWidgetServiceImpl;->bindRemoteViewsService(Ljava/lang/String;ILandroid/content/Intent;Landroid/os/IBinder;)V
Lcom/android/server/appwidget/AppWidgetServiceImpl;->createAppWidgetConfigIntentSender(Ljava/lang/String;II)Landroid/content/IntentSender;
Lcom/android/server/appwidget/AppWidgetServiceImpl;->deleteAppWidgetId(Ljava/lang/String;I)V
Lcom/android/server/appwidget/AppWidgetServiceImpl;->getAppWidgetInfo(Ljava/lang/String;I)Landroid/appwidget/AppWidgetProviderInfo;
Lcom/android/server/appwidget/AppWidgetServiceImpl;->getAppWidgetOptions(Ljava/lang/String;I)Landroid/os/Bundle;
Lcom/android/server/appwidget/AppWidgetServiceImpl;->getAppWidgetViews(Ljava/lang/String;I)Landroid/widget/RemoteViews;
Lcom/android/server/appwidget/AppWidgetServiceImpl;->hasBindAppWidgetPermission(Ljava/lang/String;I)Z
Lcom/android/server/appwidget/AppWidgetServiceImpl;->notifyAppWidgetViewDataChanged(Ljava/lang/String;[II)V
Lcom/android/server/appwidget/AppWidgetServiceImpl;->partiallyUpdateAppWidgetIds(Ljava/lang/String;[ILandroid/widget/RemoteViews;)V
Lcom/android/server/appwidget/AppWidgetServiceImpl;->setBindAppWidgetPermission(Ljava/lang/String;IZ)V
Lcom/android/server/appwidget/AppWidgetServiceImpl;->unbindRemoteViewsService(Ljava/lang/String;ILandroid/content/Intent;)V
Lcom/android/server/appwidget/AppWidgetServiceImpl;->updateAppWidgetIds(Ljava/lang/String;[ILandroid/widget/RemoteViews;)V
Lcom/android/server/appwidget/AppWidgetServiceImpl;->updateAppWidgetOptions(Ljava/lang/String;ILandroid/os/Bundle;)V
Lcom/android/server/audio/AudioService;->disableSafeMediaVolume(Ljava/lang/String;)V
Lcom/android/server/audio/AudioService;->forceRemoteSubmixFullVolume(ZLandroid/os/IBinder;)V
Lcom/android/server/audio/AudioService;->notifyVolumeControllerVisible(Landroid/media/IVolumeController;Z)V
Lcom/android/server/audio/AudioService;->registerAudioPolicy(Landroid/media/audiopolicy/AudioPolicyConfig;Landroid/media/audiopolicy/IAudioPolicyCallback;Z)Ljava/lang/String;
Lcom/android/server/audio/AudioService;->requestAudioFocus(Landroid/media/AudioAttributes;ILandroid/os/IBinder;Landroid/media/IAudioFocusDispatcher;Ljava/lang/String;Ljava/lang/String;ILandroid/media/audiopolicy/IAudioPolicyCallback;)I
Lcom/android/server/audio/AudioService;->setBluetoothScoOn(Z)V
Lcom/android/server/audio/AudioService;->setFocusPropertiesForPolicy(ILandroid/media/audiopolicy/IAudioPolicyCallback;)I
Lcom/android/server/audio/AudioService;->setMasterMute(ZILjava/lang/String;I)V
Lcom/android/server/audio/AudioService;->setMicrophoneMute(ZLjava/lang/String;I)V
Lcom/android/server/audio/AudioService;->setMode(ILandroid/os/IBinder;Ljava/lang/String;)V
Lcom/android/server/audio/AudioService;->setRingerModeInternal(ILjava/lang/String;)V
Lcom/android/server/audio/AudioService;->setRingtonePlayer(Landroid/media/IRingtonePlayer;)V
Lcom/android/server/audio/AudioService;->setSpeakerphoneOn(Z)V
Lcom/android/server/audio/AudioService;->setVolumeController(Landroid/media/IVolumeController;)V
Lcom/android/server/audio/AudioService;->setVolumePolicy(Landroid/media/VolumePolicy;)V
Lcom/android/server/audio/AudioService;->startBluetoothSco(Landroid/os/IBinder;I)V
Lcom/android/server/audio/AudioService;->startBluetoothScoVirtualCall(Landroid/os/IBinder;)V
Lcom/android/server/audio/AudioService;->stopBluetoothSco(Landroid/os/IBinder;)V
Lcom/android/server/backup/BackupManagerService$ActiveRestoreSession;->getAvailableRestoreSets(Landroid/app/backup/IRestoreObserver;)I
Lcom/android/server/backup/BackupManagerService$ActiveRestoreSession;->restoreAll(JLandroid/app/backup/IRestoreObserver;)I
Lcom/android/server/backup/BackupManagerService$ActiveRestoreSession;->restorePackage(Ljava/lang/String;Landroid/app/backup/IRestoreObserver;)I
Lcom/android/server/backup/BackupManagerService$ActiveRestoreSession;->restoreSome(JLandroid/app/backup/IRestoreObserver;L[java/lang/String;)I
Lcom/android/server/backup/Trampoline;->acknowledgeFullBackupOrRestore(IZLjava/lang/String;Ljava/lang/String;Landroid/app/backup/IFullBackupRestoreObserver;)V
Lcom/android/server/backup/Trampoline;->backupNow()V
Lcom/android/server/backup/Trampoline;->beginRestoreSession(Ljava/lang/String;Ljava/lang/String;)Landroid/app/backup/IRestoreSession;
Lcom/android/server/backup/Trampoline;->clearBackupData(Ljava/lang/String;Ljava/lang/String;)V
Lcom/android/server/backup/Trampoline;->dataChanged(Ljava/lang/String;)V
Lcom/android/server/backup/Trampoline;->fullBackup(Landroid/os/ParcelFileDescriptor;ZZZZZZZL[java/lang/String;)V
Lcom/android/server/backup/Trampoline;->fullRestore(Landroid/os/ParcelFileDescriptor;)V
Lcom/android/server/backup/Trampoline;->fullTransportBackup(L[java/lang/String;)V
Lcom/android/server/backup/Trampoline;->getAvailableRestoreToken(Ljava/lang/String;)J
Lcom/android/server/backup/Trampoline;->getConfigurationIntent(Ljava/lang/String;)Landroid/content/Intent;
Lcom/android/server/backup/Trampoline;->getCurrentTransport()Ljava/lang/String;
Lcom/android/server/backup/Trampoline;->getDataManagementIntent(Ljava/lang/String;)Landroid/content/Intent;
Lcom/android/server/backup/Trampoline;->getDataManagementLabel(Ljava/lang/String;)Ljava/lang/String;
Lcom/android/server/backup/Trampoline;->getDestinationString(Ljava/lang/String;)Ljava/lang/String;
Lcom/android/server/backup/Trampoline;->hasBackupPassword()Z
Lcom/android/server/backup/Trampoline;->isAppEligibleForBackup(Ljava/lang/String;)Z
Lcom/android/server/backup/Trampoline;->isBackupEnabled()Z
Lcom/android/server/backup/Trampoline;->listAllTransports()[Ljava/lang/String;
Lcom/android/server/backup/Trampoline;->requestBackup(L[java/lang/String;Landroid/app/backup/IBackupObserver;)I
Lcom/android/server/backup/Trampoline;->restoreAtInstall(Ljava/lang/String;I)V
Lcom/android/server/backup/Trampoline;->selectBackupTransport(Ljava/lang/String;)Ljava/lang/String;
Lcom/android/server/backup/Trampoline;->setAutoRestore(Z)V
Lcom/android/server/backup/Trampoline;->setBackupEnabled(Z)V
Lcom/android/server/backup/Trampoline;->setBackupPassword(Ljava/lang/String;Ljava/lang/String;)Z
Lcom/android/server/backup/Trampoline;->setBackupProvisioned(Z)V
Lcom/android/server/BluetoothManagerService;->disable(Z)Z
Lcom/android/server/BluetoothManagerService;->enable()Z
Lcom/android/server/BluetoothManagerService;->enableNoAutoConnect()Z
Lcom/android/server/BluetoothManagerService;->getAddress()Ljava/lang/String;
Lcom/android/server/BluetoothManagerService;->getName()Ljava/lang/String;
Lcom/android/server/BluetoothManagerService;->registerStateChangeCallback(Landroid/bluetooth/IBluetoothStateChangeCallback;)V
Lcom/android/server/BluetoothManagerService;->unregisterAdapter(Landroid/bluetooth/IBluetoothManagerCallback;)V
Lcom/android/server/BluetoothManagerService;->unregisterStateChangeCallback(Landroid/bluetooth/IBluetoothStateChangeCallback;)V
Lcom/android/server/connectivity/IpConnectivityMetrics$Impl;->logEvent(Landroid/net/ConnectivityMetricsEvent;)I
Lcom/android/server/connectivity/MetricsLoggerService$MetricsLoggerImpl;->getEvents(Landroid/net/ConnectivityMetricsEvent$Reference;)[Landroid/net/ConnectivityMetricsEvent;
Lcom/android/server/connectivity/MetricsLoggerService$MetricsLoggerImpl;->logEvent(Landroid/net/ConnectivityMetricsEvent;)J
Lcom/android/server/connectivity/MetricsLoggerService$MetricsLoggerImpl;->logEvents(L[android/net/ConnectivityMetricsEvent;)J
Lcom/android/server/connectivity/MetricsLoggerService$MetricsLoggerImpl;->register(Landroid/app/PendingIntent;)Z
Lcom/android/server/connectivity/MetricsLoggerService$MetricsLoggerImpl;->unregister(Landroid/app/PendingIntent;)V
Lcom/android/server/ConnectivityService;->factoryReset()V
Lcom/android/server/ConnectivityService;->getActiveLinkProperties()Landroid/net/LinkProperties;
Lcom/android/server/ConnectivityService;->getActiveNetwork()Landroid/net/Network;
Lcom/android/server/ConnectivityService;->getActiveNetworkForUid(IZ)Landroid/net/Network;
Lcom/android/server/ConnectivityService;->getActiveNetworkInfo()Landroid/net/NetworkInfo;
Lcom/android/server/ConnectivityService;->getActiveNetworkInfoForUid(IZ)Landroid/net/NetworkInfo;
Lcom/android/server/ConnectivityService;->getActiveNetworkQuotaInfo()Landroid/net/NetworkQuotaInfo;
Lcom/android/server/ConnectivityService;->getAllNetworkInfo()[Landroid/net/NetworkInfo;
Lcom/android/server/ConnectivityService;->getAllNetworks()[Landroid/net/Network;
Lcom/android/server/ConnectivityService;->getAllNetworkState()[Landroid/net/NetworkState;
Lcom/android/server/ConnectivityService;->getAllVpnInfo()[Lcom/android/Iernal/net/VpnInfo;
Lcom/android/server/ConnectivityService;->getAlwaysOnVpnPackage(I)Ljava/lang/String;
Lcom/android/server/ConnectivityService;->getDefaultNetworkCapabilitiesForUser(I)[Landroid/net/NetworkCapabilities;
Lcom/android/server/ConnectivityService;->getLastTetherError(Ljava/lang/String;)I
Lcom/android/server/ConnectivityService;->getLegacyVpnInfo(I)Lcom/android/Iernal/net/LegacyVpnInfo;
Lcom/android/server/ConnectivityService;->getLinkProperties(Landroid/net/Network;)Landroid/net/LinkProperties;
Lcom/android/server/ConnectivityService;->getLinkPropertiesForType(I)Landroid/net/LinkProperties;
Lcom/android/server/ConnectivityService;->getMobileProvisioningUrl()Ljava/lang/String;
Lcom/android/server/ConnectivityService;->getNetworkCapabilities(Landroid/net/Network;)Landroid/net/NetworkCapabilities;
Lcom/android/server/ConnectivityService;->getNetworkForType(I)Landroid/net/Network;
Lcom/android/server/ConnectivityService;->getNetworkInfo(I)Landroid/net/NetworkInfo;
Lcom/android/server/ConnectivityService;->getNetworkInfoForUid(Landroid/net/Network;IZ)Landroid/net/NetworkInfo;
Lcom/android/server/ConnectivityService;->getTetherableBluetoothRegexs()[Ljava/lang/String;
Lcom/android/server/ConnectivityService;->getTetherableIfaces()[Ljava/lang/String;
Lcom/android/server/ConnectivityService;->getTetherableUsbRegexs()[Ljava/lang/String;
Lcom/android/server/ConnectivityService;->getTetherableWifiRegexs()[Ljava/lang/String;
Lcom/android/server/ConnectivityService;->getTetheredDhcpRanges()[Ljava/lang/String;
Lcom/android/server/ConnectivityService;->getTetheredIfaces()[Ljava/lang/String;
Lcom/android/server/ConnectivityService;->getTetheringErroredIfaces()[Ljava/lang/String;
Lcom/android/server/ConnectivityService;->getVpnConfig(I)Lcom/android/Iernal/net/VpnConfig;
Lcom/android/server/ConnectivityService;->isActiveNetworkMetered()Z
Lcom/android/server/ConnectivityService;->isNetworkSupported(I)Z
Lcom/android/server/ConnectivityService;->isTetheringSupported()Z
Lcom/android/server/ConnectivityService;->listenForNetwork(Landroid/net/NetworkCapabilities;Landroid/os/Messenger;Landroid/os/IBinder;)Landroid/net/NetworkRequest;
Lcom/android/server/ConnectivityService;->pendingListenForNetwork(Landroid/net/NetworkCapabilities;Landroid/app/PendingIntent;)V
Lcom/android/server/ConnectivityService;->pendingRequestForNetwork(Landroid/net/NetworkCapabilities;Landroid/app/PendingIntent;)Landroid/net/NetworkRequest;
Lcom/android/server/ConnectivityService;->prepareVpn(Ljava/lang/String;Ljava/lang/String;I)Z
Lcom/android/server/ConnectivityService;->registerNetworkAgent(Landroid/os/Messenger;Landroid/net/NetworkInfo;Landroid/net/LinkProperties;Landroid/net/NetworkCapabilities;ILandroid/net/NetworkMisc;)I
Lcom/android/server/ConnectivityService;->registerNetworkFactory(Landroid/os/Messenger;Ljava/lang/String;)V
Lcom/android/server/ConnectivityService;->reportInetCondition(II)V
Lcom/android/server/ConnectivityService;->reportNetworkConnectivity(Landroid/net/Network;Z)V
Lcom/android/server/ConnectivityService;->requestBandwidthUpdate(Landroid/net/Network;)Z
Lcom/android/server/ConnectivityService;->requestNetwork(Landroid/net/NetworkCapabilities;Landroid/os/Messenger;ILandroid/os/IBinder;I)Landroid/net/NetworkRequest;
Lcom/android/server/ConnectivityService;->requestRouteToHostAddress(I[B)Z
Lcom/android/server/ConnectivityService;->setAcceptUnvalidated(Landroid/net/Network;ZZ)V
Lcom/android/server/ConnectivityService;->setAirplaneMode(Z)V
Lcom/android/server/ConnectivityService;->setAlwaysOnVpnPackage(ILjava/lang/String;Z)Z
Lcom/android/server/ConnectivityService;->setAVUnvalidated(Landroid/net/Network;)V
Lcom/android/server/ConnectivityService;->setGlobalProxy(Landroid/net/ProxyInfo;)V
Lcom/android/server/ConnectivityService;->setProvisioningNotificationVisible(ZILjava/lang/String;)V
Lcom/android/server/ConnectivityService;->setUsbTethering(Z)I
Lcom/android/server/ConnectivityService;->setVpnPackageAuthorization(Ljava/lang/String;IZ)V
Lcom/android/server/ConnectivityService;->startLegacyVpn(Lcom/android/Iernal/net/VpnProfile;)V
Lcom/android/server/ConnectivityService;->startNattKeepalive(Landroid/net/Network;ILandroid/os/Messenger;Landroid/os/IBinder;Ljava/lang/String;ILjava/lang/String;)V
Lcom/android/server/ConnectivityService;->startTethering(ILandroid/os/ResultReceiver;Z)V
Lcom/android/server/ConnectivityService;->stopTethering(I)V
Lcom/android/server/ConnectivityService;->tether(Ljava/lang/String;)I
Lcom/android/server/ConnectivityService;->unregisterNetworkFactory(Landroid/os/Messenger;)V
Lcom/android/server/ConnectivityService;->untether(Ljava/lang/String;)I
Lcom/android/server/ConnectivityService;->updateLockdownVpn()Z
Lcom/android/server/ConsumerIrService;->getCarrierFrequencies()[I
Lcom/android/server/ConsumerIrService;->transmit(Ljava/lang/String;I[I)V
Lcom/android/server/content/ContentService;->addPeriodicSync(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;J)V
Lcom/android/server/content/ContentService;->cancelSync(Landroid/accounts/Account;Ljava/lang/String;Landroid/content/ComponentName;)V
Lcom/android/server/content/ContentService;->cancelSyncAsUser(Landroid/accounts/Account;Ljava/lang/String;Landroid/content/ComponentName;I)V
Lcom/android/server/content/ContentService;->getCache(Ljava/lang/String;Landroid/net/Uri;I)Landroid/os/Bundle;
Lcom/android/server/content/ContentService;->getCurrentSyncs()Ljava/util/List;
Lcom/android/server/content/ContentService;->getCurrentSyncsAsUser(I)Ljava/util/List;
Lcom/android/server/content/ContentService;->getIsSyncable(Landroid/accounts/Account;Ljava/lang/String;)I
Lcom/android/server/content/ContentService;->getIsSyncableAsUser(Landroid/accounts/Account;Ljava/lang/String;I)I
Lcom/android/server/content/ContentService;->getMasterSyncAutomatically()Z
Lcom/android/server/content/ContentService;->getMasterSyncAutomaticallyAsUser(I)Z
Lcom/android/server/content/ContentService;->getPeriodicSyncs(Landroid/accounts/Account;Ljava/lang/String;Landroid/content/ComponentName;)Ljava/util/List;
Lcom/android/server/content/ContentService;->getSyncAdapterPackagesForAuthorityAsUser(Ljava/lang/String;I)[Ljava/lang/String;
Lcom/android/server/content/ContentService;->getSyncAdapterTypes()[Landroid/content/SyncAdapterType;
Lcom/android/server/content/ContentService;->getSyncAdapterTypesAsUser(I)[Landroid/content/SyncAdapterType;
Lcom/android/server/content/ContentService;->getSyncAutomatically(Landroid/accounts/Account;Ljava/lang/String;)Z
Lcom/android/server/content/ContentService;->getSyncAutomaticallyAsUser(Landroid/accounts/Account;Ljava/lang/String;I)Z
Lcom/android/server/content/ContentService;->getSyncStatus(Landroid/accounts/Account;Ljava/lang/String;Landroid/content/ComponentName;)Landroid/content/SyncStatusInfo;
Lcom/android/server/content/ContentService;->getSyncStatusAsUser(Landroid/accounts/Account;Ljava/lang/String;Landroid/content/ComponentName;I)Landroid/content/SyncStatusInfo;
Lcom/android/server/content/ContentService;->isSyncActive(Landroid/accounts/Account;Ljava/lang/String;Landroid/content/ComponentName;)Z
Lcom/android/server/content/ContentService;->isSyncPending(Landroid/accounts/Account;Ljava/lang/String;Landroid/content/ComponentName;)Z
Lcom/android/server/content/ContentService;->isSyncPendingAsUser(Landroid/accounts/Account;Ljava/lang/String;Landroid/content/ComponentName;I)Z
Lcom/android/server/content/ContentService;->putCache(Ljava/lang/String;Landroid/net/Uri;Landroid/os/Bundle;I)V
Lcom/android/server/content/ContentService;->registerContentObserver(Landroid/net/Uri;ZLandroid/database/IContentObserver;I)V
Lcom/android/server/content/ContentService;->removePeriodicSync(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;)V
Lcom/android/server/content/ContentService;->setIsSyncable(Landroid/accounts/Account;Ljava/lang/String;I)V
Lcom/android/server/content/ContentService;->setMasterSyncAutomatically(Z)V
Lcom/android/server/content/ContentService;->setMasterSyncAutomaticallyAsUser(ZI)V
Lcom/android/server/content/ContentService;->setSyncAutomatically(Landroid/accounts/Account;Ljava/lang/String;Z)V
Lcom/android/server/content/ContentService;->setSyncAutomaticallyAsUser(Landroid/accounts/Account;Ljava/lang/String;ZI)V
Lcom/android/server/content/ContentService;->sync(Landroid/content/SyncRequest;)V
Lcom/android/server/content/ContentService;->syncAsUser(Landroid/content/SyncRequest;I)V
Lcom/android/server/DeviceIdleController$BinderService;->addPowerSaveTempWhitelistApp(Ljava/lang/String;JILjava/lang/String;)V
Lcom/android/server/DeviceIdleController$BinderService;->addPowerSaveTempWhitelistAppForMms(Ljava/lang/String;ILjava/lang/String;)J
Lcom/android/server/DeviceIdleController$BinderService;->addPowerSaveTempWhitelistAppForSms(Ljava/lang/String;ILjava/lang/String;)J
Lcom/android/server/DeviceIdleController$BinderService;->addPowerSaveWhitelistApp(Ljava/lang/String;)V
Lcom/android/server/DeviceIdleController$BinderService;->exitIdle(Ljava/lang/String;)V
Lcom/android/server/DeviceIdleController$BinderService;->removePowerSaveWhitelistApp(Ljava/lang/String;)V
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->addCrossProfileIntentFilter(Landroid/content/ComponentName;Landroid/content/IntentFilter;I)V
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->addCrossProfileWidgetProvider(Landroid/content/ComponentName;Ljava/lang/String;)Z
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->addPersistentPreferredActivity(Landroid/content/ComponentName;Landroid/content/IntentFilter;Landroid/content/ComponentName;)V
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->approveCaCert(Ljava/lang/String;IZ)Z
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->choosePrivateKeyAlias(ILandroid/net/Uri;Ljava/lang/String;Landroid/os/IBinder;)V
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->clearCrossProfileIntentFilters(Landroid/content/ComponentName;)V
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->clearDeviceOwner(Ljava/lang/String;)V
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->clearPackagePersistentPreferredActivities(Landroid/content/ComponentName;Ljava/lang/String;)V
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->clearProfileOwner(Landroid/content/ComponentName;)V
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->createAndManageUser(Landroid/content/ComponentName;Ljava/lang/String;Landroid/content/ComponentName;Landroid/os/PersistableBundle;I)Landroid/os/UserHandle;
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->enableSystemApp(Landroid/content/ComponentName;Ljava/lang/String;)V
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->enableSystemAppWithIntent(Landroid/content/ComponentName;Landroid/content/Intent;)I
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->enforceCanManageCaCerts(Landroid/content/ComponentName;)V
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->forceRemoveActiveAdmin(Landroid/content/ComponentName;I)V
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getAccountTypesWithManagementDisabled()[Ljava/lang/String;
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getAccountTypesWithManagementDisabledAsUser(I)[Ljava/lang/String;
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getActiveAdmins(I)Ljava/util/List;
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getAlwaysOnVpnPackage(Landroid/content/ComponentName;)Ljava/lang/String;
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getApplicationRestrictions(Landroid/content/ComponentName;Ljava/lang/String;)Landroid/os/Bundle;
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getApplicationRestrictionsManagingPackage(Landroid/content/ComponentName;)Ljava/lang/String;
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getAutoTimeRequired()Z
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getBluetoothContactSharingDisabled(Landroid/content/ComponentName;)Z
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getBluetoothContactSharingDisabledForUser(I)Z
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getCameraDisabled(Landroid/content/ComponentName;I)Z
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getCertInstallerPackage(Landroid/content/ComponentName;)Ljava/lang/String;
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getCrossProfileCallerIdDisabled(Landroid/content/ComponentName;)Z
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getCrossProfileCallerIdDisabledForUser(I)Z
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getCrossProfileContactsSearchDisabled(Landroid/content/ComponentName;)Z
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getCrossProfileContactsSearchDisabledForUser(I)Z
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getCrossProfileWidgetProviders(Landroid/content/ComponentName;)Ljava/util/List;
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getCurrentFailedPasswordAttempts(IZ)I
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getDeviceOwnerComponent(Z)Landroid/content/ComponentName;
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getDeviceOwnerName()Ljava/lang/String;
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getDeviceOwnerUserId()I
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getDoNotAskCredentialsOnBoot()Z
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getForceEphemeralUsers(Landroid/content/ComponentName;)Z
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getGlobalProxyAdmin(I)Landroid/content/ComponentName;
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getKeepUninstalledPackages(Landroid/content/ComponentName;)Ljava/util/List;
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getKeyguardDisabledFeatures(Landroid/content/ComponentName;IZ)I
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getLockTaskPackages(Landroid/content/ComponentName;)[Ljava/lang/String;
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getLongSupportMessage(Landroid/content/ComponentName;)Ljava/lang/CharSequence;
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getLongSupportMessageForUser(Landroid/content/ComponentName;I)Ljava/lang/CharSequence;
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getMaximumFailedPasswordsForWipe(Landroid/content/ComponentName;IZ)I
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getMaximumTimeToLock(Landroid/content/ComponentName;IZ)J
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getMaximumTimeToLockForUserAndProfiles(I)J
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getOrganizationColor(Landroid/content/ComponentName;)I
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getOrganizationColorForUser(I)I
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getOrganizationName(Landroid/content/ComponentName;)Ljava/lang/CharSequence;
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getOrganizationNameForUser(I)Ljava/lang/CharSequence;
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getPasswordExpiration(Landroid/content/ComponentName;IZ)J
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getPasswordExpirationTimeout(Landroid/content/ComponentName;IZ)J
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getPasswordHistoryLength(Landroid/content/ComponentName;IZ)I
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getPasswordMinimumLength(Landroid/content/ComponentName;IZ)I
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getPasswordMinimumLetters(Landroid/content/ComponentName;IZ)I
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getPasswordMinimumLowerCase(Landroid/content/ComponentName;IZ)I
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getPasswordMinimumNonLetter(Landroid/content/ComponentName;IZ)I
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getPasswordMinimumNumeric(Landroid/content/ComponentName;IZ)I
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getPasswordMinimumSymbols(Landroid/content/ComponentName;IZ)I
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getPasswordMinimumUpperCase(Landroid/content/ComponentName;IZ)I
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getPasswordQuality(Landroid/content/ComponentName;IZ)I
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getPermissionGrantState(Landroid/content/ComponentName;Ljava/lang/String;Ljava/lang/String;)I
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getPermissionPolicy(Landroid/content/ComponentName;)I
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getPermittedAccessibilityServices(Landroid/content/ComponentName;)Ljava/util/List;
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getPermittedAccessibilityServicesForUser(I)Ljava/util/List;
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getPermittedInputMethods(Landroid/content/ComponentName;)Ljava/util/List;
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getPermittedInputMethodsForCurrentUser()Ljava/util/List;
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getProfileOwnerName(I)Ljava/lang/String;
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getProfileWithMinimumFailedPasswordsForWipe(IZ)I
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getRemoveWarning(Landroid/content/ComponentName;Landroid/os/RemoteCallback;I)V
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getRequiredStrongAuthTimeout(Landroid/content/ComponentName;IZ)J
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getRestrictionsProvider(I)Landroid/content/ComponentName;
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getScreenCaptureDisabled(Landroid/content/ComponentName;I)Z
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getShortSupportMessage(Landroid/content/ComponentName;)Ljava/lang/CharSequence;
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getShortSupportMessageForUser(Landroid/content/ComponentName;I)Ljava/lang/CharSequence;
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getStorageEncryption(Landroid/content/ComponentName;I)Z
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getStorageEncryptionStatus(Ljava/lang/String;I)I
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getTrustAgentConfiguration(Landroid/content/ComponentName;Landroid/content/ComponentName;IZ)Ljava/util/List;
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getUserProvisioningState()I
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getUserRestrictions(Landroid/content/ComponentName;)Landroid/os/Bundle;
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getWifiMacAddress(Landroid/content/ComponentName;)Ljava/lang/String;
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->hasGrantedPolicy(Landroid/content/ComponentName;II)Z
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->hasUserSetupCompleted()Z
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->installCaCert(Landroid/content/ComponentName;[B)Z
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->installKeyPair(Landroid/content/ComponentName;[B[B[BLjava/lang/String;Z)Z
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->isAccessibilityServicePermittedByAdmin(Landroid/content/ComponentName;Ljava/lang/String;I)Z
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->isActivePasswordSufficient(IZ)Z
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->isAdminActive(Landroid/content/ComponentName;I)Z
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->isAffiliatedUser()Z
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->isApplicationHidden(Landroid/content/ComponentName;Ljava/lang/String;)Z
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->isBackupServiceEnabled(Landroid/content/ComponentName;)Z
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->isCaCertApproved(Ljava/lang/String;I)Z
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->isCallerApplicationRestrictionsManagingPackage()Z
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->isDeviceProvisioningConfigApplied()Z
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->isInputMethodPermittedByAdmin(Landroid/content/ComponentName;Ljava/lang/String;I)Z
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->isLockTaskPermitted(Ljava/lang/String;)Z
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->isManagedProfile(Landroid/content/ComponentName;)Z
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->isMasterVolumeMuted(Landroid/content/ComponentName;)Z
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->isPackageSuspended(Landroid/content/ComponentName;Ljava/lang/String;)Z
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->isProfileActivePasswordSufficientForParent(I)Z
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->isProvisioningAllowed(Ljava/lang/String;)Z
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->isRemovingAdmin(Landroid/content/ComponentName;I)Z
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->isSecurityLoggingEnabled(Landroid/content/ComponentName;)Z
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->isSystemOnlyUser(Landroid/content/ComponentName;)Z
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->isUninstallBlocked(Landroid/content/ComponentName;Ljava/lang/String;)Z
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->isUninstallInQueue(Ljava/lang/String;)Z
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->lockNow(Z)V
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->notifyLockTaskModeChanged(ZLjava/lang/String;I)V
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->notifyPendingSystemUpdate(J)V
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->packageHasActiveAdmins(Ljava/lang/String;I)Z
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->reboot(Landroid/content/ComponentName;)V
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->removeActiveAdmin(Landroid/content/ComponentName;I)V
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->removeCrossProfileWidgetProvider(Landroid/content/ComponentName;Ljava/lang/String;)Z
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->removeKeyPair(Landroid/content/ComponentName;Ljava/lang/String;)Z
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->removeUser(Landroid/content/ComponentName;Landroid/os/UserHandle;)Z
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->reportFailedFingerprIAttempt(I)V
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->reportFailedPasswordAttempt(I)V
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->reportKeyguardDismissed(I)V
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->reportKeyguardSecured(I)V
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->reportSuccessfulFingerprIAttempt(I)V
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->reportSuccessfulPasswordAttempt(I)V
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->requestBugreport(Landroid/content/ComponentName;)Z
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->resetPassword(Ljava/lang/String;I)Z
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->retrievePreRebootSecurityLogs(Landroid/content/ComponentName;)Landroid/content/pm/ParceledListSlice;
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->retrieveSecurityLogs(Landroid/content/ComponentName;)Landroid/content/pm/ParceledListSlice;
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setAccountManagementDisabled(Landroid/content/ComponentName;Ljava/lang/String;Z)V
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setActiveAdmin(Landroid/content/ComponentName;ZI)V
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setActivePasswordState(IIIIIIIII)V
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setAffiliationIds(Landroid/content/ComponentName;Ljava/util/List;)V
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setAlwaysOnVpnPackage(Landroid/content/ComponentName;Ljava/lang/String;Z)Z
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setApplicationHidden(Landroid/content/ComponentName;Ljava/lang/String;Z)Z
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setApplicationRestrictions(Landroid/content/ComponentName;Ljava/lang/String;Landroid/os/Bundle;)V
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setApplicationRestrictionsManagingPackage(Landroid/content/ComponentName;Ljava/lang/String;)Z
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setAutoTimeRequired(Landroid/content/ComponentName;Z)V
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setBackupServiceEnabled(Landroid/content/ComponentName;Z)V
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setBluetoothContactSharingDisabled(Landroid/content/ComponentName;Z)V
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setCameraDisabled(Landroid/content/ComponentName;Z)V
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setCertInstallerPackage(Landroid/content/ComponentName;Ljava/lang/String;)V
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setCrossProfileCallerIdDisabled(Landroid/content/ComponentName;Z)V
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setCrossProfileContactsSearchDisabled(Landroid/content/ComponentName;Z)V
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setDeviceOwner(Landroid/content/ComponentName;Ljava/lang/String;I)Z
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setDeviceOwnerLockScreenInfo(Landroid/content/ComponentName;Ljava/lang/CharSequence;)V
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setDeviceProvisioningConfigApplied()V
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setForceEphemeralUsers(Landroid/content/ComponentName;Z)V
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setGlobalProxy(Landroid/content/ComponentName;Ljava/lang/String;Ljava/lang/String;)Landroid/content/ComponentName;
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setGlobalSetting(Landroid/content/ComponentName;Ljava/lang/String;Ljava/lang/String;)V
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setKeepUninstalledPackages(Landroid/content/ComponentName;Ljava/util/List;)V
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setKeyguardDisabled(Landroid/content/ComponentName;Z)Z
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setKeyguardDisabledFeatures(Landroid/content/ComponentName;IZ)V
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setLockTaskPackages(Landroid/content/ComponentName;L[java/lang/String;)V
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setLongSupportMessage(Landroid/content/ComponentName;Ljava/lang/CharSequence;)V
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setMasterVolumeMuted(Landroid/content/ComponentName;Z)V
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setMaximumFailedPasswordsForWipe(Landroid/content/ComponentName;IZ)V
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setMaximumTimeToLock(Landroid/content/ComponentName;JZ)V
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setOrganizationColor(Landroid/content/ComponentName;I)V
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setOrganizationColorForUser(II)V
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setOrganizationName(Landroid/content/ComponentName;Ljava/lang/CharSequence;)V
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setPackagesSuspended(Landroid/content/ComponentName;L[java/lang/String;Z)[Ljava/lang/String;
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setPasswordExpirationTimeout(Landroid/content/ComponentName;JZ)V
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setPasswordHistoryLength(Landroid/content/ComponentName;IZ)V
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setPasswordMinimumLength(Landroid/content/ComponentName;IZ)V
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setPasswordMinimumLetters(Landroid/content/ComponentName;IZ)V
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setPasswordMinimumLowerCase(Landroid/content/ComponentName;IZ)V
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setPasswordMinimumNonLetter(Landroid/content/ComponentName;IZ)V
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setPasswordMinimumNumeric(Landroid/content/ComponentName;IZ)V
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setPasswordMinimumSymbols(Landroid/content/ComponentName;IZ)V
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setPasswordMinimumUpperCase(Landroid/content/ComponentName;IZ)V
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setPasswordQuality(Landroid/content/ComponentName;IZ)V
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setPermissionGrantState(Landroid/content/ComponentName;Ljava/lang/String;Ljava/lang/String;I)Z
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setPermissionPolicy(Landroid/content/ComponentName;I)V
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setPermittedAccessibilityServices(Landroid/content/ComponentName;Ljava/util/List;)Z
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setPermittedInputMethods(Landroid/content/ComponentName;Ljava/util/List;)Z
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setProfileEnabled(Landroid/content/ComponentName;)V
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setProfileName(Landroid/content/ComponentName;Ljava/lang/String;)V
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setProfileOwner(Landroid/content/ComponentName;Ljava/lang/String;I)Z
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setRecommendedGlobalProxy(Landroid/content/ComponentName;Landroid/net/ProxyInfo;)V
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setRequiredStrongAuthTimeout(Landroid/content/ComponentName;JZ)V
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setRestrictionsProvider(Landroid/content/ComponentName;Landroid/content/ComponentName;)V
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setScreenCaptureDisabled(Landroid/content/ComponentName;Z)V
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setSecureSetting(Landroid/content/ComponentName;Ljava/lang/String;Ljava/lang/String;)V
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setSecurityLoggingEnabled(Landroid/content/ComponentName;Z)V
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setShortSupportMessage(Landroid/content/ComponentName;Ljava/lang/CharSequence;)V
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setStatusBarDisabled(Landroid/content/ComponentName;Z)Z
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setStorageEncryption(Landroid/content/ComponentName;Z)I
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setSystemUpdatePolicy(Landroid/content/ComponentName;Landroid/app/admin/SystemUpdatePolicy;)V
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setTrustAgentConfiguration(Landroid/content/ComponentName;Landroid/content/ComponentName;Landroid/os/PersistableBundle;Z)V
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setUninstallBlocked(Landroid/content/ComponentName;Ljava/lang/String;Z)V
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setUserIcon(Landroid/content/ComponentName;Landroid/graphics/Bitmap;)V
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setUserProvisioningState(II)V
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setUserRestriction(Landroid/content/ComponentName;Ljava/lang/String;Z)V
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->switchUser(Landroid/content/ComponentName;Landroid/os/UserHandle;)Z
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->uninstallCaCerts(Landroid/content/ComponentName;L[java/lang/String;)V
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->uninstallPackageWithActiveAdmins(Ljava/lang/String;)V
Lcom/android/server/devicepolicy/DevicePolicyManagerService;->wipeData(I)V
Lcom/android/server/display/DisplayManagerService$BinderService;->connectWifiDisplay(Ljava/lang/String;)V
Lcom/android/server/display/DisplayManagerService$BinderService;->createVirtualDisplay(Landroid/hardware/display/IVirtualDisplayCallback;Landroid/media/projection/IMediaProjection;Ljava/lang/String;Ljava/lang/String;IIILandroid/view/Surface;I)I
Lcom/android/server/display/DisplayManagerService$BinderService;->forgetWifiDisplay(Ljava/lang/String;)V
Lcom/android/server/display/DisplayManagerService$BinderService;->pauseWifiDisplay()V
Lcom/android/server/display/DisplayManagerService$BinderService;->renameWifiDisplay(Ljava/lang/String;Ljava/lang/String;)V
Lcom/android/server/display/DisplayManagerService$BinderService;->requestColorMode(II)V
Lcom/android/server/display/DisplayManagerService$BinderService;->resumeWifiDisplay()V
Lcom/android/server/display/DisplayManagerService$BinderService;->startWifiDisplayScan()V
Lcom/android/server/display/DisplayManagerService$BinderService;->stopWifiDisplayScan()V
Lcom/android/server/dreams/DreamManagerService$BinderService;->awaken()V
Lcom/android/server/dreams/DreamManagerService$BinderService;->dream()V
Lcom/android/server/dreams/DreamManagerService$BinderService;->getDefaultDreamComponent()Landroid/content/ComponentName;
Lcom/android/server/dreams/DreamManagerService$BinderService;->getDreamComponents()[Landroid/content/ComponentName;
Lcom/android/server/dreams/DreamManagerService$BinderService;->isDreaming()Z
Lcom/android/server/dreams/DreamManagerService$BinderService;->setDreamComponents(L[android/content/ComponentName;)V
Lcom/android/server/dreams/DreamManagerService$BinderService;->testDream(Landroid/content/ComponentName;)V
Lcom/android/server/ethernet/EthernetServiceImpl;->addListener(Landroid/net/IEthernetServiceListener;)V
Lcom/android/server/ethernet/EthernetServiceImpl;->getConfiguration()Landroid/net/IpConfiguration;
Lcom/android/server/ethernet/EthernetServiceImpl;->isAvailable()Z
Lcom/android/server/ethernet/EthernetServiceImpl;->removeListener(Landroid/net/IEthernetServiceListener;)V
Lcom/android/server/ethernet/EthernetServiceImpl;->setConfiguration(Landroid/net/IpConfiguration;)V
Lcom/android/server/fingerprI/FingerprIService$FingerprIServiceWrapper;->authenticate(Landroid/os/IBinder;JILandroid/hardware/fingerprI/IFingerprIServiceReceiver;ILjava/lang/String;)V
Lcom/android/server/fingerprI/FingerprIService$FingerprIServiceWrapper;->cancelAuthentication(Landroid/os/IBinder;Ljava/lang/String;)V
Lcom/android/server/fingerprI/FingerprIService$FingerprIServiceWrapper;->cancelEnrollment(Landroid/os/IBinder;)V
Lcom/android/server/fingerprI/FingerprIService$FingerprIServiceWrapper;->enroll(Landroid/os/IBinder;[BILandroid/hardware/fingerprI/IFingerprIServiceReceiver;ILjava/lang/String;)V
Lcom/android/server/fingerprI/FingerprIService$FingerprIServiceWrapper;->getEnrolledFingerprIs(ILjava/lang/String;)Ljava/util/List;
Lcom/android/server/fingerprI/FingerprIService$FingerprIServiceWrapper;->hasEnrolledFingerprIs(ILjava/lang/String;)Z
Lcom/android/server/fingerprI/FingerprIService$FingerprIServiceWrapper;->isHardwareDetected(JLjava/lang/String;)Z
Lcom/android/server/fingerprI/FingerprIService$FingerprIServiceWrapper;->postEnroll(Landroid/os/IBinder;)I
Lcom/android/server/fingerprI/FingerprIService$FingerprIServiceWrapper;->preEnroll(Landroid/os/IBinder;)J
Lcom/android/server/fingerprI/FingerprIService$FingerprIServiceWrapper;->remove(Landroid/os/IBinder;IIILandroid/hardware/fingerprI/IFingerprIServiceReceiver;)V
Lcom/android/server/fingerprI/FingerprIService$FingerprIServiceWrapper;->rename(IILjava/lang/String;)V
Lcom/android/server/fingerprI/FingerprIService$FingerprIServiceWrapper;->resetTimeout([B)V
Lcom/android/server/fingerprI/FingerprIService$FingerprIServiceWrapper;->setActiveUser(I)V
Lcom/android/server/hdmi/HdmiControlService$BinderService;->addDeviceEventListener(Landroid/hardware/hdmi/IHdmiDeviceEventListener;)V
Lcom/android/server/hdmi/HdmiControlService$BinderService;->addHdmiMhlVendorCommandListener(Landroid/hardware/hdmi/IHdmiMhlVendorCommandListener;)V
Lcom/android/server/hdmi/HdmiControlService$BinderService;->addHotplugEventListener(Landroid/hardware/hdmi/IHdmiHotplugEventListener;)V
Lcom/android/server/hdmi/HdmiControlService$BinderService;->addSystemAudioModeChangeListener(Landroid/hardware/hdmi/IHdmiSystemAudioModeChangeListener;)V
Lcom/android/server/hdmi/HdmiControlService$BinderService;->addVendorCommandListener(Landroid/hardware/hdmi/IHdmiVendorCommandListener;I)V
Lcom/android/server/hdmi/HdmiControlService$BinderService;->canChangeSystemAudioMode()Z
Lcom/android/server/hdmi/HdmiControlService$BinderService;->clearTimerRecording(II[B)V
Lcom/android/server/hdmi/HdmiControlService$BinderService;->deviceSelect(ILandroid/hardware/hdmi/IHdmiControlCallback;)V
Lcom/android/server/hdmi/HdmiControlService$BinderService;->getActiveSource()Landroid/hardware/hdmi/HdmiDeviceInfo;
Lcom/android/server/hdmi/HdmiControlService$BinderService;->getDeviceList()Ljava/util/List;
Lcom/android/server/hdmi/HdmiControlService$BinderService;->getInputDevices()Ljava/util/List;
Lcom/android/server/hdmi/HdmiControlService$BinderService;->getPortInfo()Ljava/util/List;
Lcom/android/server/hdmi/HdmiControlService$BinderService;->getSupportedTypes()[I
Lcom/android/server/hdmi/HdmiControlService$BinderService;->getSystemAudioMode()Z
Lcom/android/server/hdmi/HdmiControlService$BinderService;->oneTouchPlay(Landroid/hardware/hdmi/IHdmiControlCallback;)V
Lcom/android/server/hdmi/HdmiControlService$BinderService;->portSelect(ILandroid/hardware/hdmi/IHdmiControlCallback;)V
Lcom/android/server/hdmi/HdmiControlService$BinderService;->queryDisplayStatus(Landroid/hardware/hdmi/IHdmiControlCallback;)V
Lcom/android/server/hdmi/HdmiControlService$BinderService;->removeHotplugEventListener(Landroid/hardware/hdmi/IHdmiHotplugEventListener;)V
Lcom/android/server/hdmi/HdmiControlService$BinderService;->removeSystemAudioModeChangeListener(Landroid/hardware/hdmi/IHdmiSystemAudioModeChangeListener;)V
Lcom/android/server/hdmi/HdmiControlService$BinderService;->sendKeyEvent(IIZ)V
Lcom/android/server/hdmi/HdmiControlService$BinderService;->sendMhlVendorCommand(III[B)V
Lcom/android/server/hdmi/HdmiControlService$BinderService;->sendStandby(II)V
Lcom/android/server/hdmi/HdmiControlService$BinderService;->sendVendorCommand(II[BZ)V
Lcom/android/server/hdmi/HdmiControlService$BinderService;->setArcMode(Z)V
Lcom/android/server/hdmi/HdmiControlService$BinderService;->setHdmiRecordListener(Landroid/hardware/hdmi/IHdmiRecordListener;)V
Lcom/android/server/hdmi/HdmiControlService$BinderService;->setInputChangeListener(Landroid/hardware/hdmi/IHdmiInputChangeListener;)V
Lcom/android/server/hdmi/HdmiControlService$BinderService;->setProhibitMode(Z)V
Lcom/android/server/hdmi/HdmiControlService$BinderService;->setSystemAudioMode(ZLandroid/hardware/hdmi/IHdmiControlCallback;)V
Lcom/android/server/hdmi/HdmiControlService$BinderService;->setSystemAudioMute(Z)V
Lcom/android/server/hdmi/HdmiControlService$BinderService;->setSystemAudioVolume(III)V
Lcom/android/server/hdmi/HdmiControlService$BinderService;->startOneTouchRecord(I[B)V
Lcom/android/server/hdmi/HdmiControlService$BinderService;->startTimerRecording(II[B)V
Lcom/android/server/hdmi/HdmiControlService$BinderService;->stopOneTouchRecord(I)V
Lcom/android/server/input/InputManagerService;->addKeyboardLayoutForInputDevice(Landroid/hardware/input/InputDeviceIdentifier;Ljava/lang/String;)V
Lcom/android/server/input/InputManagerService;->isInTabletMode()I
Lcom/android/server/input/InputManagerService;->registerTabletModeChangedListener(Landroid/hardware/input/ITabletModeChangedListener;)V
Lcom/android/server/input/InputManagerService;->removeKeyboardLayoutForInputDevice(Landroid/hardware/input/InputDeviceIdentifier;Ljava/lang/String;)V
Lcom/android/server/input/InputManagerService;->setCurrentKeyboardLayoutForInputDevice(Landroid/hardware/input/InputDeviceIdentifier;Ljava/lang/String;)V
Lcom/android/server/input/InputManagerService;->setKeyboardLayoutForInputDevice(Landroid/hardware/input/InputDeviceIdentifier;Landroid/view/inputmethod/InputMethodInfo;Landroid/view/inputmethod/InputMethodSubtype;Ljava/lang/String;)V
Lcom/android/server/input/InputManagerService;->setTouchCalibrationForInputDevice(Ljava/lang/String;ILandroid/hardware/input/TouchCalibration;)V
Lcom/android/server/input/InputManagerService;->tryPoIerSpeed(I)V
Lcom/android/server/InputMethodManagerService;->addClient(Lcom/android/Iernal/view/IInputMethodClient;Lcom/android/Iernal/view/IInputContext;II)V
Lcom/android/server/InputMethodManagerService;->clearLastInputMethodWindowForTransition(Landroid/os/IBinder;)V
Lcom/android/server/InputMethodManagerService;->createInputContentUriToken(Landroid/os/IBinder;Landroid/net/Uri;Ljava/lang/String;)Lcom/android/Iernal/inputmethod/IInputContentUriToken;
Lcom/android/server/InputMethodManagerService;->getCurrentInputMethodSubtype()Landroid/view/inputmethod/InputMethodSubtype;
Lcom/android/server/InputMethodManagerService;->getEnabledInputMethodList()Ljava/util/List;
Lcom/android/server/InputMethodManagerService;->getEnabledInputMethodSubtypeList(Ljava/lang/String;Z)Ljava/util/List;
Lcom/android/server/InputMethodManagerService;->getInputMethodList()Ljava/util/List;
Lcom/android/server/InputMethodManagerService;->getLastInputMethodSubtype()Landroid/view/inputmethod/InputMethodSubtype;
Lcom/android/server/InputMethodManagerService;->hideMySoftInput(Landroid/os/IBinder;I)V
Lcom/android/server/InputMethodManagerService;->hideSoftInput(Lcom/android/Iernal/view/IInputMethodClient;ILandroid/os/ResultReceiver;)Z
Lcom/android/server/InputMethodManagerService;->notifySuggestionPicked(Landroid/text/style/SuggestionSpan;Ljava/lang/String;I)Z
Lcom/android/server/InputMethodManagerService;->registerSuggestionSpansForNotification(L[android/text/style/SuggestionSpan;)V
Lcom/android/server/InputMethodManagerService;->removeClient(Lcom/android/Iernal/view/IInputMethodClient;)V
Lcom/android/server/InputMethodManagerService;->setAdditionalInputMethodSubtypes(Ljava/lang/String;L[android/view/inputmethod/InputMethodSubtype;)V
Lcom/android/server/InputMethodManagerService;->setCurrentInputMethodSubtype(Landroid/view/inputmethod/InputMethodSubtype;)Z
Lcom/android/server/InputMethodManagerService;->setInputMethod(Landroid/os/IBinder;Ljava/lang/String;)V
Lcom/android/server/InputMethodManagerService;->setInputMethodAndSubtype(Landroid/os/IBinder;Ljava/lang/String;Landroid/view/inputmethod/InputMethodSubtype;)V
Lcom/android/server/InputMethodManagerService;->setInputMethodEnabled(Ljava/lang/String;Z)Z
Lcom/android/server/InputMethodManagerService;->shouldOfferSwitchingToNextInputMethod(Landroid/os/IBinder;)Z
Lcom/android/server/InputMethodManagerService;->showInputMethodAndSubtypeEnablerFromClient(Lcom/android/Iernal/view/IInputMethodClient;Ljava/lang/String;)V
Lcom/android/server/InputMethodManagerService;->showInputMethodPickerFromClient(Lcom/android/Iernal/view/IInputMethodClient;I)V
Lcom/android/server/InputMethodManagerService;->showMySoftInput(Landroid/os/IBinder;I)V
Lcom/android/server/InputMethodManagerService;->showSoftInput(Lcom/android/Iernal/view/IInputMethodClient;ILandroid/os/ResultReceiver;)Z
Lcom/android/server/InputMethodManagerService;->startInputOrWindowGainedFocus(ILcom/android/Iernal/view/IInputMethodClient;Landroid/os/IBinder;IIILandroid/view/inputmethod/EditorInfo;Lcom/android/Iernal/view/IInputContext;I)Lcom/android/Iernal/view/InputBindResult;
Lcom/android/server/InputMethodManagerService;->switchToLastInputMethod(Landroid/os/IBinder;)Z
Lcom/android/server/InputMethodManagerService;->switchToNextInputMethod(Landroid/os/IBinder;Z)Z
Lcom/android/server/job/JobSchedulerService$JobSchedulerStub;->schedule(Landroid/app/job/JobInfo;)I
Lcom/android/server/job/JobSchedulerService$JobSchedulerStub;->scheduleAsPackage(Landroid/app/job/JobInfo;Ljava/lang/String;ILjava/lang/String;)I
Lcom/android/server/LocationManagerService;->addGnssMeasurementsListener(Landroid/location/IGnssMeasurementsListener;Ljava/lang/String;)Z
Lcom/android/server/LocationManagerService;->addGnssNavigationMessageListener(Landroid/location/IGnssNavigationMessageListener;Ljava/lang/String;)Z
Lcom/android/server/LocationManagerService;->getBestProvider(Landroid/location/Criteria;Z)Ljava/lang/String;
Lcom/android/server/LocationManagerService;->getLastLocation(Landroid/location/LocationRequest;Ljava/lang/String;)Landroid/location/Location;
Lcom/android/server/LocationManagerService;->getProviderProperties(Ljava/lang/String;)Lcom/android/Iernal/location/ProviderProperties;
Lcom/android/server/LocationManagerService;->getProviders(Landroid/location/Criteria;Z)Ljava/util/List;
Lcom/android/server/LocationManagerService;->registerGnssStatusCallback(Landroid/location/IGnssStatusListener;Ljava/lang/String;)Z
Lcom/android/server/LocationManagerService;->removeUpdates(Landroid/location/ILocationListener;Landroid/app/PendingIntent;Ljava/lang/String;)V
Lcom/android/server/LocationManagerService;->reportLocation(Landroid/location/Location;Z)V
Lcom/android/server/LocationManagerService;->requestGeofence(Landroid/location/LocationRequest;Landroid/location/Geofence;Landroid/app/PendingIntent;Ljava/lang/String;)V
Lcom/android/server/LocationManagerService;->requestLocationUpdates(Landroid/location/LocationRequest;Landroid/location/ILocationListener;Landroid/app/PendingIntent;Ljava/lang/String;)V
Lcom/android/server/LocationManagerService;->sendExtraCommand(Ljava/lang/String;Ljava/lang/String;Landroid/os/Bundle;)Z
Lcom/android/server/LockSettingsService;->checkPassword(Ljava/lang/String;ILcom/android/Iernal/widget/ICheckCredentialProgressCallback;)Lcom/android/Iernal/widget/VerifyCredentialResponse;
Lcom/android/server/LockSettingsService;->checkPattern(Ljava/lang/String;ILcom/android/Iernal/widget/ICheckCredentialProgressCallback;)Lcom/android/Iernal/widget/VerifyCredentialResponse;
Lcom/android/server/LockSettingsService;->checkVoldPassword(I)Z
Lcom/android/server/LockSettingsService;->getBoolean(Ljava/lang/String;ZI)Z
Lcom/android/server/LockSettingsService;->getLong(Ljava/lang/String;JI)J
Lcom/android/server/LockSettingsService;->getSeparateProfileChallengeEnabled(I)Z
Lcom/android/server/LockSettingsService;->getString(Ljava/lang/String;Ljava/lang/String;I)Ljava/lang/String;
Lcom/android/server/LockSettingsService;->getStrongAuthForUser(I)I
Lcom/android/server/LockSettingsService;->registerStrongAuthTracker(Landroid/app/trust/IStrongAuthTracker;)V
Lcom/android/server/LockSettingsService;->requireStrongAuth(II)V
Lcom/android/server/LockSettingsService;->resetKeyStore(I)V
Lcom/android/server/LockSettingsService;->setBoolean(Ljava/lang/String;ZI)V
Lcom/android/server/LockSettingsService;->setLockPassword(Ljava/lang/String;Ljava/lang/String;I)V
Lcom/android/server/LockSettingsService;->setLockPattern(Ljava/lang/String;Ljava/lang/String;I)V
Lcom/android/server/LockSettingsService;->setLong(Ljava/lang/String;JI)V
Lcom/android/server/LockSettingsService;->setSeparateProfileChallengeEnabled(IZLjava/lang/String;)V
Lcom/android/server/LockSettingsService;->setString(Ljava/lang/String;Ljava/lang/String;I)V
Lcom/android/server/LockSettingsService;->systemReady()V
Lcom/android/server/LockSettingsService;->unregisterStrongAuthTracker(Landroid/app/trust/IStrongAuthTracker;)V
Lcom/android/server/LockSettingsService;->userPresent(I)V
Lcom/android/server/LockSettingsService;->verifyPassword(Ljava/lang/String;JI)Lcom/android/Iernal/widget/VerifyCredentialResponse;
Lcom/android/server/LockSettingsService;->verifyPattern(Ljava/lang/String;JI)Lcom/android/Iernal/widget/VerifyCredentialResponse;
Lcom/android/server/LockSettingsService;->verifyTiedProfileChallenge(Ljava/lang/String;ZJI)Lcom/android/Iernal/widget/VerifyCredentialResponse;
Lcom/android/server/media/MediaRouterService;->registerClientAsUser(Landroid/media/IMediaRouterClient;Ljava/lang/String;I)V
Lcom/android/server/media/MediaSessionRecord$SessionStub;->setFlags(I)V
Lcom/android/server/media/projection/MediaProjectionManagerService$BinderService;->addCallback(Landroid/media/projection/IMediaProjectionWatcherCallback;)V
Lcom/android/server/media/projection/MediaProjectionManagerService$BinderService;->createProjection(ILjava/lang/String;IZ)Landroid/media/projection/IMediaProjection;
Lcom/android/server/media/projection/MediaProjectionManagerService$BinderService;->getActiveProjectionInfo()Landroid/media/projection/MediaProjectionInfo;
Lcom/android/server/media/projection/MediaProjectionManagerService$BinderService;->removeCallback(Landroid/media/projection/IMediaProjectionWatcherCallback;)V
Lcom/android/server/media/projection/MediaProjectionManagerService$BinderService;->stopActiveProjection()V
Lcom/android/server/MmsServiceBroker$BinderService;->downloadMessage(ILjava/lang/String;Ljava/lang/String;Landroid/net/Uri;Landroid/os/Bundle;Landroid/app/PendingIntent;)V
Lcom/android/server/MmsServiceBroker$BinderService;->sendMessage(ILjava/lang/String;Landroid/net/Uri;Ljava/lang/String;Landroid/os/Bundle;Landroid/app/PendingIntent;)V
Lcom/android/server/MountService;->addUserKeyAuth(II[B[B)V
Lcom/android/server/MountService;->benchmark(Ljava/lang/String;)J
Lcom/android/server/MountService;->changeEncryptionPassword(ILjava/lang/String;)I
Lcom/android/server/MountService;->clearPassword()V
Lcom/android/server/MountService;->createSecureContainer(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;IZ)I
Lcom/android/server/MountService;->createUserKey(IIZ)V
Lcom/android/server/MountService;->decryptStorage(Ljava/lang/String;)I
Lcom/android/server/MountService;->destroySecureContainer(Ljava/lang/String;Z)I
Lcom/android/server/MountService;->destroyUserKey(I)V
Lcom/android/server/MountService;->destroyUserStorage(Ljava/lang/String;II)V
Lcom/android/server/MountService;->encryptStorage(ILjava/lang/String;)I
Lcom/android/server/MountService;->finalizeSecureContainer(Ljava/lang/String;)I
Lcom/android/server/MountService;->fixateNewestUserKeyAuth(I)V
Lcom/android/server/MountService;->fixPermissionsSecureContainer(Ljava/lang/String;ILjava/lang/String;)I
Lcom/android/server/MountService;->forgetAllVolumes()V
Lcom/android/server/MountService;->forgetVolume(Ljava/lang/String;)V
Lcom/android/server/MountService;->format(Ljava/lang/String;)V
Lcom/android/server/MountService;->formatVolume(Ljava/lang/String;)I
Lcom/android/server/MountService;->getEncryptionState()I
Lcom/android/server/MountService;->getField(Ljava/lang/String;)Ljava/lang/String;
Lcom/android/server/MountService;->getPassword()Ljava/lang/String;
Lcom/android/server/MountService;->getPasswordType()I
Lcom/android/server/MountService;->getPrimaryStorageUuid()Ljava/lang/String;
Lcom/android/server/MountService;->getSecureContainerFilesystemPath(Ljava/lang/String;)Ljava/lang/String;
Lcom/android/server/MountService;->getSecureContainerList()[Ljava/lang/String;
Lcom/android/server/MountService;->getSecureContainerPath(Ljava/lang/String;)Ljava/lang/String;
Lcom/android/server/MountService;->getStorageUsers(Ljava/lang/String;)[I
Lcom/android/server/MountService;->isConvertibleToFBE()Z
Lcom/android/server/MountService;->isSecureContainerMounted(Ljava/lang/String;)Z
Lcom/android/server/MountService;->lockUserKey(I)V
Lcom/android/server/MountService;->mount(Ljava/lang/String;)V
Lcom/android/server/MountService;->mountSecureContainer(Ljava/lang/String;Ljava/lang/String;IZ)I
Lcom/android/server/MountService;->mountVolume(Ljava/lang/String;)I
Lcom/android/server/MountService;->partitionMixed(Ljava/lang/String;I)V
Lcom/android/server/MountService;->partitionPrivate(Ljava/lang/String;)V
Lcom/android/server/MountService;->partitionPublic(Ljava/lang/String;)V
Lcom/android/server/MountService;->prepareUserStorage(Ljava/lang/String;III)V
Lcom/android/server/MountService;->renameSecureContainer(Ljava/lang/String;Ljava/lang/String;)I
Lcom/android/server/MountService;->resizeSecureContainer(Ljava/lang/String;ILjava/lang/String;)I
Lcom/android/server/MountService;->runMaIenance()V
Lcom/android/server/MountService;->setDebugFlags(II)V
Lcom/android/server/MountService;->setField(Ljava/lang/String;Ljava/lang/String;)V
Lcom/android/server/MountService;->setPrimaryStorageUuid(Ljava/lang/String;Landroid/content/pm/IPackageMoveObserver;)V
Lcom/android/server/MountService;->setVolumeNickname(Ljava/lang/String;Ljava/lang/String;)V
Lcom/android/server/MountService;->setVolumeUserFlags(Ljava/lang/String;II)V
Lcom/android/server/MountService;->shutdown(Landroid/os/storage/IMountShutdownObserver;)V
Lcom/android/server/MountService;->unlockUserKey(II[B[B)V
Lcom/android/server/MountService;->unmount(Ljava/lang/String;)V
Lcom/android/server/MountService;->unmountSecureContainer(Ljava/lang/String;Z)I
Lcom/android/server/MountService;->unmountVolume(Ljava/lang/String;ZZ)V
Lcom/android/server/MountService;->verifyEncryptionPassword(Ljava/lang/String;)I
Lcom/android/server/net/NetworkPolicyManagerService;->addRestrictBackgroundWhitelistedUid(I)V
Lcom/android/server/net/NetworkPolicyManagerService;->addUidPolicy(II)V
Lcom/android/server/net/NetworkPolicyManagerService;->factoryReset(Ljava/lang/String;)V
Lcom/android/server/net/NetworkPolicyManagerService;->getNetworkPolicies(Ljava/lang/String;)[Landroid/net/NetworkPolicy;
Lcom/android/server/net/NetworkPolicyManagerService;->getNetworkQuotaInfo(Landroid/net/NetworkState;)Landroid/net/NetworkQuotaInfo;
Lcom/android/server/net/NetworkPolicyManagerService;->getRestrictBackground()Z
Lcom/android/server/net/NetworkPolicyManagerService;->getRestrictBackgroundByCaller()I
Lcom/android/server/net/NetworkPolicyManagerService;->getRestrictBackgroundWhitelistedUids()[I
Lcom/android/server/net/NetworkPolicyManagerService;->getUidPolicy(I)I
Lcom/android/server/net/NetworkPolicyManagerService;->getUidsWithPolicy(I)[I
Lcom/android/server/net/NetworkPolicyManagerService;->isUidForeground(I)Z
Lcom/android/server/net/NetworkPolicyManagerService;->onTetheringChanged(Ljava/lang/String;Z)V
Lcom/android/server/net/NetworkPolicyManagerService;->registerListener(Landroid/net/INetworkPolicyListener;)V
Lcom/android/server/net/NetworkPolicyManagerService;->removeRestrictBackgroundWhitelistedUid(I)V
Lcom/android/server/net/NetworkPolicyManagerService;->removeUidPolicy(II)V
Lcom/android/server/net/NetworkPolicyManagerService;->setConnectivityListener(Landroid/net/INetworkPolicyListener;)V
Lcom/android/server/net/NetworkPolicyManagerService;->setDeviceIdleMode(Z)V
Lcom/android/server/net/NetworkPolicyManagerService;->setNetworkPolicies(L[android/net/NetworkPolicy;)V
Lcom/android/server/net/NetworkPolicyManagerService;->setRestrictBackground(Z)V
Lcom/android/server/net/NetworkPolicyManagerService;->setUidPolicy(II)V
Lcom/android/server/net/NetworkPolicyManagerService;->snoozeLimit(Landroid/net/NetworkTemplate;)V
Lcom/android/server/net/NetworkPolicyManagerService;->unregisterListener(Landroid/net/INetworkPolicyListener;)V
Lcom/android/server/net/NetworkStatsService;->advisePersistThreshold(J)V
Lcom/android/server/net/NetworkStatsService;->forceUpdate()V
Lcom/android/server/net/NetworkStatsService;->forceUpdateIfaces()V
Lcom/android/server/net/NetworkStatsService;->getDataLayerSnapshotForUid(I)Landroid/net/NetworkStats;
Lcom/android/server/net/NetworkStatsService;->getNetworkTotalBytes(Landroid/net/NetworkTemplate;JJ)J
Lcom/android/server/net/NetworkStatsService;->incrementOperationCount(III)V
Lcom/android/server/net/NetworkStatsService;->registerUsageCallback(Ljava/lang/String;Landroid/net/DataUsageRequest;Landroid/os/Messenger;Landroid/os/IBinder;)Landroid/net/DataUsageRequest;
Lcom/android/server/net/NetworkStatsService;->setUidForeground(IZ)V
Lcom/android/server/NetworkManagementService;->addIdleTimer(Ljava/lang/String;II)V
Lcom/android/server/NetworkManagementService;->addInterfaceToLocalNetwork(Ljava/lang/String;Ljava/util/List;)V
Lcom/android/server/NetworkManagementService;->addInterfaceToNetwork(Ljava/lang/String;I)V
Lcom/android/server/NetworkManagementService;->addLegacyRouteForNetId(ILandroid/net/RouteInfo;I)V
Lcom/android/server/NetworkManagementService;->addRoute(ILandroid/net/RouteInfo;)V
Lcom/android/server/NetworkManagementService;->addVpnUidRanges(IL[android/net/UidRange;)V
Lcom/android/server/NetworkManagementService;->allowProtect(I)V
Lcom/android/server/NetworkManagementService;->attachPppd(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
Lcom/android/server/NetworkManagementService;->clearDefaultNetId()V
Lcom/android/server/NetworkManagementService;->clearInterfaceAddresses(Ljava/lang/String;)V
Lcom/android/server/NetworkManagementService;->clearPermission([I)V
Lcom/android/server/NetworkManagementService;->createPhysicalNetwork(ILjava/lang/String;)V
Lcom/android/server/NetworkManagementService;->createVirtualNetwork(IZZ)V
Lcom/android/server/NetworkManagementService;->denyProtect(I)V
Lcom/android/server/NetworkManagementService;->detachPppd(Ljava/lang/String;)V
Lcom/android/server/NetworkManagementService;->disableIpv6(Ljava/lang/String;)V
Lcom/android/server/NetworkManagementService;->disableNat(Ljava/lang/String;Ljava/lang/String;)V
Lcom/android/server/NetworkManagementService;->enableIpv6(Ljava/lang/String;)V
Lcom/android/server/NetworkManagementService;->enableNat(Ljava/lang/String;Ljava/lang/String;)V
Lcom/android/server/NetworkManagementService;->getDnsForwarders()[Ljava/lang/String;
Lcom/android/server/NetworkManagementService;->getInterfaceConfig(Ljava/lang/String;)Landroid/net/InterfaceConfiguration;
Lcom/android/server/NetworkManagementService;->getIpForwardingEnabled()Z
Lcom/android/server/NetworkManagementService;->getNetworkStatsDetail()Landroid/net/NetworkStats;
Lcom/android/server/NetworkManagementService;->getNetworkStatsSummaryDev()Landroid/net/NetworkStats;
Lcom/android/server/NetworkManagementService;->getNetworkStatsSummaryXt()Landroid/net/NetworkStats;
Lcom/android/server/NetworkManagementService;->getNetworkStatsTethering()Landroid/net/NetworkStats;
Lcom/android/server/NetworkManagementService;->getNetworkStatsUidDetail(I)Landroid/net/NetworkStats;
Lcom/android/server/NetworkManagementService;->isBandwidthControlEnabled()Z
Lcom/android/server/NetworkManagementService;->isClatdStarted(Ljava/lang/String;)Z
Lcom/android/server/NetworkManagementService;->isTetheringStarted()Z
Lcom/android/server/NetworkManagementService;->listInterfaces()[Ljava/lang/String;
Lcom/android/server/NetworkManagementService;->listTetheredInterfaces()[Ljava/lang/String;
Lcom/android/server/NetworkManagementService;->listTtys()[Ljava/lang/String;
Lcom/android/server/NetworkManagementService;->registerObserver(Landroid/net/INetworkManagementEventObserver;)V
Lcom/android/server/NetworkManagementService;->removeIdleTimer(Ljava/lang/String;)V
Lcom/android/server/NetworkManagementService;->removeInterfaceAlert(Ljava/lang/String;)V
Lcom/android/server/NetworkManagementService;->removeInterfaceFromLocalNetwork(Ljava/lang/String;)V
Lcom/android/server/NetworkManagementService;->removeInterfaceFromNetwork(Ljava/lang/String;I)V
Lcom/android/server/NetworkManagementService;->removeInterfaceQuota(Ljava/lang/String;)V
Lcom/android/server/NetworkManagementService;->removeNetwork(I)V
Lcom/android/server/NetworkManagementService;->removeRoute(ILandroid/net/RouteInfo;)V
Lcom/android/server/NetworkManagementService;->removeRoutesFromLocalNetwork(Ljava/util/List;)I
Lcom/android/server/NetworkManagementService;->removeVpnUidRanges(IL[android/net/UidRange;)V
Lcom/android/server/NetworkManagementService;->setAccessPoI(Landroid/net/wifi/WifiConfiguration;Ljava/lang/String;)V
Lcom/android/server/NetworkManagementService;->setDefaultNetId(I)V
Lcom/android/server/NetworkManagementService;->setDnsConfigurationForNetwork(IL[java/lang/String;Ljava/lang/String;)V
Lcom/android/server/NetworkManagementService;->setDnsForwarders(Landroid/net/Network;L[java/lang/String;)V
Lcom/android/server/NetworkManagementService;->setDnsServersForNetwork(IL[java/lang/String;Ljava/lang/String;)V
Lcom/android/server/NetworkManagementService;->setGlobalAlert(J)V
Lcom/android/server/NetworkManagementService;->setInterfaceAlert(Ljava/lang/String;J)V
Lcom/android/server/NetworkManagementService;->setInterfaceConfig(Ljava/lang/String;Landroid/net/InterfaceConfiguration;)V
Lcom/android/server/NetworkManagementService;->setInterfaceDown(Ljava/lang/String;)V
Lcom/android/server/NetworkManagementService;->setInterfaceIpv6NdOffload(Ljava/lang/String;Z)V
Lcom/android/server/NetworkManagementService;->setInterfaceIpv6PrivacyExtensions(Ljava/lang/String;Z)V
Lcom/android/server/NetworkManagementService;->setInterfaceQuota(Ljava/lang/String;J)V
Lcom/android/server/NetworkManagementService;->setInterfaceUp(Ljava/lang/String;)V
Lcom/android/server/NetworkManagementService;->setIpForwardingEnabled(Z)V
Lcom/android/server/NetworkManagementService;->setMtu(Ljava/lang/String;I)V
Lcom/android/server/NetworkManagementService;->setNetworkPermission(ILjava/lang/String;)V
Lcom/android/server/NetworkManagementService;->setPermission(Ljava/lang/String;[I)V
Lcom/android/server/NetworkManagementService;->setUidCleartextNetworkPolicy(II)V
Lcom/android/server/NetworkManagementService;->setUidMeteredNetworkBlacklist(IZ)V
Lcom/android/server/NetworkManagementService;->setUidMeteredNetworkWhitelist(IZ)V
Lcom/android/server/NetworkManagementService;->shutdown()V
Lcom/android/server/NetworkManagementService;->startAccessPoI(Landroid/net/wifi/WifiConfiguration;Ljava/lang/String;)V
Lcom/android/server/NetworkManagementService;->startClatd(Ljava/lang/String;)V
Lcom/android/server/NetworkManagementService;->startInterfaceForwarding(Ljava/lang/String;Ljava/lang/String;)V
Lcom/android/server/NetworkManagementService;->startTethering(L[java/lang/String;)V
Lcom/android/server/NetworkManagementService;->stopAccessPoI(Ljava/lang/String;)V
Lcom/android/server/NetworkManagementService;->stopClatd(Ljava/lang/String;)V
Lcom/android/server/NetworkManagementService;->stopInterfaceForwarding(Ljava/lang/String;Ljava/lang/String;)V
Lcom/android/server/NetworkManagementService;->stopTethering()V
Lcom/android/server/NetworkManagementService;->tetherInterface(Ljava/lang/String;)V
Lcom/android/server/NetworkManagementService;->unregisterObserver(Landroid/net/INetworkManagementEventObserver;)V
Lcom/android/server/NetworkManagementService;->untetherInterface(Ljava/lang/String;)V
Lcom/android/server/NetworkManagementService;->wifiFirmwareReload(Ljava/lang/String;Ljava/lang/String;)V
Lcom/android/server/NetworkScoreService;->clearScores()Z
Lcom/android/server/NetworkScoreService;->disableScoring()V
Lcom/android/server/NetworkScoreService;->registerNetworkScoreCache(ILandroid/net/INetworkScoreCache;)V
Lcom/android/server/NetworkScoreService;->setActiveScorer(Ljava/lang/String;)Z
Lcom/android/server/NetworkScoreService;->updateScores(L[android/net/ScoredNetwork;)Z
Lcom/android/server/NsdService;->getMessenger()Landroid/os/Messenger;
Lcom/android/server/NsdService;->setEnabled(Z)V
Lcom/android/server/pm/PackageInstallerService;->createSession(Landroid/content/pm/PackageInstaller$SessionParams;Ljava/lang/String;I)I
Lcom/android/server/pm/PackageInstallerService;->getAllSessions(I)Landroid/content/pm/ParceledListSlice;
Lcom/android/server/pm/PackageInstallerService;->getMySessions(Ljava/lang/String;I)Landroid/content/pm/ParceledListSlice;
Lcom/android/server/pm/PackageInstallerService;->registerCallback(Landroid/content/pm/IPackageInstallerCallback;I)V
Lcom/android/server/pm/PackageInstallerService;->setPermissionsResult(IZ)V
Lcom/android/server/pm/PackageInstallerService;->uninstall(Ljava/lang/String;Ljava/lang/String;ILandroid/content/IntentSender;I)V
Lcom/android/server/pm/PackageManagerService;->addCrossProfileIntentFilter(Landroid/content/IntentFilter;Ljava/lang/String;III)V
Lcom/android/server/pm/PackageManagerService;->addOnPermissionsChangeListener(Landroid/content/pm/IOnPermissionsChangeListener;)V
Lcom/android/server/pm/PackageManagerService;->addPreferredActivity(Landroid/content/IntentFilter;IL[android/content/ComponentName;Landroid/content/ComponentName;I)V
Lcom/android/server/pm/PackageManagerService;->canForwardTo(Landroid/content/Intent;Ljava/lang/String;II)Z
Lcom/android/server/pm/PackageManagerService;->clearApplicationUserData(Ljava/lang/String;Landroid/content/pm/IPackageDataObserver;I)V
Lcom/android/server/pm/PackageManagerService;->clearCrossProfileIntentFilters(ILjava/lang/String;)V
Lcom/android/server/pm/PackageManagerService;->clearPackagePreferredActivities(Ljava/lang/String;)V
Lcom/android/server/pm/PackageManagerService;->deleteApplicationCacheFiles(Ljava/lang/String;Landroid/content/pm/IPackageDataObserver;)V
Lcom/android/server/pm/PackageManagerService;->deleteApplicationCacheFilesAsUser(Ljava/lang/String;ILandroid/content/pm/IPackageDataObserver;)V
Lcom/android/server/pm/PackageManagerService;->deletePackage(Ljava/lang/String;Landroid/content/pm/IPackageDeleteObserver2;II)V
Lcom/android/server/pm/PackageManagerService;->deletePackageAsUser(Ljava/lang/String;Landroid/content/pm/IPackageDeleteObserver;II)V
Lcom/android/server/pm/PackageManagerService;->extendVerificationTimeout(IIJ)V
Lcom/android/server/pm/PackageManagerService;->flushPackageRestrictionsAsUser(I)V
Lcom/android/server/pm/PackageManagerService;->freeStorage(Ljava/lang/String;JLandroid/content/IntentSender;)V
Lcom/android/server/pm/PackageManagerService;->freeStorageAndNotify(Ljava/lang/String;JLandroid/content/pm/IPackageDataObserver;)V
Lcom/android/server/pm/PackageManagerService;->getActivityInfo(Landroid/content/ComponentName;II)Landroid/content/pm/ActivityInfo;
Lcom/android/server/pm/PackageManagerService;->getApplicationEnabledSetting(Ljava/lang/String;I)I
Lcom/android/server/pm/PackageManagerService;->getApplicationHiddenSettingAsUser(Ljava/lang/String;I)Z
Lcom/android/server/pm/PackageManagerService;->getApplicationInfo(Ljava/lang/String;II)Landroid/content/pm/ApplicationInfo;
Lcom/android/server/pm/PackageManagerService;->getComponentEnabledSetting(Landroid/content/ComponentName;I)I
Lcom/android/server/pm/PackageManagerService;->getHomeActivities(Ljava/util/List;)Landroid/content/ComponentName;
Lcom/android/server/pm/PackageManagerService;->getInstalledPackages(II)Landroid/content/pm/ParceledListSlice;
Lcom/android/server/pm/PackageManagerService;->getLastChosenActivity(Landroid/content/Intent;Ljava/lang/String;I)Landroid/content/pm/ResolveInfo;
Lcom/android/server/pm/PackageManagerService;->getMoveStatus(I)I
Lcom/android/server/pm/PackageManagerService;->getPackageGids(Ljava/lang/String;II)[I
Lcom/android/server/pm/PackageManagerService;->getPackageInfo(Ljava/lang/String;II)Landroid/content/pm/PackageInfo;
Lcom/android/server/pm/PackageManagerService;->getPackageSizeInfo(Ljava/lang/String;ILandroid/content/pm/IPackageStatsObserver;)V
Lcom/android/server/pm/PackageManagerService;->getPackageUid(Ljava/lang/String;II)I
Lcom/android/server/pm/PackageManagerService;->getPermissionFlags(Ljava/lang/String;Ljava/lang/String;I)I
Lcom/android/server/pm/PackageManagerService;->getProviderInfo(Landroid/content/ComponentName;II)Landroid/content/pm/ProviderInfo;
Lcom/android/server/pm/PackageManagerService;->getReceiverInfo(Landroid/content/ComponentName;II)Landroid/content/pm/ActivityInfo;
Lcom/android/server/pm/PackageManagerService;->getServiceInfo(Landroid/content/ComponentName;II)Landroid/content/pm/ServiceInfo;
Lcom/android/server/pm/PackageManagerService;->getVerifierDeviceIdentity()Landroid/content/pm/VerifierDeviceIdentity;
Lcom/android/server/pm/PackageManagerService;->grantRuntimePermission(Ljava/lang/String;Ljava/lang/String;I)V
Lcom/android/server/pm/PackageManagerService;->installExistingPackageAsUser(Ljava/lang/String;I)I
Lcom/android/server/pm/PackageManagerService;->installPackageAsUser(Ljava/lang/String;Landroid/content/pm/IPackageInstallObserver2;ILjava/lang/String;I)V
Lcom/android/server/pm/PackageManagerService;->isEphemeralApplication(Ljava/lang/String;I)Z
Lcom/android/server/pm/PackageManagerService;->isPackageAvailable(Ljava/lang/String;I)Z
Lcom/android/server/pm/PackageManagerService;->isPackageSuspendedForUser(Ljava/lang/String;I)Z
Lcom/android/server/pm/PackageManagerService;->isPermissionRevokedByPolicy(Ljava/lang/String;Ljava/lang/String;I)Z
Lcom/android/server/pm/PackageManagerService;->movePackage(Ljava/lang/String;Ljava/lang/String;)I
Lcom/android/server/pm/PackageManagerService;->movePrimaryStorage(Ljava/lang/String;)I
Lcom/android/server/pm/PackageManagerService;->queryIntentActivities(Landroid/content/Intent;Ljava/lang/String;II)Landroid/content/pm/ParceledListSlice;
Lcom/android/server/pm/PackageManagerService;->queryIntentActivityOptions(Landroid/content/ComponentName;L[android/content/Intent;L[java/lang/String;Landroid/content/Intent;Ljava/lang/String;II)Landroid/content/pm/ParceledListSlice;
Lcom/android/server/pm/PackageManagerService;->queryIntentContentProviders(Landroid/content/Intent;Ljava/lang/String;II)Landroid/content/pm/ParceledListSlice;
Lcom/android/server/pm/PackageManagerService;->queryIntentReceivers(Landroid/content/Intent;Ljava/lang/String;II)Landroid/content/pm/ParceledListSlice;
Lcom/android/server/pm/PackageManagerService;->queryIntentServices(Landroid/content/Intent;Ljava/lang/String;II)Landroid/content/pm/ParceledListSlice;
Lcom/android/server/pm/PackageManagerService;->registerMoveCallback(Landroid/content/pm/IPackageMoveObserver;)V
Lcom/android/server/pm/PackageManagerService;->replacePreferredActivity(Landroid/content/IntentFilter;IL[android/content/ComponentName;Landroid/content/ComponentName;I)V
Lcom/android/server/pm/PackageManagerService;->resetApplicationPreferences(I)V
Lcom/android/server/pm/PackageManagerService;->resetRuntimePermissions()V
Lcom/android/server/pm/PackageManagerService;->resolveIntent(Landroid/content/Intent;Ljava/lang/String;II)Landroid/content/pm/ResolveInfo;
Lcom/android/server/pm/PackageManagerService;->resolveService(Landroid/content/Intent;Ljava/lang/String;II)Landroid/content/pm/ResolveInfo;
Lcom/android/server/pm/PackageManagerService;->revokeRuntimePermission(Ljava/lang/String;Ljava/lang/String;I)V
Lcom/android/server/pm/PackageManagerService;->setApplicationEnabledSetting(Ljava/lang/String;IIILjava/lang/String;)V
Lcom/android/server/pm/PackageManagerService;->setApplicationHiddenSettingAsUser(Ljava/lang/String;ZI)Z
Lcom/android/server/pm/PackageManagerService;->setBlockUninstallForUser(Ljava/lang/String;ZI)Z
Lcom/android/server/pm/PackageManagerService;->setComponentEnabledSetting(Landroid/content/ComponentName;III)V
Lcom/android/server/pm/PackageManagerService;->setDefaultBrowserPackageName(Ljava/lang/String;I)Z
Lcom/android/server/pm/PackageManagerService;->setHomeActivity(Landroid/content/ComponentName;I)V
Lcom/android/server/pm/PackageManagerService;->setInstallLocation(I)Z
Lcom/android/server/pm/PackageManagerService;->setLastChosenActivity(Landroid/content/Intent;Ljava/lang/String;ILandroid/content/IntentFilter;ILandroid/content/ComponentName;)V
Lcom/android/server/pm/PackageManagerService;->setPackagesSuspendedAsUser(L[java/lang/String;ZI)[Ljava/lang/String;
Lcom/android/server/pm/PackageManagerService;->setPackageStoppedState(Ljava/lang/String;ZI)V
Lcom/android/server/pm/PackageManagerService;->setPermissionEnforced(Ljava/lang/String;Z)V
Lcom/android/server/pm/PackageManagerService;->shouldShowRequestPermissionRationale(Ljava/lang/String;Ljava/lang/String;I)Z
Lcom/android/server/pm/PackageManagerService;->systemReady()V
Lcom/android/server/pm/PackageManagerService;->unregisterMoveCallback(Landroid/content/pm/IPackageMoveObserver;)V
Lcom/android/server/pm/PackageManagerService;->updateExternalMediaStatus(ZZ)V
Lcom/android/server/pm/PackageManagerService;->updateIntentVerificationStatus(Ljava/lang/String;II)Z
Lcom/android/server/pm/PackageManagerService;->updatePermissionFlags(Ljava/lang/String;Ljava/lang/String;III)V
Lcom/android/server/pm/PackageManagerService;->updatePermissionFlagsForAllApps(III)V
Lcom/android/server/pm/PackageManagerService;->verifyIntentFilter(IILjava/util/List;)V
Lcom/android/server/pm/PackageManagerService;->verifyPendingInstall(II)V
Lcom/android/server/pm/ShortcutService;->onApplicationActive(Ljava/lang/String;I)V
Lcom/android/server/power/PowerManagerService$BinderService;->acquireWakeLock(Landroid/os/IBinder;ILjava/lang/String;Ljava/lang/String;Landroid/os/WorkSource;Ljava/lang/String;)V
Lcom/android/server/power/PowerManagerService$BinderService;->acquireWakeLockWithUid(Landroid/os/IBinder;ILjava/lang/String;Ljava/lang/String;I)V
Lcom/android/server/power/PowerManagerService$BinderService;->boostScreenBrightness(J)V
Lcom/android/server/power/PowerManagerService$BinderService;->crash(Ljava/lang/String;)V
Lcom/android/server/power/PowerManagerService$BinderService;->goToSleep(JII)V
Lcom/android/server/power/PowerManagerService$BinderService;->nap(J)V
Lcom/android/server/power/PowerManagerService$BinderService;->powerHI(II)V
Lcom/android/server/power/PowerManagerService$BinderService;->reboot(ZLjava/lang/String;Z)V
Lcom/android/server/power/PowerManagerService$BinderService;->rebootSafeMode(ZZ)V
Lcom/android/server/power/PowerManagerService$BinderService;->releaseWakeLock(Landroid/os/IBinder;I)V
Lcom/android/server/power/PowerManagerService$BinderService;->setAttentionLight(ZI)V
Lcom/android/server/power/PowerManagerService$BinderService;->setPowerSaveMode(Z)Z
Lcom/android/server/power/PowerManagerService$BinderService;->setTemporaryScreenAutoBrightnessAdjustmentSettingOverride(F)V
Lcom/android/server/power/PowerManagerService$BinderService;->setTemporaryScreenBrightnessSettingOverride(I)V
Lcom/android/server/power/PowerManagerService$BinderService;->shutdown(ZLjava/lang/String;Z)V
Lcom/android/server/power/PowerManagerService$BinderService;->updateWakeLockUids(Landroid/os/IBinder;[I)V
Lcom/android/server/power/PowerManagerService$BinderService;->updateWakeLockWorkSource(Landroid/os/IBinder;Landroid/os/WorkSource;Ljava/lang/String;)V
Lcom/android/server/power/PowerManagerService$BinderService;->userActivity(JII)V
Lcom/android/server/power/PowerManagerService$BinderService;->wakeUp(JLjava/lang/String;Ljava/lang/String;)V
Lcom/android/server/prI/PrIManagerService$PrIManagerImpl;->addPrIJobStateChangeListener(Landroid/prI/IPrIJobStateChangeListener;II)V
Lcom/android/server/prI/PrIManagerService$PrIManagerImpl;->cancelPrIJob(Landroid/prI/PrIJobId;II)V
Lcom/android/server/prI/PrIManagerService$PrIManagerImpl;->getPrIJobInfo(Landroid/prI/PrIJobId;II)Landroid/prI/PrIJobInfo;
Lcom/android/server/prI/PrIManagerService$PrIManagerImpl;->getPrIJobInfos(II)Ljava/util/List;
Lcom/android/server/prI/PrIManagerService$PrIManagerImpl;->prI(Ljava/lang/String;Landroid/prI/IPrIDocumentAdapter;Landroid/prI/PrIAttributes;Ljava/lang/String;II)Landroid/os/Bundle;
Lcom/android/server/prI/PrIManagerService$PrIManagerImpl;->restartPrIJob(Landroid/prI/PrIJobId;II)V
Lcom/android/server/RecoverySystemService$BinderService;->clearBcb()Z
Lcom/android/server/RecoverySystemService$BinderService;->rebootRecoveryWithCommand(Ljava/lang/String;)V
Lcom/android/server/RecoverySystemService$BinderService;->setupBcb(Ljava/lang/String;)Z
Lcom/android/server/RecoverySystemService$BinderService;->uncrypt(Ljava/lang/String;Landroid/os/IRecoverySystemProgressListener;)Z
Lcom/android/server/SerialService;->getSerialPorts()[Ljava/lang/String;
Lcom/android/server/SerialService;->openSerialPort(Ljava/lang/String;)Landroid/os/ParcelFileDescriptor;
Lcom/android/server/sip/SipService;->close(Ljava/lang/String;Ljava/lang/String;)V
Lcom/android/server/sip/SipService;->createSession(Landroid/net/sip/SipProfile;Landroid/net/sip/ISipSessionListener;Ljava/lang/String;)Landroid/net/sip/ISipSession;
Lcom/android/server/sip/SipService;->getListOfProfiles(Ljava/lang/String;)[Landroid/net/sip/SipProfile;
Lcom/android/server/sip/SipService;->getPendingSession(Ljava/lang/String;Ljava/lang/String;)Landroid/net/sip/ISipSession;
Lcom/android/server/sip/SipService;->isOpened(Ljava/lang/String;Ljava/lang/String;)Z
Lcom/android/server/sip/SipService;->isRegistered(Ljava/lang/String;Ljava/lang/String;)Z
Lcom/android/server/sip/SipService;->open3(Landroid/net/sip/SipProfile;Landroid/app/PendingIntent;Landroid/net/sip/ISipSessionListener;Ljava/lang/String;)V
Lcom/android/server/sip/SipService;->open(Landroid/net/sip/SipProfile;Ljava/lang/String;)V
Lcom/android/server/sip/SipService;->setRegistrationListener(Ljava/lang/String;Landroid/net/sip/ISipSessionListener;Ljava/lang/String;)V
Lcom/android/server/soundtrigger/SoundTriggerService$SoundTriggerServiceStub;->deleteSoundModel(Landroid/os/ParcelUuid;)V
Lcom/android/server/soundtrigger/SoundTriggerService$SoundTriggerServiceStub;->getSoundModel(Landroid/os/ParcelUuid;)Landroid/hardware/soundtrigger/SoundTrigger$GenericSoundModel;
Lcom/android/server/soundtrigger/SoundTriggerService$SoundTriggerServiceStub;->startRecognition(Landroid/os/ParcelUuid;Landroid/hardware/soundtrigger/IRecognitionStatusCallback;Landroid/hardware/soundtrigger/SoundTrigger$RecognitionConfig;)I
Lcom/android/server/soundtrigger/SoundTriggerService$SoundTriggerServiceStub;->stopRecognition(Landroid/os/ParcelUuid;Landroid/hardware/soundtrigger/IRecognitionStatusCallback;)I
Lcom/android/server/soundtrigger/SoundTriggerService$SoundTriggerServiceStub;->updateSoundModel(Landroid/hardware/soundtrigger/SoundTrigger$GenericSoundModel;)V
Lcom/android/server/statusbar/StatusBarManagerService;->addTile(Landroid/content/ComponentName;)V
Lcom/android/server/statusbar/StatusBarManagerService;->clearNotificationEffects()V
Lcom/android/server/statusbar/StatusBarManagerService;->clickTile(Landroid/content/ComponentName;)V
Lcom/android/server/statusbar/StatusBarManagerService;->collapsePanels()V
Lcom/android/server/statusbar/StatusBarManagerService;->disable2(ILandroid/os/IBinder;Ljava/lang/String;)V
Lcom/android/server/statusbar/StatusBarManagerService;->disable2ForUser(ILandroid/os/IBinder;Ljava/lang/String;I)V
Lcom/android/server/statusbar/StatusBarManagerService;->disable(ILandroid/os/IBinder;Ljava/lang/String;)V
Lcom/android/server/statusbar/StatusBarManagerService;->disableForUser(ILandroid/os/IBinder;Ljava/lang/String;I)V
Lcom/android/server/statusbar/StatusBarManagerService;->expandNotificationsPanel()V
Lcom/android/server/statusbar/StatusBarManagerService;->expandSettingsPanel(Ljava/lang/String;)V
Lcom/android/server/statusbar/StatusBarManagerService;->handleSystemNavigationKey(I)V
Lcom/android/server/statusbar/StatusBarManagerService;->onClearAllNotifications(I)V
Lcom/android/server/statusbar/StatusBarManagerService;->onNotificationActionClick(Ljava/lang/String;I)V
Lcom/android/server/statusbar/StatusBarManagerService;->onNotificationClear(Ljava/lang/String;Ljava/lang/String;II)V
Lcom/android/server/statusbar/StatusBarManagerService;->onNotificationClick(Ljava/lang/String;)V
Lcom/android/server/statusbar/StatusBarManagerService;->onNotificationError(Ljava/lang/String;Ljava/lang/String;IIILjava/lang/String;I)V
Lcom/android/server/statusbar/StatusBarManagerService;->onNotificationExpansionChanged(Ljava/lang/String;ZZ)V
Lcom/android/server/statusbar/StatusBarManagerService;->onNotificationVisibilityChanged(L[com/android/Iernal/statusbar/NotificationVisibility;L[com/android/Iernal/statusbar/NotificationVisibility;)V
Lcom/android/server/statusbar/StatusBarManagerService;->onPanelHidden()V
Lcom/android/server/statusbar/StatusBarManagerService;->onPanelRevealed(ZI)V
Lcom/android/server/statusbar/StatusBarManagerService;->registerStatusBar(Lcom/android/Iernal/statusbar/IStatusBar;Ljava/util/List;Ljava/util/List;[ILjava/util/List;Landroid/graphics/Rect;Landroid/graphics/Rect;)V
Lcom/android/server/statusbar/StatusBarManagerService;->removeIcon(Ljava/lang/String;)V
Lcom/android/server/statusbar/StatusBarManagerService;->remTile(Landroid/content/ComponentName;)V
Lcom/android/server/statusbar/StatusBarManagerService;->setIcon(Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;)V
Lcom/android/server/statusbar/StatusBarManagerService;->setIconVisibility(Ljava/lang/String;Z)V
Lcom/android/server/statusbar/StatusBarManagerService;->setImeWindowStatus(Landroid/os/IBinder;IIZ)V
Lcom/android/server/statusbar/StatusBarManagerService;->setSystemUiVisibility(IILjava/lang/String;)V
Lcom/android/server/TelephonyRegistry;->addOnSubscriptionsChangedListener(Ljava/lang/String;Lcom/android/Iernal/telephony/IOnSubscriptionsChangedListener;)V
Lcom/android/server/TelephonyRegistry;->listen(Ljava/lang/String;Lcom/android/Iernal/telephony/IPhoneStateListener;IZ)V
Lcom/android/server/TelephonyRegistry;->listenForSubscriber(ILjava/lang/String;Lcom/android/Iernal/telephony/IPhoneStateListener;IZ)V
Lcom/android/server/TelephonyRegistry;->notifyCallForwardingChanged(Z)V
Lcom/android/server/TelephonyRegistry;->notifyCallForwardingChangedForSubscriber(IZ)V
Lcom/android/server/TelephonyRegistry;->notifyCallState(ILjava/lang/String;)V
Lcom/android/server/TelephonyRegistry;->notifyCallStateForPhoneId(IIILjava/lang/String;)V
Lcom/android/server/TelephonyRegistry;->notifyCarrierNetworkChange(Z)V
Lcom/android/server/TelephonyRegistry;->notifyCellInfo(Ljava/util/List;)V
Lcom/android/server/TelephonyRegistry;->notifyCellInfoForSubscriber(ILjava/util/List;)V
Lcom/android/server/TelephonyRegistry;->notifyCellLocation(Landroid/os/Bundle;)V
Lcom/android/server/TelephonyRegistry;->notifyCellLocationForSubscriber(ILandroid/os/Bundle;)V
Lcom/android/server/TelephonyRegistry;->notifyDataActivity(I)V
Lcom/android/server/TelephonyRegistry;->notifyDataActivityForSubscriber(II)V
Lcom/android/server/TelephonyRegistry;->notifyDataConnection(IZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/net/LinkProperties;Landroid/net/NetworkCapabilities;IZ)V
Lcom/android/server/TelephonyRegistry;->notifyDataConnectionFailed(Ljava/lang/String;Ljava/lang/String;)V
Lcom/android/server/TelephonyRegistry;->notifyDataConnectionFailedForSubscriber(ILjava/lang/String;Ljava/lang/String;)V
Lcom/android/server/TelephonyRegistry;->notifyDataConnectionForSubscriber(IIZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/net/LinkProperties;Landroid/net/NetworkCapabilities;IZ)V
Lcom/android/server/TelephonyRegistry;->notifyDisconnectCause(II)V
Lcom/android/server/TelephonyRegistry;->notifyMessageWaitingChangedForPhoneId(IIZ)V
Lcom/android/server/TelephonyRegistry;->notifyOemHookRawEventForSubscriber(I[B)V
Lcom/android/server/TelephonyRegistry;->notifyOtaspChanged(I)V
Lcom/android/server/TelephonyRegistry;->notifyPreciseCallState(III)V
Lcom/android/server/TelephonyRegistry;->notifyPreciseDataConnectionFailed(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
Lcom/android/server/TelephonyRegistry;->notifyServiceStateForPhoneId(IILandroid/telephony/ServiceState;)V
Lcom/android/server/TelephonyRegistry;->notifySignalStrengthForPhoneId(IILandroid/telephony/SignalStrength;)V
Lcom/android/server/TelephonyRegistry;->notifyVoLteServiceStateChanged(Landroid/telephony/VoLteServiceState;)V
Lcom/android/server/TextServicesManagerService;->setCurrentSpellChecker(Ljava/lang/String;Ljava/lang/String;)V
Lcom/android/server/TextServicesManagerService;->setCurrentSpellCheckerSubtype(Ljava/lang/String;I)V
Lcom/android/server/TextServicesManagerService;->setSpellCheckerEnabled(Z)V
Lcom/android/server/tv/TvInputManagerService$BinderService;->acquireTvInputHardware(ILandroid/media/tv/ITvInputHardwareCallback;Landroid/media/tv/TvInputInfo;I)Landroid/media/tv/ITvInputHardware;
Lcom/android/server/tv/TvInputManagerService$BinderService;->addBlockedRating(Ljava/lang/String;I)V
Lcom/android/server/tv/TvInputManagerService$BinderService;->captureFrame(Ljava/lang/String;Landroid/view/Surface;Landroid/media/tv/TvStreamConfig;I)Z
Lcom/android/server/tv/TvInputManagerService$BinderService;->getAvailableTvStreamConfigList(Ljava/lang/String;I)Ljava/util/List;
Lcom/android/server/tv/TvInputManagerService$BinderService;->getDvbDeviceList()Ljava/util/List;
Lcom/android/server/tv/TvInputManagerService$BinderService;->getHardwareList()Ljava/util/List;
Lcom/android/server/tv/TvInputManagerService$BinderService;->openDvbDevice(Landroid/media/tv/DvbDeviceInfo;I)Landroid/os/ParcelFileDescriptor;
Lcom/android/server/tv/TvInputManagerService$BinderService;->releaseTvInputHardware(ILandroid/media/tv/ITvInputHardware;I)V
Lcom/android/server/tv/TvInputManagerService$BinderService;->removeBlockedRating(Ljava/lang/String;I)V
Lcom/android/server/tv/TvInputManagerService$BinderService;->setParentalControlsEnabled(ZI)V
Lcom/android/server/tv/TvInputManagerService$BinderService;->unblockContent(Landroid/os/IBinder;Ljava/lang/String;I)V
Lcom/android/server/tv/TvInputManagerService$ServiceCallback;->addHardwareInput(ILandroid/media/tv/TvInputInfo;)V
Lcom/android/server/tv/TvInputManagerService$ServiceCallback;->addHdmiInput(ILandroid/media/tv/TvInputInfo;)V
Lcom/android/server/tv/TvInputManagerService$ServiceCallback;->removeHardwareInput(Ljava/lang/String;)V
Lcom/android/server/UpdateLockService;->acquireUpdateLock(Landroid/os/IBinder;Ljava/lang/String;)V
Lcom/android/server/UpdateLockService;->releaseUpdateLock(Landroid/os/IBinder;)V
Lcom/android/server/usage/UsageStatsService$BinderService;->onCarrierPrivilegedAppsChanged()V
Lcom/android/server/usage/UsageStatsService$BinderService;->queryConfigurationStats(IJJLjava/lang/String;)Landroid/content/pm/ParceledListSlice;
Lcom/android/server/usage/UsageStatsService$BinderService;->queryEvents(JJLjava/lang/String;)Landroid/app/usage/UsageEvents;
Lcom/android/server/usage/UsageStatsService$BinderService;->queryUsageStats(IJJLjava/lang/String;)Landroid/content/pm/ParceledListSlice;
Lcom/android/server/usage/UsageStatsService$BinderService;->setAppInactive(Ljava/lang/String;ZI)V
Lcom/android/server/usb/UsbService;->allowUsbDebugging(ZLjava/lang/String;)V
Lcom/android/server/usb/UsbService;->clearDefaults(Ljava/lang/String;I)V
Lcom/android/server/usb/UsbService;->clearUsbDebuggingKeys()V
Lcom/android/server/usb/UsbService;->denyUsbDebugging()V
Lcom/android/server/usb/UsbService;->getPorts()[Landroid/hardware/usb/UsbPort;
Lcom/android/server/usb/UsbService;->getPortStatus(Ljava/lang/String;)Landroid/hardware/usb/UsbPortStatus;
Lcom/android/server/usb/UsbService;->grantAccessoryPermission(Landroid/hardware/usb/UsbAccessory;I)V
Lcom/android/server/usb/UsbService;->grantDevicePermission(Landroid/hardware/usb/UsbDevice;I)V
Lcom/android/server/usb/UsbService;->hasDefaults(Ljava/lang/String;I)Z
Lcom/android/server/usb/UsbService;->isFunctionEnabled(Ljava/lang/String;)Z
Lcom/android/server/usb/UsbService;->setAccessoryPackage(Landroid/hardware/usb/UsbAccessory;Ljava/lang/String;I)V
Lcom/android/server/usb/UsbService;->setCurrentFunction(Ljava/lang/String;)V
Lcom/android/server/usb/UsbService;->setDevicePackage(Landroid/hardware/usb/UsbDevice;Ljava/lang/String;I)V
Lcom/android/server/usb/UsbService;->setPortRoles(Ljava/lang/String;II)V
Lcom/android/server/usb/UsbService;->setUsbDataUnlocked(Z)V
Lcom/android/server/VibratorService;->cancelVibrate(Landroid/os/IBinder;)V
Lcom/android/server/VibratorService;->vibrate(ILjava/lang/String;JILandroid/os/IBinder;)V
Lcom/android/server/VibratorService;->vibratePattern(ILjava/lang/String;[JIILandroid/os/IBinder;)V
Lcom/android/server/voiceIeraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub;->activeServiceSupportsAssist()Z
Lcom/android/server/voiceIeraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub;->activeServiceSupportsLaunchFromKeyguard()Z
Lcom/android/server/voiceIeraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub;->deleteKeyphraseSoundModel(ILjava/lang/String;)I
Lcom/android/server/voiceIeraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub;->getActiveServiceComponentName()Landroid/content/ComponentName;
Lcom/android/server/voiceIeraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub;->getKeyphraseSoundModel(ILjava/lang/String;)Landroid/hardware/soundtrigger/SoundTrigger$KeyphraseSoundModel;
Lcom/android/server/voiceIeraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub;->hideCurrentSession()V
Lcom/android/server/voiceIeraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub;->isSessionRunning()Z
Lcom/android/server/voiceIeraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub;->launchVoiceAssistFromKeyguard()V
Lcom/android/server/voiceIeraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub;->onLockscreenShown()V
Lcom/android/server/voiceIeraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub;->registerVoiceInteractionSessionListener(Lcom/android/Iernal/app/IVoiceInteractionSessionListener;)V
Lcom/android/server/voiceIeraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub;->showSessionForActiveService(Landroid/os/Bundle;ILcom/android/Iernal/app/IVoiceInteractionSessionShowCallback;Landroid/os/IBinder;)Z
Lcom/android/server/voiceIeraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub;->updateKeyphraseSoundModel(Landroid/hardware/soundtrigger/SoundTrigger$KeyphraseSoundModel;)I
Lcom/android/server/wallpaper/WallpaperManagerService;->clearWallpaper(Ljava/lang/String;II)V
Lcom/android/server/wallpaper/WallpaperManagerService;->setDimensionHIs(IILjava/lang/String;)V
Lcom/android/server/wallpaper/WallpaperManagerService;->setDisplayPadding(Landroid/graphics/Rect;Ljava/lang/String;)V
Lcom/android/server/wallpaper/WallpaperManagerService;->setLockWallpaperCallback(Landroid/app/IWallpaperManagerCallback;)Z
Lcom/android/server/wallpaper/WallpaperManagerService;->setWallpaper(Ljava/lang/String;Ljava/lang/String;Landroid/graphics/Rect;ZLandroid/os/Bundle;ILandroid/app/IWallpaperManagerCallback;I)Landroid/os/ParcelFileDescriptor;
Lcom/android/server/wallpaper/WallpaperManagerService;->setWallpaperComponent(Landroid/content/ComponentName;)V
Lcom/android/server/wallpaper/WallpaperManagerService;->setWallpaperComponentChecked(Landroid/content/ComponentName;Ljava/lang/String;I)V
Lcom/android/server/webkit/WebViewUpdateService$BinderService;->changeProviderAndSetting(Ljava/lang/String;)Ljava/lang/String;
Lcom/android/server/webkit/WebViewUpdateService$BinderService;->enableFallbackLogic(Z)V
Lcom/android/server/wifi/p2p/WifiP2pServiceImpl;->getMessenger()Landroid/os/Messenger;
Lcom/android/server/wifi/p2p/WifiP2pServiceImpl;->getP2pStateMachineMessenger()Landroid/os/Messenger;
Lcom/android/server/wifi/p2p/WifiP2pServiceImpl;->setMiracastMode(I)V
Lcom/android/server/wifi/WifiServiceImpl;->acquireMulticastLock(Landroid/os/IBinder;Ljava/lang/String;)V
Lcom/android/server/wifi/WifiServiceImpl;->acquireWifiLock(Landroid/os/IBinder;ILjava/lang/String;Landroid/os/WorkSource;)Z
Lcom/android/server/wifi/WifiServiceImpl;->addOrUpdateNetwork(Landroid/net/wifi/WifiConfiguration;)I
Lcom/android/server/wifi/WifiServiceImpl;->addToBlacklist(Ljava/lang/String;)V
Lcom/android/server/wifi/WifiServiceImpl;->clearBlacklist()V
Lcom/android/server/wifi/WifiServiceImpl;->disableEphemeralNetwork(Ljava/lang/String;)V
Lcom/android/server/wifi/WifiServiceImpl;->disableNetwork(I)Z
Lcom/android/server/wifi/WifiServiceImpl;->disconnect()V
Lcom/android/server/wifi/WifiServiceImpl;->enableAggressiveHandover(I)V
Lcom/android/server/wifi/WifiServiceImpl;->enableNetwork(IZ)Z
Lcom/android/server/wifi/WifiServiceImpl;->enableVerboseLogging(I)V
Lcom/android/server/wifi/WifiServiceImpl;->enableWifiConnectivityManager(Z)V
Lcom/android/server/wifi/WifiServiceImpl;->factoryReset()V
Lcom/android/server/wifi/WifiServiceImpl;->getAggressiveHandover()I
Lcom/android/server/wifi/WifiServiceImpl;->getAllowScansWithTraffic()I
Lcom/android/server/wifi/WifiServiceImpl;->getConfigFile()Ljava/lang/String;
Lcom/android/server/wifi/WifiServiceImpl;->getConfiguredNetworks()Ljava/util/List;
Lcom/android/server/wifi/WifiServiceImpl;->getConnectionInfo()Landroid/net/wifi/WifiInfo;
Lcom/android/server/wifi/WifiServiceImpl;->getConnectionStatistics()Landroid/net/wifi/WifiConnectionStatistics;
Lcom/android/server/wifi/WifiServiceImpl;->getCountryCode()Ljava/lang/String;
Lcom/android/server/wifi/WifiServiceImpl;->getCurrentNetwork()Landroid/net/Network;
Lcom/android/server/wifi/WifiServiceImpl;->getDhcpInfo()Landroid/net/DhcpInfo;
Lcom/android/server/wifi/WifiServiceImpl;->getEnableAutoJoinWhenAssociated()Z
Lcom/android/server/wifi/WifiServiceImpl;->getFrequencyBand()I
Lcom/android/server/wifi/WifiServiceImpl;->getMatchingWifiConfig(Landroid/net/wifi/ScanResult;)Landroid/net/wifi/WifiConfiguration;
Lcom/android/server/wifi/WifiServiceImpl;->getPrivilegedConfiguredNetworks()Ljava/util/List;
Lcom/android/server/wifi/WifiServiceImpl;->getScanResults(Ljava/lang/String;)Ljava/util/List;
Lcom/android/server/wifi/WifiServiceImpl;->getSupportedFeatures()I
Lcom/android/server/wifi/WifiServiceImpl;->getVerboseLoggingLevel()I
Lcom/android/server/wifi/WifiServiceImpl;->getWifiApConfiguration()Landroid/net/wifi/WifiConfiguration;
Lcom/android/server/wifi/WifiServiceImpl;->getWifiApEnabledState()I
Lcom/android/server/wifi/WifiServiceImpl;->getWifiEnabledState()I
Lcom/android/server/wifi/WifiServiceImpl;->getWifiServiceMessenger()Landroid/os/Messenger;
Lcom/android/server/wifi/WifiServiceImpl;->getWpsNfcConfigurationToken(I)Ljava/lang/String;
Lcom/android/server/wifi/WifiServiceImpl;->initializeMulticastFiltering()V
Lcom/android/server/wifi/WifiServiceImpl;->isMulticastEnabled()Z
Lcom/android/server/wifi/WifiServiceImpl;->isScanAlwaysAvailable()Z
Lcom/android/server/wifi/WifiServiceImpl;->pingSupplicant()Z
Lcom/android/server/wifi/WifiServiceImpl;->reassociate()V
Lcom/android/server/wifi/WifiServiceImpl;->reconnect()V
Lcom/android/server/wifi/WifiServiceImpl;->releaseMulticastLock()V
Lcom/android/server/wifi/WifiServiceImpl;->releaseWifiLock(Landroid/os/IBinder;)Z
Lcom/android/server/wifi/WifiServiceImpl;->removeNetwork(I)Z
Lcom/android/server/wifi/WifiServiceImpl;->reportActivityInfo()Landroid/net/wifi/WifiActivityEnergyInfo;
Lcom/android/server/wifi/WifiServiceImpl;->requestActivityInfo(Landroid/os/ResultReceiver;)V
Lcom/android/server/wifi/WifiServiceImpl;->saveConfiguration()Z
Lcom/android/server/wifi/WifiServiceImpl;->setAllowScansWithTraffic(I)V
Lcom/android/server/wifi/WifiServiceImpl;->setCountryCode(Ljava/lang/String;Z)V
Lcom/android/server/wifi/WifiServiceImpl;->setEnableAutoJoinWhenAssociated(Z)Z
Lcom/android/server/wifi/WifiServiceImpl;->setFrequencyBand(IZ)V
Lcom/android/server/wifi/WifiServiceImpl;->setWifiApConfiguration(Landroid/net/wifi/WifiConfiguration;)V
Lcom/android/server/wifi/WifiServiceImpl;->setWifiApEnabled(Landroid/net/wifi/WifiConfiguration;Z)V
Lcom/android/server/wifi/WifiServiceImpl;->setWifiEnabled(Z)Z
Lcom/android/server/wifi/WifiServiceImpl;->startScan(Landroid/net/wifi/ScanSettings;Landroid/os/WorkSource;)V
Lcom/android/server/wifi/WifiServiceImpl;->updateWifiLockWorkSource(Landroid/os/IBinder;Landroid/os/WorkSource;)V
Lcom/android/server/wm/WindowManagerService;->addAppToken(ILandroid/view/IApplicationToken;IIIZZIIZZLandroid/graphics/Rect;Landroid/content/res/Configuration;IZZII)V
Lcom/android/server/wm/WindowManagerService;->addWindowToken(Landroid/os/IBinder;I)V
Lcom/android/server/wm/WindowManagerService;->clearForcedDisplayDensityForUser(II)V
Lcom/android/server/wm/WindowManagerService;->clearForcedDisplaySize(I)V
Lcom/android/server/wm/WindowManagerService;->clearWindowContentFrameStats(Landroid/os/IBinder;)Z
Lcom/android/server/wm/WindowManagerService;->disableKeyguard(Landroid/os/IBinder;Ljava/lang/String;)V
Lcom/android/server/wm/WindowManagerService;->dismissKeyguard()V
Lcom/android/server/wm/WindowManagerService;->executeAppTransition()V
Lcom/android/server/wm/WindowManagerService;->exitKeyguardSecurely(Landroid/view/IOnKeyguardExitResult;)V
Lcom/android/server/wm/WindowManagerService;->freezeRotation(I)V
Lcom/android/server/wm/WindowManagerService;->getWindowContentFrameStats(Landroid/os/IBinder;)Landroid/view/WindowContentFrameStats;
Lcom/android/server/wm/WindowManagerService;->isViewServerRunning()Z
Lcom/android/server/wm/WindowManagerService;->keyguardGoingAway(I)V
Lcom/android/server/wm/WindowManagerService;->lockNow(Landroid/os/Bundle;)V
Lcom/android/server/wm/WindowManagerService;->notifyAppResumed(Landroid/os/IBinder;ZZ)V
Lcom/android/server/wm/WindowManagerService;->notifyAppStopped(Landroid/os/IBinder;)V
Lcom/android/server/wm/WindowManagerService;->pauseKeyDispatching(Landroid/os/IBinder;)V
Lcom/android/server/wm/WindowManagerService;->prepareAppTransition(IZ)V
Lcom/android/server/wm/WindowManagerService;->reenableKeyguard(Landroid/os/IBinder;)V
Lcom/android/server/wm/WindowManagerService;->registerDockedStackListener(Landroid/view/IDockedStackListener;)V
Lcom/android/server/wm/WindowManagerService;->registerShortcutKey(JLcom/android/Iernal/policy/IShortcutService;)V
Lcom/android/server/wm/WindowManagerService;->removeAppToken(Landroid/os/IBinder;)V
Lcom/android/server/wm/WindowManagerService;->removeWindowToken(Landroid/os/IBinder;)V
Lcom/android/server/wm/WindowManagerService;->requestAssistScreenshot(Lcom/android/Iernal/app/IAssistScreenshotReceiver;)Z
Lcom/android/server/wm/WindowManagerService;->resumeKeyDispatching(Landroid/os/IBinder;)V
Lcom/android/server/wm/WindowManagerService;->screenshotApplications(Landroid/os/IBinder;IIIF)Landroid/graphics/Bitmap;
Lcom/android/server/wm/WindowManagerService;->screenshotWallpaper()Landroid/graphics/Bitmap;
Lcom/android/server/wm/WindowManagerService;->setAnimationScale(IF)V
Lcom/android/server/wm/WindowManagerService;->setAnimationScales([F)V
Lcom/android/server/wm/WindowManagerService;->setAppOrientation(Landroid/view/IApplicationToken;I)V
Lcom/android/server/wm/WindowManagerService;->setAppStartingWindow(Landroid/os/IBinder;Ljava/lang/String;ILandroid/content/res/CompatibilityInfo;Ljava/lang/CharSequence;IIIILandroid/os/IBinder;Z)Z
Lcom/android/server/wm/WindowManagerService;->setAppTask(Landroid/os/IBinder;IILandroid/graphics/Rect;Landroid/content/res/Configuration;IZ)V
Lcom/android/server/wm/WindowManagerService;->setAppVisibility(Landroid/os/IBinder;Z)V
Lcom/android/server/wm/WindowManagerService;->setEventDispatching(Z)V
Lcom/android/server/wm/WindowManagerService;->setFocusedApp(Landroid/os/IBinder;Z)V
Lcom/android/server/wm/WindowManagerService;->setForcedDisplayDensityForUser(III)V
Lcom/android/server/wm/WindowManagerService;->setForcedDisplayScalingMode(II)V
Lcom/android/server/wm/WindowManagerService;->setForcedDisplaySize(III)V
Lcom/android/server/wm/WindowManagerService;->setNewConfiguration(Landroid/content/res/Configuration;)[I
Lcom/android/server/wm/WindowManagerService;->setOverscan(IIIII)V
Lcom/android/server/wm/WindowManagerService;->setRecentsVisibility(Z)V
Lcom/android/server/wm/WindowManagerService;->setTvPipVisibility(Z)V
Lcom/android/server/wm/WindowManagerService;->startAppFreezingScreen(Landroid/os/IBinder;I)V
Lcom/android/server/wm/WindowManagerService;->startFreezingScreen(II)V
Lcom/android/server/wm/WindowManagerService;->startViewServer(I)Z
Lcom/android/server/wm/WindowManagerService;->statusBarVisibilityChanged(I)V
Lcom/android/server/wm/WindowManagerService;->stopAppFreezingScreen(Landroid/os/IBinder;Z)V
Lcom/android/server/wm/WindowManagerService;->stopFreezingScreen()V
Lcom/android/server/wm/WindowManagerService;->stopViewServer()Z
Lcom/android/server/wm/WindowManagerService;->thawRotation()V
Lcom/android/server/wm/WindowManagerService;->updateOrientationFromAppTokens(Landroid/content/res/Configuration;Landroid/os/IBinder;)Landroid/content/res/Configuration;
